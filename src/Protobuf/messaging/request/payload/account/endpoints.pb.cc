// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messaging/request/payload/account/endpoints.proto

#include "messaging/request/payload/account/endpoints.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace agrirouter {
namespace request {
namespace payload {
namespace account {
class ListEndpointsQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListEndpointsQuery>
      _instance;
} _ListEndpointsQuery_default_instance_;
}  // namespace account
}  // namespace payload
}  // namespace request
}  // namespace agrirouter
namespace protobuf_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto {
void InitDefaultsListEndpointsQueryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::agrirouter::request::payload::account::_ListEndpointsQuery_default_instance_;
    new (ptr) ::agrirouter::request::payload::account::ListEndpointsQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agrirouter::request::payload::account::ListEndpointsQuery::InitAsDefaultInstance();
}

void InitDefaultsListEndpointsQuery() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsListEndpointsQueryImpl);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::request::payload::account::ListEndpointsQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::request::payload::account::ListEndpointsQuery, technical_message_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::request::payload::account::ListEndpointsQuery, direction_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::agrirouter::request::payload::account::ListEndpointsQuery)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::agrirouter::request::payload::account::_ListEndpointsQuery_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "messaging/request/payload/account/endpoints.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n1messaging/request/payload/account/endp"
      "oints.proto\022\"agrirouter.request.payload."
      "account\"\277\001\n\022ListEndpointsQuery\022\036\n\026techni"
      "cal_message_type\030\001 \001(\t\022S\n\tdirection\030\002 \001("
      "\0162@.agrirouter.request.payload.account.L"
      "istEndpointsQuery.Direction\"4\n\tDirection"
      "\022\010\n\004SEND\020\000\022\013\n\007RECEIVE\020\001\022\020\n\014SEND_RECEIVE\020"
      "\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 289);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messaging/request/payload/account/endpoints.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto
namespace agrirouter {
namespace request {
namespace payload {
namespace account {
const ::google::protobuf::EnumDescriptor* ListEndpointsQuery_Direction_descriptor() {
  protobuf_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto::file_level_enum_descriptors[0];
}
bool ListEndpointsQuery_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ListEndpointsQuery_Direction ListEndpointsQuery::SEND;
const ListEndpointsQuery_Direction ListEndpointsQuery::RECEIVE;
const ListEndpointsQuery_Direction ListEndpointsQuery::SEND_RECEIVE;
const ListEndpointsQuery_Direction ListEndpointsQuery::Direction_MIN;
const ListEndpointsQuery_Direction ListEndpointsQuery::Direction_MAX;
const int ListEndpointsQuery::Direction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ListEndpointsQuery::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListEndpointsQuery::kTechnicalMessageTypeFieldNumber;
const int ListEndpointsQuery::kDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListEndpointsQuery::ListEndpointsQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto::InitDefaultsListEndpointsQuery();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.request.payload.account.ListEndpointsQuery)
}
ListEndpointsQuery::ListEndpointsQuery(const ListEndpointsQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  technical_message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.technical_message_type().size() > 0) {
    technical_message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.technical_message_type_);
  }
  direction_ = from.direction_;
  // @@protoc_insertion_point(copy_constructor:agrirouter.request.payload.account.ListEndpointsQuery)
}

void ListEndpointsQuery::SharedCtor() {
  technical_message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_ = 0;
  _cached_size_ = 0;
}

ListEndpointsQuery::~ListEndpointsQuery() {
  // @@protoc_insertion_point(destructor:agrirouter.request.payload.account.ListEndpointsQuery)
  SharedDtor();
}

void ListEndpointsQuery::SharedDtor() {
  technical_message_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListEndpointsQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListEndpointsQuery::descriptor() {
  ::protobuf_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListEndpointsQuery& ListEndpointsQuery::default_instance() {
  ::protobuf_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto::InitDefaultsListEndpointsQuery();
  return *internal_default_instance();
}

ListEndpointsQuery* ListEndpointsQuery::New(::google::protobuf::Arena* arena) const {
  ListEndpointsQuery* n = new ListEndpointsQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListEndpointsQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.request.payload.account.ListEndpointsQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  technical_message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_ = 0;
  _internal_metadata_.Clear();
}

bool ListEndpointsQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.request.payload.account.ListEndpointsQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string technical_message_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_technical_message_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->technical_message_type().data(), static_cast<int>(this->technical_message_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.request.payload.account.ListEndpointsQuery.technical_message_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .agrirouter.request.payload.account.ListEndpointsQuery.Direction direction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::agrirouter::request::payload::account::ListEndpointsQuery_Direction >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.request.payload.account.ListEndpointsQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.request.payload.account.ListEndpointsQuery)
  return false;
#undef DO_
}

void ListEndpointsQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.request.payload.account.ListEndpointsQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string technical_message_type = 1;
  if (this->technical_message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->technical_message_type().data(), static_cast<int>(this->technical_message_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.request.payload.account.ListEndpointsQuery.technical_message_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->technical_message_type(), output);
  }

  // .agrirouter.request.payload.account.ListEndpointsQuery.Direction direction = 2;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->direction(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:agrirouter.request.payload.account.ListEndpointsQuery)
}

::google::protobuf::uint8* ListEndpointsQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.request.payload.account.ListEndpointsQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string technical_message_type = 1;
  if (this->technical_message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->technical_message_type().data(), static_cast<int>(this->technical_message_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.request.payload.account.ListEndpointsQuery.technical_message_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->technical_message_type(), target);
  }

  // .agrirouter.request.payload.account.ListEndpointsQuery.Direction direction = 2;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->direction(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.request.payload.account.ListEndpointsQuery)
  return target;
}

size_t ListEndpointsQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.request.payload.account.ListEndpointsQuery)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string technical_message_type = 1;
  if (this->technical_message_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->technical_message_type());
  }

  // .agrirouter.request.payload.account.ListEndpointsQuery.Direction direction = 2;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListEndpointsQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.request.payload.account.ListEndpointsQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const ListEndpointsQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListEndpointsQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.request.payload.account.ListEndpointsQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.request.payload.account.ListEndpointsQuery)
    MergeFrom(*source);
  }
}

void ListEndpointsQuery::MergeFrom(const ListEndpointsQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.request.payload.account.ListEndpointsQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.technical_message_type().size() > 0) {

    technical_message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.technical_message_type_);
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
}

void ListEndpointsQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.request.payload.account.ListEndpointsQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListEndpointsQuery::CopyFrom(const ListEndpointsQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.request.payload.account.ListEndpointsQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListEndpointsQuery::IsInitialized() const {
  return true;
}

void ListEndpointsQuery::Swap(ListEndpointsQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListEndpointsQuery::InternalSwap(ListEndpointsQuery* other) {
  using std::swap;
  technical_message_type_.Swap(&other->technical_message_type_);
  swap(direction_, other->direction_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListEndpointsQuery::GetMetadata() const {
  protobuf_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messaging_2frequest_2fpayload_2faccount_2fendpoints_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace account
}  // namespace payload
}  // namespace request
}  // namespace agrirouter

// @@protoc_insertion_point(global_scope)
