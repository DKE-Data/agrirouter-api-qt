// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messaging/request/request.proto

#include "messaging/request/request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace agrirouter {
namespace request {
class RequestEnvelopeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestEnvelope>
      _instance;
} _RequestEnvelope_default_instance_;
class RequestPayloadWrapperDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestPayloadWrapper>
      _instance;
} _RequestPayloadWrapper_default_instance_;
}  // namespace request
}  // namespace agrirouter
namespace protobuf_messaging_2frequest_2frequest_2eproto {
void InitDefaultsRequestEnvelopeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_commons_2fchunk_2eproto::InitDefaultsChunkComponent();
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  {
    void* ptr = &::agrirouter::request::_RequestEnvelope_default_instance_;
    new (ptr) ::agrirouter::request::RequestEnvelope();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agrirouter::request::RequestEnvelope::InitAsDefaultInstance();
}

void InitDefaultsRequestEnvelope() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRequestEnvelopeImpl);
}

void InitDefaultsRequestPayloadWrapperImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fany_2eproto::InitDefaultsAny();
  {
    void* ptr = &::agrirouter::request::_RequestPayloadWrapper_default_instance_;
    new (ptr) ::agrirouter::request::RequestPayloadWrapper();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agrirouter::request::RequestPayloadWrapper::InitAsDefaultInstance();
}

void InitDefaultsRequestPayloadWrapper() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRequestPayloadWrapperImpl);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::request::RequestEnvelope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::request::RequestEnvelope, application_message_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::request::RequestEnvelope, application_message_seq_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::request::RequestEnvelope, technical_message_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::request::RequestEnvelope, team_set_context_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::request::RequestEnvelope, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::request::RequestEnvelope, recipients_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::request::RequestEnvelope, chunk_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::request::RequestEnvelope, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::request::RequestPayloadWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::request::RequestPayloadWrapper, details_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::agrirouter::request::RequestEnvelope)},
  { 13, -1, sizeof(::agrirouter::request::RequestPayloadWrapper)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::agrirouter::request::_RequestEnvelope_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::agrirouter::request::_RequestPayloadWrapper_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "messaging/request/request.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\037messaging/request/request.proto\022\022agrir"
      "outer.request\032\031google/protobuf/any.proto"
      "\032\037google/protobuf/timestamp.proto\032\023commo"
      "ns/chunk.proto\"\377\002\n\017RequestEnvelope\022\036\n\026ap"
      "plication_message_id\030\001 \001(\t\022\"\n\032applicatio"
      "n_message_seq_no\030\002 \001(\003\022\036\n\026technical_mess"
      "age_type\030\003 \001(\t\022\033\n\023team_set_context_id\030\004 "
      "\001(\t\0226\n\004mode\030\005 \001(\0162(.agrirouter.request.R"
      "equestEnvelope.Mode\022\022\n\nrecipients\030\006 \003(\t\022"
      "6\n\nchunk_info\030\007 \001(\0132\".agrirouter.commons"
      ".ChunkComponent\022-\n\ttimestamp\030\010 \001(\0132\032.goo"
      "gle.protobuf.Timestamp\"8\n\004Mode\022\n\n\006DIRECT"
      "\020\000\022\013\n\007PUBLISH\020\001\022\027\n\023PUBLISH_WITH_DIRECT\020\002"
      "\">\n\025RequestPayloadWrapper\022%\n\007details\030\001 \001"
      "(\0132\024.google.protobuf.Anyb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 592);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messaging/request/request.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fany_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_commons_2fchunk_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_messaging_2frequest_2frequest_2eproto
namespace agrirouter {
namespace request {
const ::google::protobuf::EnumDescriptor* RequestEnvelope_Mode_descriptor() {
  protobuf_messaging_2frequest_2frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messaging_2frequest_2frequest_2eproto::file_level_enum_descriptors[0];
}
bool RequestEnvelope_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RequestEnvelope_Mode RequestEnvelope::DIRECT;
const RequestEnvelope_Mode RequestEnvelope::PUBLISH;
const RequestEnvelope_Mode RequestEnvelope::PUBLISH_WITH_DIRECT;
const RequestEnvelope_Mode RequestEnvelope::Mode_MIN;
const RequestEnvelope_Mode RequestEnvelope::Mode_MAX;
const int RequestEnvelope::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void RequestEnvelope::InitAsDefaultInstance() {
  ::agrirouter::request::_RequestEnvelope_default_instance_._instance.get_mutable()->chunk_info_ = const_cast< ::agrirouter::commons::ChunkComponent*>(
      ::agrirouter::commons::ChunkComponent::internal_default_instance());
  ::agrirouter::request::_RequestEnvelope_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void RequestEnvelope::clear_chunk_info() {
  if (GetArenaNoVirtual() == NULL && chunk_info_ != NULL) {
    delete chunk_info_;
  }
  chunk_info_ = NULL;
}
void RequestEnvelope::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestEnvelope::kApplicationMessageIdFieldNumber;
const int RequestEnvelope::kApplicationMessageSeqNoFieldNumber;
const int RequestEnvelope::kTechnicalMessageTypeFieldNumber;
const int RequestEnvelope::kTeamSetContextIdFieldNumber;
const int RequestEnvelope::kModeFieldNumber;
const int RequestEnvelope::kRecipientsFieldNumber;
const int RequestEnvelope::kChunkInfoFieldNumber;
const int RequestEnvelope::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestEnvelope::RequestEnvelope()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_messaging_2frequest_2frequest_2eproto::InitDefaultsRequestEnvelope();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.request.RequestEnvelope)
}
RequestEnvelope::RequestEnvelope(const RequestEnvelope& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      recipients_(from.recipients_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  application_message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.application_message_id().size() > 0) {
    application_message_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_message_id_);
  }
  technical_message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.technical_message_type().size() > 0) {
    technical_message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.technical_message_type_);
  }
  team_set_context_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.team_set_context_id().size() > 0) {
    team_set_context_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_set_context_id_);
  }
  if (from.has_chunk_info()) {
    chunk_info_ = new ::agrirouter::commons::ChunkComponent(*from.chunk_info_);
  } else {
    chunk_info_ = NULL;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::google::protobuf::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  ::memcpy(&application_message_seq_no_, &from.application_message_seq_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&application_message_seq_no_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:agrirouter.request.RequestEnvelope)
}

void RequestEnvelope::SharedCtor() {
  application_message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  technical_message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_set_context_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chunk_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&chunk_info_)) + sizeof(mode_));
  _cached_size_ = 0;
}

RequestEnvelope::~RequestEnvelope() {
  // @@protoc_insertion_point(destructor:agrirouter.request.RequestEnvelope)
  SharedDtor();
}

void RequestEnvelope::SharedDtor() {
  application_message_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  technical_message_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_set_context_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete chunk_info_;
  if (this != internal_default_instance()) delete timestamp_;
}

void RequestEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestEnvelope::descriptor() {
  ::protobuf_messaging_2frequest_2frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messaging_2frequest_2frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestEnvelope& RequestEnvelope::default_instance() {
  ::protobuf_messaging_2frequest_2frequest_2eproto::InitDefaultsRequestEnvelope();
  return *internal_default_instance();
}

RequestEnvelope* RequestEnvelope::New(::google::protobuf::Arena* arena) const {
  RequestEnvelope* n = new RequestEnvelope;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.request.RequestEnvelope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recipients_.Clear();
  application_message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  technical_message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_set_context_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && chunk_info_ != NULL) {
    delete chunk_info_;
  }
  chunk_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  ::memset(&application_message_seq_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&application_message_seq_no_)) + sizeof(mode_));
  _internal_metadata_.Clear();
}

bool RequestEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.request.RequestEnvelope)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string application_message_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application_message_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->application_message_id().data(), static_cast<int>(this->application_message_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.request.RequestEnvelope.application_message_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 application_message_seq_no = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &application_message_seq_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string technical_message_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_technical_message_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->technical_message_type().data(), static_cast<int>(this->technical_message_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.request.RequestEnvelope.technical_message_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string team_set_context_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_set_context_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->team_set_context_id().data(), static_cast<int>(this->team_set_context_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.request.RequestEnvelope.team_set_context_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .agrirouter.request.RequestEnvelope.Mode mode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::agrirouter::request::RequestEnvelope_Mode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string recipients = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_recipients()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->recipients(this->recipients_size() - 1).data(),
            static_cast<int>(this->recipients(this->recipients_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.request.RequestEnvelope.recipients"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .agrirouter.commons.ChunkComponent chunk_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_chunk_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp timestamp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.request.RequestEnvelope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.request.RequestEnvelope)
  return false;
#undef DO_
}

void RequestEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.request.RequestEnvelope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string application_message_id = 1;
  if (this->application_message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_message_id().data(), static_cast<int>(this->application_message_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.request.RequestEnvelope.application_message_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->application_message_id(), output);
  }

  // int64 application_message_seq_no = 2;
  if (this->application_message_seq_no() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->application_message_seq_no(), output);
  }

  // string technical_message_type = 3;
  if (this->technical_message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->technical_message_type().data(), static_cast<int>(this->technical_message_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.request.RequestEnvelope.technical_message_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->technical_message_type(), output);
  }

  // string team_set_context_id = 4;
  if (this->team_set_context_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team_set_context_id().data(), static_cast<int>(this->team_set_context_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.request.RequestEnvelope.team_set_context_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->team_set_context_id(), output);
  }

  // .agrirouter.request.RequestEnvelope.Mode mode = 5;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->mode(), output);
  }

  // repeated string recipients = 6;
  for (int i = 0, n = this->recipients_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recipients(i).data(), static_cast<int>(this->recipients(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.request.RequestEnvelope.recipients");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->recipients(i), output);
  }

  // .agrirouter.commons.ChunkComponent chunk_info = 7;
  if (this->has_chunk_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->chunk_info_, output);
  }

  // .google.protobuf.Timestamp timestamp = 8;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->timestamp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:agrirouter.request.RequestEnvelope)
}

::google::protobuf::uint8* RequestEnvelope::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.request.RequestEnvelope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string application_message_id = 1;
  if (this->application_message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_message_id().data(), static_cast<int>(this->application_message_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.request.RequestEnvelope.application_message_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->application_message_id(), target);
  }

  // int64 application_message_seq_no = 2;
  if (this->application_message_seq_no() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->application_message_seq_no(), target);
  }

  // string technical_message_type = 3;
  if (this->technical_message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->technical_message_type().data(), static_cast<int>(this->technical_message_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.request.RequestEnvelope.technical_message_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->technical_message_type(), target);
  }

  // string team_set_context_id = 4;
  if (this->team_set_context_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team_set_context_id().data(), static_cast<int>(this->team_set_context_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.request.RequestEnvelope.team_set_context_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->team_set_context_id(), target);
  }

  // .agrirouter.request.RequestEnvelope.Mode mode = 5;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->mode(), target);
  }

  // repeated string recipients = 6;
  for (int i = 0, n = this->recipients_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recipients(i).data(), static_cast<int>(this->recipients(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.request.RequestEnvelope.recipients");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->recipients(i), target);
  }

  // .agrirouter.commons.ChunkComponent chunk_info = 7;
  if (this->has_chunk_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->chunk_info_, deterministic, target);
  }

  // .google.protobuf.Timestamp timestamp = 8;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->timestamp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.request.RequestEnvelope)
  return target;
}

size_t RequestEnvelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.request.RequestEnvelope)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string recipients = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->recipients_size());
  for (int i = 0, n = this->recipients_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->recipients(i));
  }

  // string application_message_id = 1;
  if (this->application_message_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->application_message_id());
  }

  // string technical_message_type = 3;
  if (this->technical_message_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->technical_message_type());
  }

  // string team_set_context_id = 4;
  if (this->team_set_context_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->team_set_context_id());
  }

  // .agrirouter.commons.ChunkComponent chunk_info = 7;
  if (this->has_chunk_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->chunk_info_);
  }

  // .google.protobuf.Timestamp timestamp = 8;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->timestamp_);
  }

  // int64 application_message_seq_no = 2;
  if (this->application_message_seq_no() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->application_message_seq_no());
  }

  // .agrirouter.request.RequestEnvelope.Mode mode = 5;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.request.RequestEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestEnvelope* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestEnvelope>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.request.RequestEnvelope)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.request.RequestEnvelope)
    MergeFrom(*source);
  }
}

void RequestEnvelope::MergeFrom(const RequestEnvelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.request.RequestEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recipients_.MergeFrom(from.recipients_);
  if (from.application_message_id().size() > 0) {

    application_message_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_message_id_);
  }
  if (from.technical_message_type().size() > 0) {

    technical_message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.technical_message_type_);
  }
  if (from.team_set_context_id().size() > 0) {

    team_set_context_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_set_context_id_);
  }
  if (from.has_chunk_info()) {
    mutable_chunk_info()->::agrirouter::commons::ChunkComponent::MergeFrom(from.chunk_info());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.application_message_seq_no() != 0) {
    set_application_message_seq_no(from.application_message_seq_no());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
}

void RequestEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.request.RequestEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestEnvelope::CopyFrom(const RequestEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.request.RequestEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestEnvelope::IsInitialized() const {
  return true;
}

void RequestEnvelope::Swap(RequestEnvelope* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestEnvelope::InternalSwap(RequestEnvelope* other) {
  using std::swap;
  recipients_.InternalSwap(&other->recipients_);
  application_message_id_.Swap(&other->application_message_id_);
  technical_message_type_.Swap(&other->technical_message_type_);
  team_set_context_id_.Swap(&other->team_set_context_id_);
  swap(chunk_info_, other->chunk_info_);
  swap(timestamp_, other->timestamp_);
  swap(application_message_seq_no_, other->application_message_seq_no_);
  swap(mode_, other->mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestEnvelope::GetMetadata() const {
  protobuf_messaging_2frequest_2frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messaging_2frequest_2frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestPayloadWrapper::InitAsDefaultInstance() {
  ::agrirouter::request::_RequestPayloadWrapper_default_instance_._instance.get_mutable()->details_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
void RequestPayloadWrapper::clear_details() {
  if (GetArenaNoVirtual() == NULL && details_ != NULL) {
    delete details_;
  }
  details_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestPayloadWrapper::kDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestPayloadWrapper::RequestPayloadWrapper()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_messaging_2frequest_2frequest_2eproto::InitDefaultsRequestPayloadWrapper();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.request.RequestPayloadWrapper)
}
RequestPayloadWrapper::RequestPayloadWrapper(const RequestPayloadWrapper& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_details()) {
    details_ = new ::google::protobuf::Any(*from.details_);
  } else {
    details_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:agrirouter.request.RequestPayloadWrapper)
}

void RequestPayloadWrapper::SharedCtor() {
  details_ = NULL;
  _cached_size_ = 0;
}

RequestPayloadWrapper::~RequestPayloadWrapper() {
  // @@protoc_insertion_point(destructor:agrirouter.request.RequestPayloadWrapper)
  SharedDtor();
}

void RequestPayloadWrapper::SharedDtor() {
  if (this != internal_default_instance()) delete details_;
}

void RequestPayloadWrapper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestPayloadWrapper::descriptor() {
  ::protobuf_messaging_2frequest_2frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messaging_2frequest_2frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestPayloadWrapper& RequestPayloadWrapper::default_instance() {
  ::protobuf_messaging_2frequest_2frequest_2eproto::InitDefaultsRequestPayloadWrapper();
  return *internal_default_instance();
}

RequestPayloadWrapper* RequestPayloadWrapper::New(::google::protobuf::Arena* arena) const {
  RequestPayloadWrapper* n = new RequestPayloadWrapper;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestPayloadWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.request.RequestPayloadWrapper)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && details_ != NULL) {
    delete details_;
  }
  details_ = NULL;
  _internal_metadata_.Clear();
}

bool RequestPayloadWrapper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.request.RequestPayloadWrapper)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Any details = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.request.RequestPayloadWrapper)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.request.RequestPayloadWrapper)
  return false;
#undef DO_
}

void RequestPayloadWrapper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.request.RequestPayloadWrapper)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any details = 1;
  if (this->has_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->details_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:agrirouter.request.RequestPayloadWrapper)
}

::google::protobuf::uint8* RequestPayloadWrapper::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.request.RequestPayloadWrapper)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any details = 1;
  if (this->has_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->details_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.request.RequestPayloadWrapper)
  return target;
}

size_t RequestPayloadWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.request.RequestPayloadWrapper)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Any details = 1;
  if (this->has_details()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->details_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestPayloadWrapper::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.request.RequestPayloadWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestPayloadWrapper* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestPayloadWrapper>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.request.RequestPayloadWrapper)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.request.RequestPayloadWrapper)
    MergeFrom(*source);
  }
}

void RequestPayloadWrapper::MergeFrom(const RequestPayloadWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.request.RequestPayloadWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_details()) {
    mutable_details()->::google::protobuf::Any::MergeFrom(from.details());
  }
}

void RequestPayloadWrapper::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.request.RequestPayloadWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPayloadWrapper::CopyFrom(const RequestPayloadWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.request.RequestPayloadWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPayloadWrapper::IsInitialized() const {
  return true;
}

void RequestPayloadWrapper::Swap(RequestPayloadWrapper* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestPayloadWrapper::InternalSwap(RequestPayloadWrapper* other) {
  using std::swap;
  swap(details_, other->details_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestPayloadWrapper::GetMetadata() const {
  protobuf_messaging_2frequest_2frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messaging_2frequest_2frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace request
}  // namespace agrirouter

// @@protoc_insertion_point(global_scope)
