// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messaging/response/payload/feed/feed-response.proto

#include "messaging/response/payload/feed/feed-response.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace agrirouter {
namespace feed {
namespace response {
class PageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Page>
      _instance;
} _Page_default_instance_;
class QueryMetricsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryMetrics>
      _instance;
} _QueryMetrics_default_instance_;
class HeaderQueryResponse_HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeaderQueryResponse_Header>
      _instance;
} _HeaderQueryResponse_Header_default_instance_;
class HeaderQueryResponse_FeedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeaderQueryResponse_Feed>
      _instance;
} _HeaderQueryResponse_Feed_default_instance_;
class HeaderQueryResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeaderQueryResponse>
      _instance;
} _HeaderQueryResponse_default_instance_;
class MessageQueryResponse_HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MessageQueryResponse_Header>
      _instance;
} _MessageQueryResponse_Header_default_instance_;
class MessageQueryResponse_FeedMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MessageQueryResponse_FeedMessage>
      _instance;
} _MessageQueryResponse_FeedMessage_default_instance_;
class MessageQueryResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MessageQueryResponse>
      _instance;
} _MessageQueryResponse_default_instance_;
class FailedMessageQueryResponse_HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FailedMessageQueryResponse_Header>
      _instance;
} _FailedMessageQueryResponse_Header_default_instance_;
class FailedMessageQueryResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FailedMessageQueryResponse>
      _instance;
} _FailedMessageQueryResponse_default_instance_;
}  // namespace response
}  // namespace feed
}  // namespace agrirouter
namespace protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto {
void InitDefaultsPageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::agrirouter::feed::response::_Page_default_instance_;
    new (ptr) ::agrirouter::feed::response::Page();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agrirouter::feed::response::Page::InitAsDefaultInstance();
}

void InitDefaultsPage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPageImpl);
}

void InitDefaultsQueryMetricsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::agrirouter::feed::response::_QueryMetrics_default_instance_;
    new (ptr) ::agrirouter::feed::response::QueryMetrics();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agrirouter::feed::response::QueryMetrics::InitAsDefaultInstance();
}

void InitDefaultsQueryMetrics() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQueryMetricsImpl);
}

void InitDefaultsHeaderQueryResponse_HeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  {
    void* ptr = &::agrirouter::feed::response::_HeaderQueryResponse_Header_default_instance_;
    new (ptr) ::agrirouter::feed::response::HeaderQueryResponse_Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agrirouter::feed::response::HeaderQueryResponse_Header::InitAsDefaultInstance();
}

void InitDefaultsHeaderQueryResponse_Header() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHeaderQueryResponse_HeaderImpl);
}

void InitDefaultsHeaderQueryResponse_FeedImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsHeaderQueryResponse_Header();
  {
    void* ptr = &::agrirouter::feed::response::_HeaderQueryResponse_Feed_default_instance_;
    new (ptr) ::agrirouter::feed::response::HeaderQueryResponse_Feed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agrirouter::feed::response::HeaderQueryResponse_Feed::InitAsDefaultInstance();
}

void InitDefaultsHeaderQueryResponse_Feed() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHeaderQueryResponse_FeedImpl);
}

void InitDefaultsHeaderQueryResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsQueryMetrics();
  protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsPage();
  protobuf_commons_2fchunk_2eproto::InitDefaultsChunkComponent();
  protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsHeaderQueryResponse_Feed();
  {
    void* ptr = &::agrirouter::feed::response::_HeaderQueryResponse_default_instance_;
    new (ptr) ::agrirouter::feed::response::HeaderQueryResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agrirouter::feed::response::HeaderQueryResponse::InitAsDefaultInstance();
}

void InitDefaultsHeaderQueryResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHeaderQueryResponseImpl);
}

void InitDefaultsMessageQueryResponse_HeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_commons_2fchunk_2eproto::InitDefaultsChunkComponent();
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  {
    void* ptr = &::agrirouter::feed::response::_MessageQueryResponse_Header_default_instance_;
    new (ptr) ::agrirouter::feed::response::MessageQueryResponse_Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agrirouter::feed::response::MessageQueryResponse_Header::InitAsDefaultInstance();
}

void InitDefaultsMessageQueryResponse_Header() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMessageQueryResponse_HeaderImpl);
}

void InitDefaultsMessageQueryResponse_FeedMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsMessageQueryResponse_Header();
  protobuf_google_2fprotobuf_2fany_2eproto::InitDefaultsAny();
  {
    void* ptr = &::agrirouter::feed::response::_MessageQueryResponse_FeedMessage_default_instance_;
    new (ptr) ::agrirouter::feed::response::MessageQueryResponse_FeedMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agrirouter::feed::response::MessageQueryResponse_FeedMessage::InitAsDefaultInstance();
}

void InitDefaultsMessageQueryResponse_FeedMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMessageQueryResponse_FeedMessageImpl);
}

void InitDefaultsMessageQueryResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsQueryMetrics();
  protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsPage();
  protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsMessageQueryResponse_FeedMessage();
  {
    void* ptr = &::agrirouter::feed::response::_MessageQueryResponse_default_instance_;
    new (ptr) ::agrirouter::feed::response::MessageQueryResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agrirouter::feed::response::MessageQueryResponse::InitAsDefaultInstance();
}

void InitDefaultsMessageQueryResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMessageQueryResponseImpl);
}

void InitDefaultsFailedMessageQueryResponse_HeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  {
    void* ptr = &::agrirouter::feed::response::_FailedMessageQueryResponse_Header_default_instance_;
    new (ptr) ::agrirouter::feed::response::FailedMessageQueryResponse_Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agrirouter::feed::response::FailedMessageQueryResponse_Header::InitAsDefaultInstance();
}

void InitDefaultsFailedMessageQueryResponse_Header() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFailedMessageQueryResponse_HeaderImpl);
}

void InitDefaultsFailedMessageQueryResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsQueryMetrics();
  protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsPage();
  protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsFailedMessageQueryResponse_Header();
  protobuf_commons_2fmessage_2eproto::InitDefaultsMessage();
  {
    void* ptr = &::agrirouter::feed::response::_FailedMessageQueryResponse_default_instance_;
    new (ptr) ::agrirouter::feed::response::FailedMessageQueryResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agrirouter::feed::response::FailedMessageQueryResponse::InitAsDefaultInstance();
}

void InitDefaultsFailedMessageQueryResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFailedMessageQueryResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::Page, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::Page, number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::Page, total_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::QueryMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::QueryMetrics, total_messages_in_query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::QueryMetrics, max_count_restriction_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::HeaderQueryResponse_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::HeaderQueryResponse_Header, message_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::HeaderQueryResponse_Header, technical_message_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::HeaderQueryResponse_Header, team_set_context_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::HeaderQueryResponse_Header, chunk_context_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::HeaderQueryResponse_Header, payload_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::HeaderQueryResponse_Header, sent_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::HeaderQueryResponse_Header, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::HeaderQueryResponse_Header, current_chunk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::HeaderQueryResponse_Header, created_at_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::HeaderQueryResponse_Feed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::HeaderQueryResponse_Feed, sender_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::HeaderQueryResponse_Feed, receiver_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::HeaderQueryResponse_Feed, headers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::HeaderQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::HeaderQueryResponse, querymetrics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::HeaderQueryResponse, page_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::HeaderQueryResponse, chunk_contexts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::HeaderQueryResponse, feed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::MessageQueryResponse_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::MessageQueryResponse_Header, receiver_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::MessageQueryResponse_Header, technical_message_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::MessageQueryResponse_Header, team_set_context_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::MessageQueryResponse_Header, chunk_context_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::MessageQueryResponse_Header, payload_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::MessageQueryResponse_Header, sent_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::MessageQueryResponse_Header, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::MessageQueryResponse_Header, sender_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::MessageQueryResponse_Header, created_at_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::MessageQueryResponse_Header, message_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::MessageQueryResponse_FeedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::MessageQueryResponse_FeedMessage, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::MessageQueryResponse_FeedMessage, content_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::MessageQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::MessageQueryResponse, querymetrics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::MessageQueryResponse, page_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::MessageQueryResponse, messages_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::FailedMessageQueryResponse_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::FailedMessageQueryResponse_Header, technical_message_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::FailedMessageQueryResponse_Header, team_set_context_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::FailedMessageQueryResponse_Header, payload_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::FailedMessageQueryResponse_Header, sent_timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::FailedMessageQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::FailedMessageQueryResponse, querymetrics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::FailedMessageQueryResponse, page_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::FailedMessageQueryResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::agrirouter::feed::response::FailedMessageQueryResponse, reasons_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::agrirouter::feed::response::Page)},
  { 7, -1, sizeof(::agrirouter::feed::response::QueryMetrics)},
  { 14, -1, sizeof(::agrirouter::feed::response::HeaderQueryResponse_Header)},
  { 28, -1, sizeof(::agrirouter::feed::response::HeaderQueryResponse_Feed)},
  { 36, -1, sizeof(::agrirouter::feed::response::HeaderQueryResponse)},
  { 45, -1, sizeof(::agrirouter::feed::response::MessageQueryResponse_Header)},
  { 60, -1, sizeof(::agrirouter::feed::response::MessageQueryResponse_FeedMessage)},
  { 67, -1, sizeof(::agrirouter::feed::response::MessageQueryResponse)},
  { 75, -1, sizeof(::agrirouter::feed::response::FailedMessageQueryResponse_Header)},
  { 84, -1, sizeof(::agrirouter::feed::response::FailedMessageQueryResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::agrirouter::feed::response::_Page_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::agrirouter::feed::response::_QueryMetrics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::agrirouter::feed::response::_HeaderQueryResponse_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::agrirouter::feed::response::_HeaderQueryResponse_Feed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::agrirouter::feed::response::_HeaderQueryResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::agrirouter::feed::response::_MessageQueryResponse_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::agrirouter::feed::response::_MessageQueryResponse_FeedMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::agrirouter::feed::response::_MessageQueryResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::agrirouter::feed::response::_FailedMessageQueryResponse_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::agrirouter::feed::response::_FailedMessageQueryResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "messaging/response/payload/feed/feed-response.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n3messaging/response/payload/feed/feed-r"
      "esponse.proto\022\030agrirouter.feed.response\032"
      "\037google/protobuf/timestamp.proto\032\031google"
      "/protobuf/any.proto\032\025commons/message.pro"
      "to\032\023commons/chunk.proto\"%\n\004Page\022\016\n\006numbe"
      "r\030\001 \001(\005\022\r\n\005total\030\002 \001(\005\"N\n\014QueryMetrics\022\037"
      "\n\027total_messages_in_query\030\001 \001(\005\022\035\n\025max_c"
      "ount_restriction\030\002 \001(\005\"\226\005\n\023HeaderQueryRe"
      "sponse\022<\n\014queryMetrics\030\001 \001(\0132&.agriroute"
      "r.feed.response.QueryMetrics\022,\n\004page\030\002 \001"
      "(\0132\036.agrirouter.feed.response.Page\022:\n\016ch"
      "unk_contexts\030\003 \003(\0132\".agrirouter.commons."
      "ChunkComponent\022@\n\004feed\030\004 \003(\01322.agriroute"
      "r.feed.response.HeaderQueryResponse.Feed"
      "\032\235\002\n\006Header\022\022\n\nmessage_id\030\001 \001(\t\022\036\n\026techn"
      "ical_message_type\030\002 \001(\t\022\033\n\023team_set_cont"
      "ext_id\030\003 \001(\t\022\030\n\020chunk_context_id\030\004 \001(\t\022\024"
      "\n\014payload_size\030\005 \001(\003\0222\n\016sent_timestamp\030\006"
      " \001(\0132\032.google.protobuf.Timestamp\022\027\n\017sequ"
      "ence_number\030\007 \001(\003\022\025\n\rcurrent_chunk\030\010 \001(\003"
      "\022.\n\ncreated_at\030\t \001(\0132\032.google.protobuf.T"
      "imestamp\032u\n\004Feed\022\021\n\tsender_id\030\001 \001(\t\022\023\n\013r"
      "eceiver_id\030\002 \001(\t\022E\n\007headers\030\003 \003(\01324.agri"
      "router.feed.response.HeaderQueryResponse"
      ".Header\"\237\005\n\024MessageQueryResponse\022<\n\014quer"
      "yMetrics\030\001 \001(\0132&.agrirouter.feed.respons"
      "e.QueryMetrics\022,\n\004page\030\002 \001(\0132\036.agriroute"
      "r.feed.response.Page\022L\n\010messages\030\003 \003(\0132:"
      ".agrirouter.feed.response.MessageQueryRe"
      "sponse.FeedMessage\032\317\002\n\006Header\022\023\n\013receive"
      "r_id\030\001 \001(\t\022\036\n\026technical_message_type\030\002 \001"
      "(\t\022\033\n\023team_set_context_id\030\003 \001(\t\0229\n\rchunk"
      "_context\030\004 \001(\0132\".agrirouter.commons.Chun"
      "kComponent\022\024\n\014payload_size\030\005 \001(\003\0222\n\016sent"
      "_timestamp\030\006 \001(\0132\032.google.protobuf.Times"
      "tamp\022\027\n\017sequence_number\030\007 \001(\003\022\021\n\tsender_"
      "id\030\010 \001(\t\022.\n\ncreated_at\030\t \001(\0132\032.google.pr"
      "otobuf.Timestamp\022\022\n\nmessage_id\030\n \001(\t\032{\n\013"
      "FeedMessage\022E\n\006header\030\001 \001(\01325.agrirouter"
      ".feed.response.MessageQueryResponse.Head"
      "er\022%\n\007content\030\002 \001(\0132\024.google.protobuf.An"
      "y\"\225\003\n\032FailedMessageQueryResponse\022<\n\014quer"
      "yMetrics\030\001 \001(\0132&.agrirouter.feed.respons"
      "e.QueryMetrics\022,\n\004page\030\002 \001(\0132\036.agriroute"
      "r.feed.response.Page\022K\n\006header\030\003 \001(\0132;.a"
      "grirouter.feed.response.FailedMessageQue"
      "ryResponse.Header\022,\n\007reasons\030\004 \003(\0132\033.agr"
      "irouter.commons.Message\032\217\001\n\006Header\022\036\n\026te"
      "chnical_message_type\030\001 \001(\t\022\033\n\023team_set_c"
      "ontext_id\030\002 \001(\t\022\024\n\014payload_size\030\003 \001(\003\0222\n"
      "\016sent_timestamp\030\004 \001(\0132\032.google.protobuf."
      "Timestampb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2057);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messaging/response/payload/feed/feed-response.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fany_2eproto::AddDescriptors();
  ::protobuf_commons_2fmessage_2eproto::AddDescriptors();
  ::protobuf_commons_2fchunk_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto
namespace agrirouter {
namespace feed {
namespace response {

// ===================================================================

void Page::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Page::kNumberFieldNumber;
const int Page::kTotalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Page::Page()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsPage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.feed.response.Page)
}
Page::Page(const Page& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&number_, &from.number_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_) -
    reinterpret_cast<char*>(&number_)) + sizeof(total_));
  // @@protoc_insertion_point(copy_constructor:agrirouter.feed.response.Page)
}

void Page::SharedCtor() {
  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_) -
      reinterpret_cast<char*>(&number_)) + sizeof(total_));
  _cached_size_ = 0;
}

Page::~Page() {
  // @@protoc_insertion_point(destructor:agrirouter.feed.response.Page)
  SharedDtor();
}

void Page::SharedDtor() {
}

void Page::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Page::descriptor() {
  ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Page& Page::default_instance() {
  ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsPage();
  return *internal_default_instance();
}

Page* Page::New(::google::protobuf::Arena* arena) const {
  Page* n = new Page;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Page::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.feed.response.Page)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_) -
      reinterpret_cast<char*>(&number_)) + sizeof(total_));
  _internal_metadata_.Clear();
}

bool Page::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.feed.response.Page)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 total = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.feed.response.Page)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.feed.response.Page)
  return false;
#undef DO_
}

void Page::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.feed.response.Page)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 number = 1;
  if (this->number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number(), output);
  }

  // int32 total = 2;
  if (this->total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:agrirouter.feed.response.Page)
}

::google::protobuf::uint8* Page::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.feed.response.Page)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 number = 1;
  if (this->number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->number(), target);
  }

  // int32 total = 2;
  if (this->total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.feed.response.Page)
  return target;
}

size_t Page::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.feed.response.Page)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 number = 1;
  if (this->number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number());
  }

  // int32 total = 2;
  if (this->total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Page::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.feed.response.Page)
  GOOGLE_DCHECK_NE(&from, this);
  const Page* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Page>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.feed.response.Page)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.feed.response.Page)
    MergeFrom(*source);
  }
}

void Page::MergeFrom(const Page& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.feed.response.Page)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.number() != 0) {
    set_number(from.number());
  }
  if (from.total() != 0) {
    set_total(from.total());
  }
}

void Page::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.feed.response.Page)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Page::CopyFrom(const Page& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.feed.response.Page)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Page::IsInitialized() const {
  return true;
}

void Page::Swap(Page* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Page::InternalSwap(Page* other) {
  using std::swap;
  swap(number_, other->number_);
  swap(total_, other->total_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Page::GetMetadata() const {
  protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QueryMetrics::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryMetrics::kTotalMessagesInQueryFieldNumber;
const int QueryMetrics::kMaxCountRestrictionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryMetrics::QueryMetrics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsQueryMetrics();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.feed.response.QueryMetrics)
}
QueryMetrics::QueryMetrics(const QueryMetrics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_messages_in_query_, &from.total_messages_in_query_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_count_restriction_) -
    reinterpret_cast<char*>(&total_messages_in_query_)) + sizeof(max_count_restriction_));
  // @@protoc_insertion_point(copy_constructor:agrirouter.feed.response.QueryMetrics)
}

void QueryMetrics::SharedCtor() {
  ::memset(&total_messages_in_query_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_count_restriction_) -
      reinterpret_cast<char*>(&total_messages_in_query_)) + sizeof(max_count_restriction_));
  _cached_size_ = 0;
}

QueryMetrics::~QueryMetrics() {
  // @@protoc_insertion_point(destructor:agrirouter.feed.response.QueryMetrics)
  SharedDtor();
}

void QueryMetrics::SharedDtor() {
}

void QueryMetrics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryMetrics::descriptor() {
  ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryMetrics& QueryMetrics::default_instance() {
  ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsQueryMetrics();
  return *internal_default_instance();
}

QueryMetrics* QueryMetrics::New(::google::protobuf::Arena* arena) const {
  QueryMetrics* n = new QueryMetrics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.feed.response.QueryMetrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_messages_in_query_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_count_restriction_) -
      reinterpret_cast<char*>(&total_messages_in_query_)) + sizeof(max_count_restriction_));
  _internal_metadata_.Clear();
}

bool QueryMetrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.feed.response.QueryMetrics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 total_messages_in_query = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_messages_in_query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_count_restriction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_count_restriction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.feed.response.QueryMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.feed.response.QueryMetrics)
  return false;
#undef DO_
}

void QueryMetrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.feed.response.QueryMetrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_messages_in_query = 1;
  if (this->total_messages_in_query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total_messages_in_query(), output);
  }

  // int32 max_count_restriction = 2;
  if (this->max_count_restriction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_count_restriction(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:agrirouter.feed.response.QueryMetrics)
}

::google::protobuf::uint8* QueryMetrics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.feed.response.QueryMetrics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_messages_in_query = 1;
  if (this->total_messages_in_query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total_messages_in_query(), target);
  }

  // int32 max_count_restriction = 2;
  if (this->max_count_restriction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_count_restriction(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.feed.response.QueryMetrics)
  return target;
}

size_t QueryMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.feed.response.QueryMetrics)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 total_messages_in_query = 1;
  if (this->total_messages_in_query() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_messages_in_query());
  }

  // int32 max_count_restriction = 2;
  if (this->max_count_restriction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_count_restriction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryMetrics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.feed.response.QueryMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryMetrics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryMetrics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.feed.response.QueryMetrics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.feed.response.QueryMetrics)
    MergeFrom(*source);
  }
}

void QueryMetrics::MergeFrom(const QueryMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.feed.response.QueryMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total_messages_in_query() != 0) {
    set_total_messages_in_query(from.total_messages_in_query());
  }
  if (from.max_count_restriction() != 0) {
    set_max_count_restriction(from.max_count_restriction());
  }
}

void QueryMetrics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.feed.response.QueryMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryMetrics::CopyFrom(const QueryMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.feed.response.QueryMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMetrics::IsInitialized() const {
  return true;
}

void QueryMetrics::Swap(QueryMetrics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryMetrics::InternalSwap(QueryMetrics* other) {
  using std::swap;
  swap(total_messages_in_query_, other->total_messages_in_query_);
  swap(max_count_restriction_, other->max_count_restriction_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryMetrics::GetMetadata() const {
  protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HeaderQueryResponse_Header::InitAsDefaultInstance() {
  ::agrirouter::feed::response::_HeaderQueryResponse_Header_default_instance_._instance.get_mutable()->sent_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::agrirouter::feed::response::_HeaderQueryResponse_Header_default_instance_._instance.get_mutable()->created_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void HeaderQueryResponse_Header::clear_sent_timestamp() {
  if (GetArenaNoVirtual() == NULL && sent_timestamp_ != NULL) {
    delete sent_timestamp_;
  }
  sent_timestamp_ = NULL;
}
void HeaderQueryResponse_Header::clear_created_at() {
  if (GetArenaNoVirtual() == NULL && created_at_ != NULL) {
    delete created_at_;
  }
  created_at_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeaderQueryResponse_Header::kMessageIdFieldNumber;
const int HeaderQueryResponse_Header::kTechnicalMessageTypeFieldNumber;
const int HeaderQueryResponse_Header::kTeamSetContextIdFieldNumber;
const int HeaderQueryResponse_Header::kChunkContextIdFieldNumber;
const int HeaderQueryResponse_Header::kPayloadSizeFieldNumber;
const int HeaderQueryResponse_Header::kSentTimestampFieldNumber;
const int HeaderQueryResponse_Header::kSequenceNumberFieldNumber;
const int HeaderQueryResponse_Header::kCurrentChunkFieldNumber;
const int HeaderQueryResponse_Header::kCreatedAtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeaderQueryResponse_Header::HeaderQueryResponse_Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsHeaderQueryResponse_Header();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.feed.response.HeaderQueryResponse.Header)
}
HeaderQueryResponse_Header::HeaderQueryResponse_Header(const HeaderQueryResponse_Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message_id().size() > 0) {
    message_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
  technical_message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.technical_message_type().size() > 0) {
    technical_message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.technical_message_type_);
  }
  team_set_context_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.team_set_context_id().size() > 0) {
    team_set_context_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_set_context_id_);
  }
  chunk_context_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chunk_context_id().size() > 0) {
    chunk_context_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chunk_context_id_);
  }
  if (from.has_sent_timestamp()) {
    sent_timestamp_ = new ::google::protobuf::Timestamp(*from.sent_timestamp_);
  } else {
    sent_timestamp_ = NULL;
  }
  if (from.has_created_at()) {
    created_at_ = new ::google::protobuf::Timestamp(*from.created_at_);
  } else {
    created_at_ = NULL;
  }
  ::memcpy(&payload_size_, &from.payload_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_chunk_) -
    reinterpret_cast<char*>(&payload_size_)) + sizeof(current_chunk_));
  // @@protoc_insertion_point(copy_constructor:agrirouter.feed.response.HeaderQueryResponse.Header)
}

void HeaderQueryResponse_Header::SharedCtor() {
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  technical_message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_set_context_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chunk_context_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sent_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_chunk_) -
      reinterpret_cast<char*>(&sent_timestamp_)) + sizeof(current_chunk_));
  _cached_size_ = 0;
}

HeaderQueryResponse_Header::~HeaderQueryResponse_Header() {
  // @@protoc_insertion_point(destructor:agrirouter.feed.response.HeaderQueryResponse.Header)
  SharedDtor();
}

void HeaderQueryResponse_Header::SharedDtor() {
  message_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  technical_message_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_set_context_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chunk_context_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sent_timestamp_;
  if (this != internal_default_instance()) delete created_at_;
}

void HeaderQueryResponse_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeaderQueryResponse_Header::descriptor() {
  ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeaderQueryResponse_Header& HeaderQueryResponse_Header::default_instance() {
  ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsHeaderQueryResponse_Header();
  return *internal_default_instance();
}

HeaderQueryResponse_Header* HeaderQueryResponse_Header::New(::google::protobuf::Arena* arena) const {
  HeaderQueryResponse_Header* n = new HeaderQueryResponse_Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeaderQueryResponse_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.feed.response.HeaderQueryResponse.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  technical_message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_set_context_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chunk_context_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sent_timestamp_ != NULL) {
    delete sent_timestamp_;
  }
  sent_timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && created_at_ != NULL) {
    delete created_at_;
  }
  created_at_ = NULL;
  ::memset(&payload_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_chunk_) -
      reinterpret_cast<char*>(&payload_size_)) + sizeof(current_chunk_));
  _internal_metadata_.Clear();
}

bool HeaderQueryResponse_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.feed.response.HeaderQueryResponse.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string message_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message_id().data(), static_cast<int>(this->message_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.response.HeaderQueryResponse.Header.message_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string technical_message_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_technical_message_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->technical_message_type().data(), static_cast<int>(this->technical_message_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.response.HeaderQueryResponse.Header.technical_message_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string team_set_context_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_set_context_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->team_set_context_id().data(), static_cast<int>(this->team_set_context_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.response.HeaderQueryResponse.Header.team_set_context_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chunk_context_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chunk_context_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chunk_context_id().data(), static_cast<int>(this->chunk_context_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.response.HeaderQueryResponse.Header.chunk_context_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 payload_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &payload_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp sent_timestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sent_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 sequence_number = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 current_chunk = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &current_chunk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp created_at = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_created_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.feed.response.HeaderQueryResponse.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.feed.response.HeaderQueryResponse.Header)
  return false;
#undef DO_
}

void HeaderQueryResponse_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.feed.response.HeaderQueryResponse.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_id = 1;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), static_cast<int>(this->message_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.HeaderQueryResponse.Header.message_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message_id(), output);
  }

  // string technical_message_type = 2;
  if (this->technical_message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->technical_message_type().data(), static_cast<int>(this->technical_message_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.HeaderQueryResponse.Header.technical_message_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->technical_message_type(), output);
  }

  // string team_set_context_id = 3;
  if (this->team_set_context_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team_set_context_id().data(), static_cast<int>(this->team_set_context_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.HeaderQueryResponse.Header.team_set_context_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_set_context_id(), output);
  }

  // string chunk_context_id = 4;
  if (this->chunk_context_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chunk_context_id().data(), static_cast<int>(this->chunk_context_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.HeaderQueryResponse.Header.chunk_context_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->chunk_context_id(), output);
  }

  // int64 payload_size = 5;
  if (this->payload_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->payload_size(), output);
  }

  // .google.protobuf.Timestamp sent_timestamp = 6;
  if (this->has_sent_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->sent_timestamp_, output);
  }

  // int64 sequence_number = 7;
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->sequence_number(), output);
  }

  // int64 current_chunk = 8;
  if (this->current_chunk() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->current_chunk(), output);
  }

  // .google.protobuf.Timestamp created_at = 9;
  if (this->has_created_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->created_at_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:agrirouter.feed.response.HeaderQueryResponse.Header)
}

::google::protobuf::uint8* HeaderQueryResponse_Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.feed.response.HeaderQueryResponse.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_id = 1;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), static_cast<int>(this->message_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.HeaderQueryResponse.Header.message_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message_id(), target);
  }

  // string technical_message_type = 2;
  if (this->technical_message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->technical_message_type().data(), static_cast<int>(this->technical_message_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.HeaderQueryResponse.Header.technical_message_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->technical_message_type(), target);
  }

  // string team_set_context_id = 3;
  if (this->team_set_context_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team_set_context_id().data(), static_cast<int>(this->team_set_context_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.HeaderQueryResponse.Header.team_set_context_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_set_context_id(), target);
  }

  // string chunk_context_id = 4;
  if (this->chunk_context_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chunk_context_id().data(), static_cast<int>(this->chunk_context_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.HeaderQueryResponse.Header.chunk_context_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->chunk_context_id(), target);
  }

  // int64 payload_size = 5;
  if (this->payload_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->payload_size(), target);
  }

  // .google.protobuf.Timestamp sent_timestamp = 6;
  if (this->has_sent_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->sent_timestamp_, deterministic, target);
  }

  // int64 sequence_number = 7;
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->sequence_number(), target);
  }

  // int64 current_chunk = 8;
  if (this->current_chunk() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->current_chunk(), target);
  }

  // .google.protobuf.Timestamp created_at = 9;
  if (this->has_created_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->created_at_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.feed.response.HeaderQueryResponse.Header)
  return target;
}

size_t HeaderQueryResponse_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.feed.response.HeaderQueryResponse.Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message_id = 1;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_id());
  }

  // string technical_message_type = 2;
  if (this->technical_message_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->technical_message_type());
  }

  // string team_set_context_id = 3;
  if (this->team_set_context_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->team_set_context_id());
  }

  // string chunk_context_id = 4;
  if (this->chunk_context_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chunk_context_id());
  }

  // .google.protobuf.Timestamp sent_timestamp = 6;
  if (this->has_sent_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sent_timestamp_);
  }

  // .google.protobuf.Timestamp created_at = 9;
  if (this->has_created_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->created_at_);
  }

  // int64 payload_size = 5;
  if (this->payload_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->payload_size());
  }

  // int64 sequence_number = 7;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence_number());
  }

  // int64 current_chunk = 8;
  if (this->current_chunk() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->current_chunk());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeaderQueryResponse_Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.feed.response.HeaderQueryResponse.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const HeaderQueryResponse_Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeaderQueryResponse_Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.feed.response.HeaderQueryResponse.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.feed.response.HeaderQueryResponse.Header)
    MergeFrom(*source);
  }
}

void HeaderQueryResponse_Header::MergeFrom(const HeaderQueryResponse_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.feed.response.HeaderQueryResponse.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message_id().size() > 0) {

    message_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
  if (from.technical_message_type().size() > 0) {

    technical_message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.technical_message_type_);
  }
  if (from.team_set_context_id().size() > 0) {

    team_set_context_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_set_context_id_);
  }
  if (from.chunk_context_id().size() > 0) {

    chunk_context_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chunk_context_id_);
  }
  if (from.has_sent_timestamp()) {
    mutable_sent_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.sent_timestamp());
  }
  if (from.has_created_at()) {
    mutable_created_at()->::google::protobuf::Timestamp::MergeFrom(from.created_at());
  }
  if (from.payload_size() != 0) {
    set_payload_size(from.payload_size());
  }
  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
  if (from.current_chunk() != 0) {
    set_current_chunk(from.current_chunk());
  }
}

void HeaderQueryResponse_Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.feed.response.HeaderQueryResponse.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeaderQueryResponse_Header::CopyFrom(const HeaderQueryResponse_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.feed.response.HeaderQueryResponse.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderQueryResponse_Header::IsInitialized() const {
  return true;
}

void HeaderQueryResponse_Header::Swap(HeaderQueryResponse_Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeaderQueryResponse_Header::InternalSwap(HeaderQueryResponse_Header* other) {
  using std::swap;
  message_id_.Swap(&other->message_id_);
  technical_message_type_.Swap(&other->technical_message_type_);
  team_set_context_id_.Swap(&other->team_set_context_id_);
  chunk_context_id_.Swap(&other->chunk_context_id_);
  swap(sent_timestamp_, other->sent_timestamp_);
  swap(created_at_, other->created_at_);
  swap(payload_size_, other->payload_size_);
  swap(sequence_number_, other->sequence_number_);
  swap(current_chunk_, other->current_chunk_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeaderQueryResponse_Header::GetMetadata() const {
  protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HeaderQueryResponse_Feed::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeaderQueryResponse_Feed::kSenderIdFieldNumber;
const int HeaderQueryResponse_Feed::kReceiverIdFieldNumber;
const int HeaderQueryResponse_Feed::kHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeaderQueryResponse_Feed::HeaderQueryResponse_Feed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsHeaderQueryResponse_Feed();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.feed.response.HeaderQueryResponse.Feed)
}
HeaderQueryResponse_Feed::HeaderQueryResponse_Feed(const HeaderQueryResponse_Feed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      headers_(from.headers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sender_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sender_id().size() > 0) {
    sender_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_id_);
  }
  receiver_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.receiver_id().size() > 0) {
    receiver_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receiver_id_);
  }
  // @@protoc_insertion_point(copy_constructor:agrirouter.feed.response.HeaderQueryResponse.Feed)
}

void HeaderQueryResponse_Feed::SharedCtor() {
  sender_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiver_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

HeaderQueryResponse_Feed::~HeaderQueryResponse_Feed() {
  // @@protoc_insertion_point(destructor:agrirouter.feed.response.HeaderQueryResponse.Feed)
  SharedDtor();
}

void HeaderQueryResponse_Feed::SharedDtor() {
  sender_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiver_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HeaderQueryResponse_Feed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeaderQueryResponse_Feed::descriptor() {
  ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeaderQueryResponse_Feed& HeaderQueryResponse_Feed::default_instance() {
  ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsHeaderQueryResponse_Feed();
  return *internal_default_instance();
}

HeaderQueryResponse_Feed* HeaderQueryResponse_Feed::New(::google::protobuf::Arena* arena) const {
  HeaderQueryResponse_Feed* n = new HeaderQueryResponse_Feed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeaderQueryResponse_Feed::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.feed.response.HeaderQueryResponse.Feed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  sender_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiver_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool HeaderQueryResponse_Feed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.feed.response.HeaderQueryResponse.Feed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sender_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sender_id().data(), static_cast<int>(this->sender_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.response.HeaderQueryResponse.Feed.sender_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string receiver_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiver_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->receiver_id().data(), static_cast<int>(this->receiver_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.response.HeaderQueryResponse.Feed.receiver_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .agrirouter.feed.response.HeaderQueryResponse.Header headers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.feed.response.HeaderQueryResponse.Feed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.feed.response.HeaderQueryResponse.Feed)
  return false;
#undef DO_
}

void HeaderQueryResponse_Feed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.feed.response.HeaderQueryResponse.Feed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender_id = 1;
  if (this->sender_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender_id().data(), static_cast<int>(this->sender_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.HeaderQueryResponse.Feed.sender_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sender_id(), output);
  }

  // string receiver_id = 2;
  if (this->receiver_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->receiver_id().data(), static_cast<int>(this->receiver_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.HeaderQueryResponse.Feed.receiver_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->receiver_id(), output);
  }

  // repeated .agrirouter.feed.response.HeaderQueryResponse.Header headers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->headers(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:agrirouter.feed.response.HeaderQueryResponse.Feed)
}

::google::protobuf::uint8* HeaderQueryResponse_Feed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.feed.response.HeaderQueryResponse.Feed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender_id = 1;
  if (this->sender_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender_id().data(), static_cast<int>(this->sender_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.HeaderQueryResponse.Feed.sender_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sender_id(), target);
  }

  // string receiver_id = 2;
  if (this->receiver_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->receiver_id().data(), static_cast<int>(this->receiver_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.HeaderQueryResponse.Feed.receiver_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->receiver_id(), target);
  }

  // repeated .agrirouter.feed.response.HeaderQueryResponse.Header headers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->headers(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.feed.response.HeaderQueryResponse.Feed)
  return target;
}

size_t HeaderQueryResponse_Feed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.feed.response.HeaderQueryResponse.Feed)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .agrirouter.feed.response.HeaderQueryResponse.Header headers = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->headers(static_cast<int>(i)));
    }
  }

  // string sender_id = 1;
  if (this->sender_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender_id());
  }

  // string receiver_id = 2;
  if (this->receiver_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->receiver_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeaderQueryResponse_Feed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.feed.response.HeaderQueryResponse.Feed)
  GOOGLE_DCHECK_NE(&from, this);
  const HeaderQueryResponse_Feed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeaderQueryResponse_Feed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.feed.response.HeaderQueryResponse.Feed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.feed.response.HeaderQueryResponse.Feed)
    MergeFrom(*source);
  }
}

void HeaderQueryResponse_Feed::MergeFrom(const HeaderQueryResponse_Feed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.feed.response.HeaderQueryResponse.Feed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  if (from.sender_id().size() > 0) {

    sender_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_id_);
  }
  if (from.receiver_id().size() > 0) {

    receiver_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receiver_id_);
  }
}

void HeaderQueryResponse_Feed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.feed.response.HeaderQueryResponse.Feed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeaderQueryResponse_Feed::CopyFrom(const HeaderQueryResponse_Feed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.feed.response.HeaderQueryResponse.Feed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderQueryResponse_Feed::IsInitialized() const {
  return true;
}

void HeaderQueryResponse_Feed::Swap(HeaderQueryResponse_Feed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeaderQueryResponse_Feed::InternalSwap(HeaderQueryResponse_Feed* other) {
  using std::swap;
  headers_.InternalSwap(&other->headers_);
  sender_id_.Swap(&other->sender_id_);
  receiver_id_.Swap(&other->receiver_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeaderQueryResponse_Feed::GetMetadata() const {
  protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HeaderQueryResponse::InitAsDefaultInstance() {
  ::agrirouter::feed::response::_HeaderQueryResponse_default_instance_._instance.get_mutable()->querymetrics_ = const_cast< ::agrirouter::feed::response::QueryMetrics*>(
      ::agrirouter::feed::response::QueryMetrics::internal_default_instance());
  ::agrirouter::feed::response::_HeaderQueryResponse_default_instance_._instance.get_mutable()->page_ = const_cast< ::agrirouter::feed::response::Page*>(
      ::agrirouter::feed::response::Page::internal_default_instance());
}
void HeaderQueryResponse::clear_chunk_contexts() {
  chunk_contexts_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeaderQueryResponse::kQueryMetricsFieldNumber;
const int HeaderQueryResponse::kPageFieldNumber;
const int HeaderQueryResponse::kChunkContextsFieldNumber;
const int HeaderQueryResponse::kFeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeaderQueryResponse::HeaderQueryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsHeaderQueryResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.feed.response.HeaderQueryResponse)
}
HeaderQueryResponse::HeaderQueryResponse(const HeaderQueryResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      chunk_contexts_(from.chunk_contexts_),
      feed_(from.feed_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_querymetrics()) {
    querymetrics_ = new ::agrirouter::feed::response::QueryMetrics(*from.querymetrics_);
  } else {
    querymetrics_ = NULL;
  }
  if (from.has_page()) {
    page_ = new ::agrirouter::feed::response::Page(*from.page_);
  } else {
    page_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:agrirouter.feed.response.HeaderQueryResponse)
}

void HeaderQueryResponse::SharedCtor() {
  ::memset(&querymetrics_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_) -
      reinterpret_cast<char*>(&querymetrics_)) + sizeof(page_));
  _cached_size_ = 0;
}

HeaderQueryResponse::~HeaderQueryResponse() {
  // @@protoc_insertion_point(destructor:agrirouter.feed.response.HeaderQueryResponse)
  SharedDtor();
}

void HeaderQueryResponse::SharedDtor() {
  if (this != internal_default_instance()) delete querymetrics_;
  if (this != internal_default_instance()) delete page_;
}

void HeaderQueryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeaderQueryResponse::descriptor() {
  ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeaderQueryResponse& HeaderQueryResponse::default_instance() {
  ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsHeaderQueryResponse();
  return *internal_default_instance();
}

HeaderQueryResponse* HeaderQueryResponse::New(::google::protobuf::Arena* arena) const {
  HeaderQueryResponse* n = new HeaderQueryResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeaderQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.feed.response.HeaderQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunk_contexts_.Clear();
  feed_.Clear();
  if (GetArenaNoVirtual() == NULL && querymetrics_ != NULL) {
    delete querymetrics_;
  }
  querymetrics_ = NULL;
  if (GetArenaNoVirtual() == NULL && page_ != NULL) {
    delete page_;
  }
  page_ = NULL;
  _internal_metadata_.Clear();
}

bool HeaderQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.feed.response.HeaderQueryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_querymetrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .agrirouter.feed.response.Page page = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_page()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .agrirouter.commons.ChunkComponent chunk_contexts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_chunk_contexts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .agrirouter.feed.response.HeaderQueryResponse.Feed feed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_feed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.feed.response.HeaderQueryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.feed.response.HeaderQueryResponse)
  return false;
#undef DO_
}

void HeaderQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.feed.response.HeaderQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
  if (this->has_querymetrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->querymetrics_, output);
  }

  // .agrirouter.feed.response.Page page = 2;
  if (this->has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->page_, output);
  }

  // repeated .agrirouter.commons.ChunkComponent chunk_contexts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chunk_contexts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chunk_contexts(static_cast<int>(i)), output);
  }

  // repeated .agrirouter.feed.response.HeaderQueryResponse.Feed feed = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->feed_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->feed(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:agrirouter.feed.response.HeaderQueryResponse)
}

::google::protobuf::uint8* HeaderQueryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.feed.response.HeaderQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
  if (this->has_querymetrics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->querymetrics_, deterministic, target);
  }

  // .agrirouter.feed.response.Page page = 2;
  if (this->has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->page_, deterministic, target);
  }

  // repeated .agrirouter.commons.ChunkComponent chunk_contexts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chunk_contexts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->chunk_contexts(static_cast<int>(i)), deterministic, target);
  }

  // repeated .agrirouter.feed.response.HeaderQueryResponse.Feed feed = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->feed_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->feed(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.feed.response.HeaderQueryResponse)
  return target;
}

size_t HeaderQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.feed.response.HeaderQueryResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .agrirouter.commons.ChunkComponent chunk_contexts = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->chunk_contexts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chunk_contexts(static_cast<int>(i)));
    }
  }

  // repeated .agrirouter.feed.response.HeaderQueryResponse.Feed feed = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->feed_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->feed(static_cast<int>(i)));
    }
  }

  // .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
  if (this->has_querymetrics()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->querymetrics_);
  }

  // .agrirouter.feed.response.Page page = 2;
  if (this->has_page()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->page_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeaderQueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.feed.response.HeaderQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HeaderQueryResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeaderQueryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.feed.response.HeaderQueryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.feed.response.HeaderQueryResponse)
    MergeFrom(*source);
  }
}

void HeaderQueryResponse::MergeFrom(const HeaderQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.feed.response.HeaderQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunk_contexts_.MergeFrom(from.chunk_contexts_);
  feed_.MergeFrom(from.feed_);
  if (from.has_querymetrics()) {
    mutable_querymetrics()->::agrirouter::feed::response::QueryMetrics::MergeFrom(from.querymetrics());
  }
  if (from.has_page()) {
    mutable_page()->::agrirouter::feed::response::Page::MergeFrom(from.page());
  }
}

void HeaderQueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.feed.response.HeaderQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeaderQueryResponse::CopyFrom(const HeaderQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.feed.response.HeaderQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderQueryResponse::IsInitialized() const {
  return true;
}

void HeaderQueryResponse::Swap(HeaderQueryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeaderQueryResponse::InternalSwap(HeaderQueryResponse* other) {
  using std::swap;
  chunk_contexts_.InternalSwap(&other->chunk_contexts_);
  feed_.InternalSwap(&other->feed_);
  swap(querymetrics_, other->querymetrics_);
  swap(page_, other->page_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeaderQueryResponse::GetMetadata() const {
  protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MessageQueryResponse_Header::InitAsDefaultInstance() {
  ::agrirouter::feed::response::_MessageQueryResponse_Header_default_instance_._instance.get_mutable()->chunk_context_ = const_cast< ::agrirouter::commons::ChunkComponent*>(
      ::agrirouter::commons::ChunkComponent::internal_default_instance());
  ::agrirouter::feed::response::_MessageQueryResponse_Header_default_instance_._instance.get_mutable()->sent_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::agrirouter::feed::response::_MessageQueryResponse_Header_default_instance_._instance.get_mutable()->created_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void MessageQueryResponse_Header::clear_chunk_context() {
  if (GetArenaNoVirtual() == NULL && chunk_context_ != NULL) {
    delete chunk_context_;
  }
  chunk_context_ = NULL;
}
void MessageQueryResponse_Header::clear_sent_timestamp() {
  if (GetArenaNoVirtual() == NULL && sent_timestamp_ != NULL) {
    delete sent_timestamp_;
  }
  sent_timestamp_ = NULL;
}
void MessageQueryResponse_Header::clear_created_at() {
  if (GetArenaNoVirtual() == NULL && created_at_ != NULL) {
    delete created_at_;
  }
  created_at_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageQueryResponse_Header::kReceiverIdFieldNumber;
const int MessageQueryResponse_Header::kTechnicalMessageTypeFieldNumber;
const int MessageQueryResponse_Header::kTeamSetContextIdFieldNumber;
const int MessageQueryResponse_Header::kChunkContextFieldNumber;
const int MessageQueryResponse_Header::kPayloadSizeFieldNumber;
const int MessageQueryResponse_Header::kSentTimestampFieldNumber;
const int MessageQueryResponse_Header::kSequenceNumberFieldNumber;
const int MessageQueryResponse_Header::kSenderIdFieldNumber;
const int MessageQueryResponse_Header::kCreatedAtFieldNumber;
const int MessageQueryResponse_Header::kMessageIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageQueryResponse_Header::MessageQueryResponse_Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsMessageQueryResponse_Header();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.feed.response.MessageQueryResponse.Header)
}
MessageQueryResponse_Header::MessageQueryResponse_Header(const MessageQueryResponse_Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  receiver_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.receiver_id().size() > 0) {
    receiver_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receiver_id_);
  }
  technical_message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.technical_message_type().size() > 0) {
    technical_message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.technical_message_type_);
  }
  team_set_context_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.team_set_context_id().size() > 0) {
    team_set_context_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_set_context_id_);
  }
  sender_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sender_id().size() > 0) {
    sender_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_id_);
  }
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message_id().size() > 0) {
    message_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
  if (from.has_chunk_context()) {
    chunk_context_ = new ::agrirouter::commons::ChunkComponent(*from.chunk_context_);
  } else {
    chunk_context_ = NULL;
  }
  if (from.has_sent_timestamp()) {
    sent_timestamp_ = new ::google::protobuf::Timestamp(*from.sent_timestamp_);
  } else {
    sent_timestamp_ = NULL;
  }
  if (from.has_created_at()) {
    created_at_ = new ::google::protobuf::Timestamp(*from.created_at_);
  } else {
    created_at_ = NULL;
  }
  ::memcpy(&payload_size_, &from.payload_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&payload_size_)) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:agrirouter.feed.response.MessageQueryResponse.Header)
}

void MessageQueryResponse_Header::SharedCtor() {
  receiver_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  technical_message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_set_context_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chunk_context_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&chunk_context_)) + sizeof(sequence_number_));
  _cached_size_ = 0;
}

MessageQueryResponse_Header::~MessageQueryResponse_Header() {
  // @@protoc_insertion_point(destructor:agrirouter.feed.response.MessageQueryResponse.Header)
  SharedDtor();
}

void MessageQueryResponse_Header::SharedDtor() {
  receiver_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  technical_message_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_set_context_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete chunk_context_;
  if (this != internal_default_instance()) delete sent_timestamp_;
  if (this != internal_default_instance()) delete created_at_;
}

void MessageQueryResponse_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageQueryResponse_Header::descriptor() {
  ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MessageQueryResponse_Header& MessageQueryResponse_Header::default_instance() {
  ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsMessageQueryResponse_Header();
  return *internal_default_instance();
}

MessageQueryResponse_Header* MessageQueryResponse_Header::New(::google::protobuf::Arena* arena) const {
  MessageQueryResponse_Header* n = new MessageQueryResponse_Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageQueryResponse_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.feed.response.MessageQueryResponse.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  receiver_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  technical_message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_set_context_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && chunk_context_ != NULL) {
    delete chunk_context_;
  }
  chunk_context_ = NULL;
  if (GetArenaNoVirtual() == NULL && sent_timestamp_ != NULL) {
    delete sent_timestamp_;
  }
  sent_timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && created_at_ != NULL) {
    delete created_at_;
  }
  created_at_ = NULL;
  ::memset(&payload_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&payload_size_)) + sizeof(sequence_number_));
  _internal_metadata_.Clear();
}

bool MessageQueryResponse_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.feed.response.MessageQueryResponse.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string receiver_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiver_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->receiver_id().data(), static_cast<int>(this->receiver_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.response.MessageQueryResponse.Header.receiver_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string technical_message_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_technical_message_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->technical_message_type().data(), static_cast<int>(this->technical_message_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.response.MessageQueryResponse.Header.technical_message_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string team_set_context_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_set_context_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->team_set_context_id().data(), static_cast<int>(this->team_set_context_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.response.MessageQueryResponse.Header.team_set_context_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .agrirouter.commons.ChunkComponent chunk_context = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_chunk_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 payload_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &payload_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp sent_timestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sent_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 sequence_number = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sender_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sender_id().data(), static_cast<int>(this->sender_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.response.MessageQueryResponse.Header.sender_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp created_at = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_created_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message_id().data(), static_cast<int>(this->message_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.response.MessageQueryResponse.Header.message_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.feed.response.MessageQueryResponse.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.feed.response.MessageQueryResponse.Header)
  return false;
#undef DO_
}

void MessageQueryResponse_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.feed.response.MessageQueryResponse.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string receiver_id = 1;
  if (this->receiver_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->receiver_id().data(), static_cast<int>(this->receiver_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.MessageQueryResponse.Header.receiver_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->receiver_id(), output);
  }

  // string technical_message_type = 2;
  if (this->technical_message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->technical_message_type().data(), static_cast<int>(this->technical_message_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.MessageQueryResponse.Header.technical_message_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->technical_message_type(), output);
  }

  // string team_set_context_id = 3;
  if (this->team_set_context_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team_set_context_id().data(), static_cast<int>(this->team_set_context_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.MessageQueryResponse.Header.team_set_context_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_set_context_id(), output);
  }

  // .agrirouter.commons.ChunkComponent chunk_context = 4;
  if (this->has_chunk_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->chunk_context_, output);
  }

  // int64 payload_size = 5;
  if (this->payload_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->payload_size(), output);
  }

  // .google.protobuf.Timestamp sent_timestamp = 6;
  if (this->has_sent_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->sent_timestamp_, output);
  }

  // int64 sequence_number = 7;
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->sequence_number(), output);
  }

  // string sender_id = 8;
  if (this->sender_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender_id().data(), static_cast<int>(this->sender_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.MessageQueryResponse.Header.sender_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->sender_id(), output);
  }

  // .google.protobuf.Timestamp created_at = 9;
  if (this->has_created_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->created_at_, output);
  }

  // string message_id = 10;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), static_cast<int>(this->message_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.MessageQueryResponse.Header.message_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->message_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:agrirouter.feed.response.MessageQueryResponse.Header)
}

::google::protobuf::uint8* MessageQueryResponse_Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.feed.response.MessageQueryResponse.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string receiver_id = 1;
  if (this->receiver_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->receiver_id().data(), static_cast<int>(this->receiver_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.MessageQueryResponse.Header.receiver_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->receiver_id(), target);
  }

  // string technical_message_type = 2;
  if (this->technical_message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->technical_message_type().data(), static_cast<int>(this->technical_message_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.MessageQueryResponse.Header.technical_message_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->technical_message_type(), target);
  }

  // string team_set_context_id = 3;
  if (this->team_set_context_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team_set_context_id().data(), static_cast<int>(this->team_set_context_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.MessageQueryResponse.Header.team_set_context_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_set_context_id(), target);
  }

  // .agrirouter.commons.ChunkComponent chunk_context = 4;
  if (this->has_chunk_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->chunk_context_, deterministic, target);
  }

  // int64 payload_size = 5;
  if (this->payload_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->payload_size(), target);
  }

  // .google.protobuf.Timestamp sent_timestamp = 6;
  if (this->has_sent_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->sent_timestamp_, deterministic, target);
  }

  // int64 sequence_number = 7;
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->sequence_number(), target);
  }

  // string sender_id = 8;
  if (this->sender_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender_id().data(), static_cast<int>(this->sender_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.MessageQueryResponse.Header.sender_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sender_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 9;
  if (this->has_created_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->created_at_, deterministic, target);
  }

  // string message_id = 10;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), static_cast<int>(this->message_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.MessageQueryResponse.Header.message_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->message_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.feed.response.MessageQueryResponse.Header)
  return target;
}

size_t MessageQueryResponse_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.feed.response.MessageQueryResponse.Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string receiver_id = 1;
  if (this->receiver_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->receiver_id());
  }

  // string technical_message_type = 2;
  if (this->technical_message_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->technical_message_type());
  }

  // string team_set_context_id = 3;
  if (this->team_set_context_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->team_set_context_id());
  }

  // string sender_id = 8;
  if (this->sender_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender_id());
  }

  // string message_id = 10;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_id());
  }

  // .agrirouter.commons.ChunkComponent chunk_context = 4;
  if (this->has_chunk_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->chunk_context_);
  }

  // .google.protobuf.Timestamp sent_timestamp = 6;
  if (this->has_sent_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sent_timestamp_);
  }

  // .google.protobuf.Timestamp created_at = 9;
  if (this->has_created_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->created_at_);
  }

  // int64 payload_size = 5;
  if (this->payload_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->payload_size());
  }

  // int64 sequence_number = 7;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageQueryResponse_Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.feed.response.MessageQueryResponse.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageQueryResponse_Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageQueryResponse_Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.feed.response.MessageQueryResponse.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.feed.response.MessageQueryResponse.Header)
    MergeFrom(*source);
  }
}

void MessageQueryResponse_Header::MergeFrom(const MessageQueryResponse_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.feed.response.MessageQueryResponse.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.receiver_id().size() > 0) {

    receiver_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receiver_id_);
  }
  if (from.technical_message_type().size() > 0) {

    technical_message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.technical_message_type_);
  }
  if (from.team_set_context_id().size() > 0) {

    team_set_context_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_set_context_id_);
  }
  if (from.sender_id().size() > 0) {

    sender_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_id_);
  }
  if (from.message_id().size() > 0) {

    message_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
  if (from.has_chunk_context()) {
    mutable_chunk_context()->::agrirouter::commons::ChunkComponent::MergeFrom(from.chunk_context());
  }
  if (from.has_sent_timestamp()) {
    mutable_sent_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.sent_timestamp());
  }
  if (from.has_created_at()) {
    mutable_created_at()->::google::protobuf::Timestamp::MergeFrom(from.created_at());
  }
  if (from.payload_size() != 0) {
    set_payload_size(from.payload_size());
  }
  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
}

void MessageQueryResponse_Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.feed.response.MessageQueryResponse.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageQueryResponse_Header::CopyFrom(const MessageQueryResponse_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.feed.response.MessageQueryResponse.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageQueryResponse_Header::IsInitialized() const {
  return true;
}

void MessageQueryResponse_Header::Swap(MessageQueryResponse_Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageQueryResponse_Header::InternalSwap(MessageQueryResponse_Header* other) {
  using std::swap;
  receiver_id_.Swap(&other->receiver_id_);
  technical_message_type_.Swap(&other->technical_message_type_);
  team_set_context_id_.Swap(&other->team_set_context_id_);
  sender_id_.Swap(&other->sender_id_);
  message_id_.Swap(&other->message_id_);
  swap(chunk_context_, other->chunk_context_);
  swap(sent_timestamp_, other->sent_timestamp_);
  swap(created_at_, other->created_at_);
  swap(payload_size_, other->payload_size_);
  swap(sequence_number_, other->sequence_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageQueryResponse_Header::GetMetadata() const {
  protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MessageQueryResponse_FeedMessage::InitAsDefaultInstance() {
  ::agrirouter::feed::response::_MessageQueryResponse_FeedMessage_default_instance_._instance.get_mutable()->header_ = const_cast< ::agrirouter::feed::response::MessageQueryResponse_Header*>(
      ::agrirouter::feed::response::MessageQueryResponse_Header::internal_default_instance());
  ::agrirouter::feed::response::_MessageQueryResponse_FeedMessage_default_instance_._instance.get_mutable()->content_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
void MessageQueryResponse_FeedMessage::clear_content() {
  if (GetArenaNoVirtual() == NULL && content_ != NULL) {
    delete content_;
  }
  content_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageQueryResponse_FeedMessage::kHeaderFieldNumber;
const int MessageQueryResponse_FeedMessage::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageQueryResponse_FeedMessage::MessageQueryResponse_FeedMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsMessageQueryResponse_FeedMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
}
MessageQueryResponse_FeedMessage::MessageQueryResponse_FeedMessage(const MessageQueryResponse_FeedMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::agrirouter::feed::response::MessageQueryResponse_Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_content()) {
    content_ = new ::google::protobuf::Any(*from.content_);
  } else {
    content_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
}

void MessageQueryResponse_FeedMessage::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&content_) -
      reinterpret_cast<char*>(&header_)) + sizeof(content_));
  _cached_size_ = 0;
}

MessageQueryResponse_FeedMessage::~MessageQueryResponse_FeedMessage() {
  // @@protoc_insertion_point(destructor:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
  SharedDtor();
}

void MessageQueryResponse_FeedMessage::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete content_;
}

void MessageQueryResponse_FeedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageQueryResponse_FeedMessage::descriptor() {
  ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MessageQueryResponse_FeedMessage& MessageQueryResponse_FeedMessage::default_instance() {
  ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsMessageQueryResponse_FeedMessage();
  return *internal_default_instance();
}

MessageQueryResponse_FeedMessage* MessageQueryResponse_FeedMessage::New(::google::protobuf::Arena* arena) const {
  MessageQueryResponse_FeedMessage* n = new MessageQueryResponse_FeedMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageQueryResponse_FeedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && content_ != NULL) {
    delete content_;
  }
  content_ = NULL;
  _internal_metadata_.Clear();
}

bool MessageQueryResponse_FeedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .agrirouter.feed.response.MessageQueryResponse.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
  return false;
#undef DO_
}

void MessageQueryResponse_FeedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agrirouter.feed.response.MessageQueryResponse.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .google.protobuf.Any content = 2;
  if (this->has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->content_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
}

::google::protobuf::uint8* MessageQueryResponse_FeedMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agrirouter.feed.response.MessageQueryResponse.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .google.protobuf.Any content = 2;
  if (this->has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->content_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
  return target;
}

size_t MessageQueryResponse_FeedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .agrirouter.feed.response.MessageQueryResponse.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .google.protobuf.Any content = 2;
  if (this->has_content()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->content_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageQueryResponse_FeedMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageQueryResponse_FeedMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageQueryResponse_FeedMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
    MergeFrom(*source);
  }
}

void MessageQueryResponse_FeedMessage::MergeFrom(const MessageQueryResponse_FeedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::agrirouter::feed::response::MessageQueryResponse_Header::MergeFrom(from.header());
  }
  if (from.has_content()) {
    mutable_content()->::google::protobuf::Any::MergeFrom(from.content());
  }
}

void MessageQueryResponse_FeedMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageQueryResponse_FeedMessage::CopyFrom(const MessageQueryResponse_FeedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageQueryResponse_FeedMessage::IsInitialized() const {
  return true;
}

void MessageQueryResponse_FeedMessage::Swap(MessageQueryResponse_FeedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageQueryResponse_FeedMessage::InternalSwap(MessageQueryResponse_FeedMessage* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(content_, other->content_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageQueryResponse_FeedMessage::GetMetadata() const {
  protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MessageQueryResponse::InitAsDefaultInstance() {
  ::agrirouter::feed::response::_MessageQueryResponse_default_instance_._instance.get_mutable()->querymetrics_ = const_cast< ::agrirouter::feed::response::QueryMetrics*>(
      ::agrirouter::feed::response::QueryMetrics::internal_default_instance());
  ::agrirouter::feed::response::_MessageQueryResponse_default_instance_._instance.get_mutable()->page_ = const_cast< ::agrirouter::feed::response::Page*>(
      ::agrirouter::feed::response::Page::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageQueryResponse::kQueryMetricsFieldNumber;
const int MessageQueryResponse::kPageFieldNumber;
const int MessageQueryResponse::kMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageQueryResponse::MessageQueryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsMessageQueryResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.feed.response.MessageQueryResponse)
}
MessageQueryResponse::MessageQueryResponse(const MessageQueryResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      messages_(from.messages_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_querymetrics()) {
    querymetrics_ = new ::agrirouter::feed::response::QueryMetrics(*from.querymetrics_);
  } else {
    querymetrics_ = NULL;
  }
  if (from.has_page()) {
    page_ = new ::agrirouter::feed::response::Page(*from.page_);
  } else {
    page_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:agrirouter.feed.response.MessageQueryResponse)
}

void MessageQueryResponse::SharedCtor() {
  ::memset(&querymetrics_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_) -
      reinterpret_cast<char*>(&querymetrics_)) + sizeof(page_));
  _cached_size_ = 0;
}

MessageQueryResponse::~MessageQueryResponse() {
  // @@protoc_insertion_point(destructor:agrirouter.feed.response.MessageQueryResponse)
  SharedDtor();
}

void MessageQueryResponse::SharedDtor() {
  if (this != internal_default_instance()) delete querymetrics_;
  if (this != internal_default_instance()) delete page_;
}

void MessageQueryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageQueryResponse::descriptor() {
  ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MessageQueryResponse& MessageQueryResponse::default_instance() {
  ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsMessageQueryResponse();
  return *internal_default_instance();
}

MessageQueryResponse* MessageQueryResponse::New(::google::protobuf::Arena* arena) const {
  MessageQueryResponse* n = new MessageQueryResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.feed.response.MessageQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  if (GetArenaNoVirtual() == NULL && querymetrics_ != NULL) {
    delete querymetrics_;
  }
  querymetrics_ = NULL;
  if (GetArenaNoVirtual() == NULL && page_ != NULL) {
    delete page_;
  }
  page_ = NULL;
  _internal_metadata_.Clear();
}

bool MessageQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.feed.response.MessageQueryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_querymetrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .agrirouter.feed.response.Page page = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_page()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .agrirouter.feed.response.MessageQueryResponse.FeedMessage messages = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.feed.response.MessageQueryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.feed.response.MessageQueryResponse)
  return false;
#undef DO_
}

void MessageQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.feed.response.MessageQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
  if (this->has_querymetrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->querymetrics_, output);
  }

  // .agrirouter.feed.response.Page page = 2;
  if (this->has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->page_, output);
  }

  // repeated .agrirouter.feed.response.MessageQueryResponse.FeedMessage messages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->messages(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:agrirouter.feed.response.MessageQueryResponse)
}

::google::protobuf::uint8* MessageQueryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.feed.response.MessageQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
  if (this->has_querymetrics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->querymetrics_, deterministic, target);
  }

  // .agrirouter.feed.response.Page page = 2;
  if (this->has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->page_, deterministic, target);
  }

  // repeated .agrirouter.feed.response.MessageQueryResponse.FeedMessage messages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->messages(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.feed.response.MessageQueryResponse)
  return target;
}

size_t MessageQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.feed.response.MessageQueryResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .agrirouter.feed.response.MessageQueryResponse.FeedMessage messages = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->messages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->messages(static_cast<int>(i)));
    }
  }

  // .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
  if (this->has_querymetrics()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->querymetrics_);
  }

  // .agrirouter.feed.response.Page page = 2;
  if (this->has_page()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->page_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageQueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.feed.response.MessageQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageQueryResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageQueryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.feed.response.MessageQueryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.feed.response.MessageQueryResponse)
    MergeFrom(*source);
  }
}

void MessageQueryResponse::MergeFrom(const MessageQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.feed.response.MessageQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  if (from.has_querymetrics()) {
    mutable_querymetrics()->::agrirouter::feed::response::QueryMetrics::MergeFrom(from.querymetrics());
  }
  if (from.has_page()) {
    mutable_page()->::agrirouter::feed::response::Page::MergeFrom(from.page());
  }
}

void MessageQueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.feed.response.MessageQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageQueryResponse::CopyFrom(const MessageQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.feed.response.MessageQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageQueryResponse::IsInitialized() const {
  return true;
}

void MessageQueryResponse::Swap(MessageQueryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageQueryResponse::InternalSwap(MessageQueryResponse* other) {
  using std::swap;
  messages_.InternalSwap(&other->messages_);
  swap(querymetrics_, other->querymetrics_);
  swap(page_, other->page_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageQueryResponse::GetMetadata() const {
  protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FailedMessageQueryResponse_Header::InitAsDefaultInstance() {
  ::agrirouter::feed::response::_FailedMessageQueryResponse_Header_default_instance_._instance.get_mutable()->sent_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void FailedMessageQueryResponse_Header::clear_sent_timestamp() {
  if (GetArenaNoVirtual() == NULL && sent_timestamp_ != NULL) {
    delete sent_timestamp_;
  }
  sent_timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FailedMessageQueryResponse_Header::kTechnicalMessageTypeFieldNumber;
const int FailedMessageQueryResponse_Header::kTeamSetContextIdFieldNumber;
const int FailedMessageQueryResponse_Header::kPayloadSizeFieldNumber;
const int FailedMessageQueryResponse_Header::kSentTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FailedMessageQueryResponse_Header::FailedMessageQueryResponse_Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsFailedMessageQueryResponse_Header();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.feed.response.FailedMessageQueryResponse.Header)
}
FailedMessageQueryResponse_Header::FailedMessageQueryResponse_Header(const FailedMessageQueryResponse_Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  technical_message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.technical_message_type().size() > 0) {
    technical_message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.technical_message_type_);
  }
  team_set_context_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.team_set_context_id().size() > 0) {
    team_set_context_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_set_context_id_);
  }
  if (from.has_sent_timestamp()) {
    sent_timestamp_ = new ::google::protobuf::Timestamp(*from.sent_timestamp_);
  } else {
    sent_timestamp_ = NULL;
  }
  payload_size_ = from.payload_size_;
  // @@protoc_insertion_point(copy_constructor:agrirouter.feed.response.FailedMessageQueryResponse.Header)
}

void FailedMessageQueryResponse_Header::SharedCtor() {
  technical_message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_set_context_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sent_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&payload_size_) -
      reinterpret_cast<char*>(&sent_timestamp_)) + sizeof(payload_size_));
  _cached_size_ = 0;
}

FailedMessageQueryResponse_Header::~FailedMessageQueryResponse_Header() {
  // @@protoc_insertion_point(destructor:agrirouter.feed.response.FailedMessageQueryResponse.Header)
  SharedDtor();
}

void FailedMessageQueryResponse_Header::SharedDtor() {
  technical_message_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_set_context_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sent_timestamp_;
}

void FailedMessageQueryResponse_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FailedMessageQueryResponse_Header::descriptor() {
  ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FailedMessageQueryResponse_Header& FailedMessageQueryResponse_Header::default_instance() {
  ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsFailedMessageQueryResponse_Header();
  return *internal_default_instance();
}

FailedMessageQueryResponse_Header* FailedMessageQueryResponse_Header::New(::google::protobuf::Arena* arena) const {
  FailedMessageQueryResponse_Header* n = new FailedMessageQueryResponse_Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FailedMessageQueryResponse_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.feed.response.FailedMessageQueryResponse.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  technical_message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_set_context_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sent_timestamp_ != NULL) {
    delete sent_timestamp_;
  }
  sent_timestamp_ = NULL;
  payload_size_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool FailedMessageQueryResponse_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.feed.response.FailedMessageQueryResponse.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string technical_message_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_technical_message_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->technical_message_type().data(), static_cast<int>(this->technical_message_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.response.FailedMessageQueryResponse.Header.technical_message_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string team_set_context_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_set_context_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->team_set_context_id().data(), static_cast<int>(this->team_set_context_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agrirouter.feed.response.FailedMessageQueryResponse.Header.team_set_context_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 payload_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &payload_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp sent_timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sent_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.feed.response.FailedMessageQueryResponse.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.feed.response.FailedMessageQueryResponse.Header)
  return false;
#undef DO_
}

void FailedMessageQueryResponse_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.feed.response.FailedMessageQueryResponse.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string technical_message_type = 1;
  if (this->technical_message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->technical_message_type().data(), static_cast<int>(this->technical_message_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.FailedMessageQueryResponse.Header.technical_message_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->technical_message_type(), output);
  }

  // string team_set_context_id = 2;
  if (this->team_set_context_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team_set_context_id().data(), static_cast<int>(this->team_set_context_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.FailedMessageQueryResponse.Header.team_set_context_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->team_set_context_id(), output);
  }

  // int64 payload_size = 3;
  if (this->payload_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->payload_size(), output);
  }

  // .google.protobuf.Timestamp sent_timestamp = 4;
  if (this->has_sent_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->sent_timestamp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:agrirouter.feed.response.FailedMessageQueryResponse.Header)
}

::google::protobuf::uint8* FailedMessageQueryResponse_Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.feed.response.FailedMessageQueryResponse.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string technical_message_type = 1;
  if (this->technical_message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->technical_message_type().data(), static_cast<int>(this->technical_message_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.FailedMessageQueryResponse.Header.technical_message_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->technical_message_type(), target);
  }

  // string team_set_context_id = 2;
  if (this->team_set_context_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team_set_context_id().data(), static_cast<int>(this->team_set_context_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agrirouter.feed.response.FailedMessageQueryResponse.Header.team_set_context_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->team_set_context_id(), target);
  }

  // int64 payload_size = 3;
  if (this->payload_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->payload_size(), target);
  }

  // .google.protobuf.Timestamp sent_timestamp = 4;
  if (this->has_sent_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->sent_timestamp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.feed.response.FailedMessageQueryResponse.Header)
  return target;
}

size_t FailedMessageQueryResponse_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.feed.response.FailedMessageQueryResponse.Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string technical_message_type = 1;
  if (this->technical_message_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->technical_message_type());
  }

  // string team_set_context_id = 2;
  if (this->team_set_context_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->team_set_context_id());
  }

  // .google.protobuf.Timestamp sent_timestamp = 4;
  if (this->has_sent_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sent_timestamp_);
  }

  // int64 payload_size = 3;
  if (this->payload_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->payload_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FailedMessageQueryResponse_Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.feed.response.FailedMessageQueryResponse.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const FailedMessageQueryResponse_Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FailedMessageQueryResponse_Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.feed.response.FailedMessageQueryResponse.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.feed.response.FailedMessageQueryResponse.Header)
    MergeFrom(*source);
  }
}

void FailedMessageQueryResponse_Header::MergeFrom(const FailedMessageQueryResponse_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.feed.response.FailedMessageQueryResponse.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.technical_message_type().size() > 0) {

    technical_message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.technical_message_type_);
  }
  if (from.team_set_context_id().size() > 0) {

    team_set_context_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_set_context_id_);
  }
  if (from.has_sent_timestamp()) {
    mutable_sent_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.sent_timestamp());
  }
  if (from.payload_size() != 0) {
    set_payload_size(from.payload_size());
  }
}

void FailedMessageQueryResponse_Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.feed.response.FailedMessageQueryResponse.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FailedMessageQueryResponse_Header::CopyFrom(const FailedMessageQueryResponse_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.feed.response.FailedMessageQueryResponse.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FailedMessageQueryResponse_Header::IsInitialized() const {
  return true;
}

void FailedMessageQueryResponse_Header::Swap(FailedMessageQueryResponse_Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FailedMessageQueryResponse_Header::InternalSwap(FailedMessageQueryResponse_Header* other) {
  using std::swap;
  technical_message_type_.Swap(&other->technical_message_type_);
  team_set_context_id_.Swap(&other->team_set_context_id_);
  swap(sent_timestamp_, other->sent_timestamp_);
  swap(payload_size_, other->payload_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FailedMessageQueryResponse_Header::GetMetadata() const {
  protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FailedMessageQueryResponse::InitAsDefaultInstance() {
  ::agrirouter::feed::response::_FailedMessageQueryResponse_default_instance_._instance.get_mutable()->querymetrics_ = const_cast< ::agrirouter::feed::response::QueryMetrics*>(
      ::agrirouter::feed::response::QueryMetrics::internal_default_instance());
  ::agrirouter::feed::response::_FailedMessageQueryResponse_default_instance_._instance.get_mutable()->page_ = const_cast< ::agrirouter::feed::response::Page*>(
      ::agrirouter::feed::response::Page::internal_default_instance());
  ::agrirouter::feed::response::_FailedMessageQueryResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::agrirouter::feed::response::FailedMessageQueryResponse_Header*>(
      ::agrirouter::feed::response::FailedMessageQueryResponse_Header::internal_default_instance());
}
void FailedMessageQueryResponse::clear_reasons() {
  reasons_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FailedMessageQueryResponse::kQueryMetricsFieldNumber;
const int FailedMessageQueryResponse::kPageFieldNumber;
const int FailedMessageQueryResponse::kHeaderFieldNumber;
const int FailedMessageQueryResponse::kReasonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FailedMessageQueryResponse::FailedMessageQueryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsFailedMessageQueryResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:agrirouter.feed.response.FailedMessageQueryResponse)
}
FailedMessageQueryResponse::FailedMessageQueryResponse(const FailedMessageQueryResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      reasons_(from.reasons_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_querymetrics()) {
    querymetrics_ = new ::agrirouter::feed::response::QueryMetrics(*from.querymetrics_);
  } else {
    querymetrics_ = NULL;
  }
  if (from.has_page()) {
    page_ = new ::agrirouter::feed::response::Page(*from.page_);
  } else {
    page_ = NULL;
  }
  if (from.has_header()) {
    header_ = new ::agrirouter::feed::response::FailedMessageQueryResponse_Header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:agrirouter.feed.response.FailedMessageQueryResponse)
}

void FailedMessageQueryResponse::SharedCtor() {
  ::memset(&querymetrics_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&header_) -
      reinterpret_cast<char*>(&querymetrics_)) + sizeof(header_));
  _cached_size_ = 0;
}

FailedMessageQueryResponse::~FailedMessageQueryResponse() {
  // @@protoc_insertion_point(destructor:agrirouter.feed.response.FailedMessageQueryResponse)
  SharedDtor();
}

void FailedMessageQueryResponse::SharedDtor() {
  if (this != internal_default_instance()) delete querymetrics_;
  if (this != internal_default_instance()) delete page_;
  if (this != internal_default_instance()) delete header_;
}

void FailedMessageQueryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FailedMessageQueryResponse::descriptor() {
  ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FailedMessageQueryResponse& FailedMessageQueryResponse::default_instance() {
  ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsFailedMessageQueryResponse();
  return *internal_default_instance();
}

FailedMessageQueryResponse* FailedMessageQueryResponse::New(::google::protobuf::Arena* arena) const {
  FailedMessageQueryResponse* n = new FailedMessageQueryResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FailedMessageQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:agrirouter.feed.response.FailedMessageQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reasons_.Clear();
  if (GetArenaNoVirtual() == NULL && querymetrics_ != NULL) {
    delete querymetrics_;
  }
  querymetrics_ = NULL;
  if (GetArenaNoVirtual() == NULL && page_ != NULL) {
    delete page_;
  }
  page_ = NULL;
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool FailedMessageQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agrirouter.feed.response.FailedMessageQueryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_querymetrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .agrirouter.feed.response.Page page = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_page()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .agrirouter.feed.response.FailedMessageQueryResponse.Header header = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .agrirouter.commons.Message reasons = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_reasons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agrirouter.feed.response.FailedMessageQueryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agrirouter.feed.response.FailedMessageQueryResponse)
  return false;
#undef DO_
}

void FailedMessageQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agrirouter.feed.response.FailedMessageQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
  if (this->has_querymetrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->querymetrics_, output);
  }

  // .agrirouter.feed.response.Page page = 2;
  if (this->has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->page_, output);
  }

  // .agrirouter.feed.response.FailedMessageQueryResponse.Header header = 3;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->header_, output);
  }

  // repeated .agrirouter.commons.Message reasons = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reasons_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reasons(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:agrirouter.feed.response.FailedMessageQueryResponse)
}

::google::protobuf::uint8* FailedMessageQueryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:agrirouter.feed.response.FailedMessageQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
  if (this->has_querymetrics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->querymetrics_, deterministic, target);
  }

  // .agrirouter.feed.response.Page page = 2;
  if (this->has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->page_, deterministic, target);
  }

  // .agrirouter.feed.response.FailedMessageQueryResponse.Header header = 3;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->header_, deterministic, target);
  }

  // repeated .agrirouter.commons.Message reasons = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reasons_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->reasons(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agrirouter.feed.response.FailedMessageQueryResponse)
  return target;
}

size_t FailedMessageQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agrirouter.feed.response.FailedMessageQueryResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .agrirouter.commons.Message reasons = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->reasons_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->reasons(static_cast<int>(i)));
    }
  }

  // .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
  if (this->has_querymetrics()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->querymetrics_);
  }

  // .agrirouter.feed.response.Page page = 2;
  if (this->has_page()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->page_);
  }

  // .agrirouter.feed.response.FailedMessageQueryResponse.Header header = 3;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FailedMessageQueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agrirouter.feed.response.FailedMessageQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FailedMessageQueryResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FailedMessageQueryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agrirouter.feed.response.FailedMessageQueryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agrirouter.feed.response.FailedMessageQueryResponse)
    MergeFrom(*source);
  }
}

void FailedMessageQueryResponse::MergeFrom(const FailedMessageQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agrirouter.feed.response.FailedMessageQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reasons_.MergeFrom(from.reasons_);
  if (from.has_querymetrics()) {
    mutable_querymetrics()->::agrirouter::feed::response::QueryMetrics::MergeFrom(from.querymetrics());
  }
  if (from.has_page()) {
    mutable_page()->::agrirouter::feed::response::Page::MergeFrom(from.page());
  }
  if (from.has_header()) {
    mutable_header()->::agrirouter::feed::response::FailedMessageQueryResponse_Header::MergeFrom(from.header());
  }
}

void FailedMessageQueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agrirouter.feed.response.FailedMessageQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FailedMessageQueryResponse::CopyFrom(const FailedMessageQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agrirouter.feed.response.FailedMessageQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FailedMessageQueryResponse::IsInitialized() const {
  return true;
}

void FailedMessageQueryResponse::Swap(FailedMessageQueryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FailedMessageQueryResponse::InternalSwap(FailedMessageQueryResponse* other) {
  using std::swap;
  reasons_.InternalSwap(&other->reasons_);
  swap(querymetrics_, other->querymetrics_);
  swap(page_, other->page_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FailedMessageQueryResponse::GetMetadata() const {
  protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace response
}  // namespace feed
}  // namespace agrirouter

// @@protoc_insertion_point(global_scope)
