// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messaging/response/payload/feed/feed-response.proto

#ifndef PROTOBUF_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto__INCLUDED
#define PROTOBUF_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/any.pb.h>
#include "commons/message.pb.h"
#include "commons/chunk.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPageImpl();
void InitDefaultsPage();
void InitDefaultsQueryMetricsImpl();
void InitDefaultsQueryMetrics();
void InitDefaultsHeaderQueryResponse_HeaderImpl();
void InitDefaultsHeaderQueryResponse_Header();
void InitDefaultsHeaderQueryResponse_FeedImpl();
void InitDefaultsHeaderQueryResponse_Feed();
void InitDefaultsHeaderQueryResponseImpl();
void InitDefaultsHeaderQueryResponse();
void InitDefaultsMessageQueryResponse_HeaderImpl();
void InitDefaultsMessageQueryResponse_Header();
void InitDefaultsMessageQueryResponse_FeedMessageImpl();
void InitDefaultsMessageQueryResponse_FeedMessage();
void InitDefaultsMessageQueryResponseImpl();
void InitDefaultsMessageQueryResponse();
void InitDefaultsFailedMessageQueryResponse_HeaderImpl();
void InitDefaultsFailedMessageQueryResponse_Header();
void InitDefaultsFailedMessageQueryResponseImpl();
void InitDefaultsFailedMessageQueryResponse();
inline void InitDefaults() {
  InitDefaultsPage();
  InitDefaultsQueryMetrics();
  InitDefaultsHeaderQueryResponse_Header();
  InitDefaultsHeaderQueryResponse_Feed();
  InitDefaultsHeaderQueryResponse();
  InitDefaultsMessageQueryResponse_Header();
  InitDefaultsMessageQueryResponse_FeedMessage();
  InitDefaultsMessageQueryResponse();
  InitDefaultsFailedMessageQueryResponse_Header();
  InitDefaultsFailedMessageQueryResponse();
}
}  // namespace protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto
namespace agrirouter {
namespace feed {
namespace response {
class FailedMessageQueryResponse;
class FailedMessageQueryResponseDefaultTypeInternal;
extern FailedMessageQueryResponseDefaultTypeInternal _FailedMessageQueryResponse_default_instance_;
class FailedMessageQueryResponse_Header;
class FailedMessageQueryResponse_HeaderDefaultTypeInternal;
extern FailedMessageQueryResponse_HeaderDefaultTypeInternal _FailedMessageQueryResponse_Header_default_instance_;
class HeaderQueryResponse;
class HeaderQueryResponseDefaultTypeInternal;
extern HeaderQueryResponseDefaultTypeInternal _HeaderQueryResponse_default_instance_;
class HeaderQueryResponse_Feed;
class HeaderQueryResponse_FeedDefaultTypeInternal;
extern HeaderQueryResponse_FeedDefaultTypeInternal _HeaderQueryResponse_Feed_default_instance_;
class HeaderQueryResponse_Header;
class HeaderQueryResponse_HeaderDefaultTypeInternal;
extern HeaderQueryResponse_HeaderDefaultTypeInternal _HeaderQueryResponse_Header_default_instance_;
class MessageQueryResponse;
class MessageQueryResponseDefaultTypeInternal;
extern MessageQueryResponseDefaultTypeInternal _MessageQueryResponse_default_instance_;
class MessageQueryResponse_FeedMessage;
class MessageQueryResponse_FeedMessageDefaultTypeInternal;
extern MessageQueryResponse_FeedMessageDefaultTypeInternal _MessageQueryResponse_FeedMessage_default_instance_;
class MessageQueryResponse_Header;
class MessageQueryResponse_HeaderDefaultTypeInternal;
extern MessageQueryResponse_HeaderDefaultTypeInternal _MessageQueryResponse_Header_default_instance_;
class Page;
class PageDefaultTypeInternal;
extern PageDefaultTypeInternal _Page_default_instance_;
class QueryMetrics;
class QueryMetricsDefaultTypeInternal;
extern QueryMetricsDefaultTypeInternal _QueryMetrics_default_instance_;
}  // namespace response
}  // namespace feed
}  // namespace agrirouter
namespace agrirouter {
namespace feed {
namespace response {

// ===================================================================

class Page : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:agrirouter.feed.response.Page) */ {
 public:
  Page();
  virtual ~Page();

  Page(const Page& from);

  inline Page& operator=(const Page& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Page(Page&& from) noexcept
    : Page() {
    *this = ::std::move(from);
  }

  inline Page& operator=(Page&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Page& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Page* internal_default_instance() {
    return reinterpret_cast<const Page*>(
               &_Page_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Page* other);
  friend void swap(Page& a, Page& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Page* New() const PROTOBUF_FINAL { return New(NULL); }

  Page* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Page& from);
  void MergeFrom(const Page& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Page* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 number = 1;
  void clear_number();
  static const int kNumberFieldNumber = 1;
  ::google::protobuf::int32 number() const;
  void set_number(::google::protobuf::int32 value);

  // int32 total = 2;
  void clear_total();
  static const int kTotalFieldNumber = 2;
  ::google::protobuf::int32 total() const;
  void set_total(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:agrirouter.feed.response.Page)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 number_;
  ::google::protobuf::int32 total_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::TableStruct;
  friend void ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsPageImpl();
};
// -------------------------------------------------------------------

class QueryMetrics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:agrirouter.feed.response.QueryMetrics) */ {
 public:
  QueryMetrics();
  virtual ~QueryMetrics();

  QueryMetrics(const QueryMetrics& from);

  inline QueryMetrics& operator=(const QueryMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryMetrics(QueryMetrics&& from) noexcept
    : QueryMetrics() {
    *this = ::std::move(from);
  }

  inline QueryMetrics& operator=(QueryMetrics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryMetrics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryMetrics* internal_default_instance() {
    return reinterpret_cast<const QueryMetrics*>(
               &_QueryMetrics_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(QueryMetrics* other);
  friend void swap(QueryMetrics& a, QueryMetrics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryMetrics* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryMetrics* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryMetrics& from);
  void MergeFrom(const QueryMetrics& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryMetrics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 total_messages_in_query = 1;
  void clear_total_messages_in_query();
  static const int kTotalMessagesInQueryFieldNumber = 1;
  ::google::protobuf::int32 total_messages_in_query() const;
  void set_total_messages_in_query(::google::protobuf::int32 value);

  // int32 max_count_restriction = 2;
  void clear_max_count_restriction();
  static const int kMaxCountRestrictionFieldNumber = 2;
  ::google::protobuf::int32 max_count_restriction() const;
  void set_max_count_restriction(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:agrirouter.feed.response.QueryMetrics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 total_messages_in_query_;
  ::google::protobuf::int32 max_count_restriction_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::TableStruct;
  friend void ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsQueryMetricsImpl();
};
// -------------------------------------------------------------------

class HeaderQueryResponse_Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:agrirouter.feed.response.HeaderQueryResponse.Header) */ {
 public:
  HeaderQueryResponse_Header();
  virtual ~HeaderQueryResponse_Header();

  HeaderQueryResponse_Header(const HeaderQueryResponse_Header& from);

  inline HeaderQueryResponse_Header& operator=(const HeaderQueryResponse_Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeaderQueryResponse_Header(HeaderQueryResponse_Header&& from) noexcept
    : HeaderQueryResponse_Header() {
    *this = ::std::move(from);
  }

  inline HeaderQueryResponse_Header& operator=(HeaderQueryResponse_Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeaderQueryResponse_Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeaderQueryResponse_Header* internal_default_instance() {
    return reinterpret_cast<const HeaderQueryResponse_Header*>(
               &_HeaderQueryResponse_Header_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(HeaderQueryResponse_Header* other);
  friend void swap(HeaderQueryResponse_Header& a, HeaderQueryResponse_Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeaderQueryResponse_Header* New() const PROTOBUF_FINAL { return New(NULL); }

  HeaderQueryResponse_Header* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HeaderQueryResponse_Header& from);
  void MergeFrom(const HeaderQueryResponse_Header& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HeaderQueryResponse_Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message_id = 1;
  void clear_message_id();
  static const int kMessageIdFieldNumber = 1;
  const ::std::string& message_id() const;
  void set_message_id(const ::std::string& value);
  #if LANG_CXX11
  void set_message_id(::std::string&& value);
  #endif
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  ::std::string* mutable_message_id();
  ::std::string* release_message_id();
  void set_allocated_message_id(::std::string* message_id);

  // string technical_message_type = 2;
  void clear_technical_message_type();
  static const int kTechnicalMessageTypeFieldNumber = 2;
  const ::std::string& technical_message_type() const;
  void set_technical_message_type(const ::std::string& value);
  #if LANG_CXX11
  void set_technical_message_type(::std::string&& value);
  #endif
  void set_technical_message_type(const char* value);
  void set_technical_message_type(const char* value, size_t size);
  ::std::string* mutable_technical_message_type();
  ::std::string* release_technical_message_type();
  void set_allocated_technical_message_type(::std::string* technical_message_type);

  // string team_set_context_id = 3;
  void clear_team_set_context_id();
  static const int kTeamSetContextIdFieldNumber = 3;
  const ::std::string& team_set_context_id() const;
  void set_team_set_context_id(const ::std::string& value);
  #if LANG_CXX11
  void set_team_set_context_id(::std::string&& value);
  #endif
  void set_team_set_context_id(const char* value);
  void set_team_set_context_id(const char* value, size_t size);
  ::std::string* mutable_team_set_context_id();
  ::std::string* release_team_set_context_id();
  void set_allocated_team_set_context_id(::std::string* team_set_context_id);

  // string chunk_context_id = 4;
  void clear_chunk_context_id();
  static const int kChunkContextIdFieldNumber = 4;
  const ::std::string& chunk_context_id() const;
  void set_chunk_context_id(const ::std::string& value);
  #if LANG_CXX11
  void set_chunk_context_id(::std::string&& value);
  #endif
  void set_chunk_context_id(const char* value);
  void set_chunk_context_id(const char* value, size_t size);
  ::std::string* mutable_chunk_context_id();
  ::std::string* release_chunk_context_id();
  void set_allocated_chunk_context_id(::std::string* chunk_context_id);

  // .google.protobuf.Timestamp sent_timestamp = 6;
  bool has_sent_timestamp() const;
  void clear_sent_timestamp();
  static const int kSentTimestampFieldNumber = 6;
  const ::google::protobuf::Timestamp& sent_timestamp() const;
  ::google::protobuf::Timestamp* release_sent_timestamp();
  ::google::protobuf::Timestamp* mutable_sent_timestamp();
  void set_allocated_sent_timestamp(::google::protobuf::Timestamp* sent_timestamp);

  // .google.protobuf.Timestamp created_at = 9;
  bool has_created_at() const;
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 9;
  const ::google::protobuf::Timestamp& created_at() const;
  ::google::protobuf::Timestamp* release_created_at();
  ::google::protobuf::Timestamp* mutable_created_at();
  void set_allocated_created_at(::google::protobuf::Timestamp* created_at);

  // int64 payload_size = 5;
  void clear_payload_size();
  static const int kPayloadSizeFieldNumber = 5;
  ::google::protobuf::int64 payload_size() const;
  void set_payload_size(::google::protobuf::int64 value);

  // int64 sequence_number = 7;
  void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 7;
  ::google::protobuf::int64 sequence_number() const;
  void set_sequence_number(::google::protobuf::int64 value);

  // int64 current_chunk = 8;
  void clear_current_chunk();
  static const int kCurrentChunkFieldNumber = 8;
  ::google::protobuf::int64 current_chunk() const;
  void set_current_chunk(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:agrirouter.feed.response.HeaderQueryResponse.Header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_id_;
  ::google::protobuf::internal::ArenaStringPtr technical_message_type_;
  ::google::protobuf::internal::ArenaStringPtr team_set_context_id_;
  ::google::protobuf::internal::ArenaStringPtr chunk_context_id_;
  ::google::protobuf::Timestamp* sent_timestamp_;
  ::google::protobuf::Timestamp* created_at_;
  ::google::protobuf::int64 payload_size_;
  ::google::protobuf::int64 sequence_number_;
  ::google::protobuf::int64 current_chunk_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::TableStruct;
  friend void ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsHeaderQueryResponse_HeaderImpl();
};
// -------------------------------------------------------------------

class HeaderQueryResponse_Feed : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:agrirouter.feed.response.HeaderQueryResponse.Feed) */ {
 public:
  HeaderQueryResponse_Feed();
  virtual ~HeaderQueryResponse_Feed();

  HeaderQueryResponse_Feed(const HeaderQueryResponse_Feed& from);

  inline HeaderQueryResponse_Feed& operator=(const HeaderQueryResponse_Feed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeaderQueryResponse_Feed(HeaderQueryResponse_Feed&& from) noexcept
    : HeaderQueryResponse_Feed() {
    *this = ::std::move(from);
  }

  inline HeaderQueryResponse_Feed& operator=(HeaderQueryResponse_Feed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeaderQueryResponse_Feed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeaderQueryResponse_Feed* internal_default_instance() {
    return reinterpret_cast<const HeaderQueryResponse_Feed*>(
               &_HeaderQueryResponse_Feed_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(HeaderQueryResponse_Feed* other);
  friend void swap(HeaderQueryResponse_Feed& a, HeaderQueryResponse_Feed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeaderQueryResponse_Feed* New() const PROTOBUF_FINAL { return New(NULL); }

  HeaderQueryResponse_Feed* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HeaderQueryResponse_Feed& from);
  void MergeFrom(const HeaderQueryResponse_Feed& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HeaderQueryResponse_Feed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .agrirouter.feed.response.HeaderQueryResponse.Header headers = 3;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 3;
  const ::agrirouter::feed::response::HeaderQueryResponse_Header& headers(int index) const;
  ::agrirouter::feed::response::HeaderQueryResponse_Header* mutable_headers(int index);
  ::agrirouter::feed::response::HeaderQueryResponse_Header* add_headers();
  ::google::protobuf::RepeatedPtrField< ::agrirouter::feed::response::HeaderQueryResponse_Header >*
      mutable_headers();
  const ::google::protobuf::RepeatedPtrField< ::agrirouter::feed::response::HeaderQueryResponse_Header >&
      headers() const;

  // string sender_id = 1;
  void clear_sender_id();
  static const int kSenderIdFieldNumber = 1;
  const ::std::string& sender_id() const;
  void set_sender_id(const ::std::string& value);
  #if LANG_CXX11
  void set_sender_id(::std::string&& value);
  #endif
  void set_sender_id(const char* value);
  void set_sender_id(const char* value, size_t size);
  ::std::string* mutable_sender_id();
  ::std::string* release_sender_id();
  void set_allocated_sender_id(::std::string* sender_id);

  // string receiver_id = 2;
  void clear_receiver_id();
  static const int kReceiverIdFieldNumber = 2;
  const ::std::string& receiver_id() const;
  void set_receiver_id(const ::std::string& value);
  #if LANG_CXX11
  void set_receiver_id(::std::string&& value);
  #endif
  void set_receiver_id(const char* value);
  void set_receiver_id(const char* value, size_t size);
  ::std::string* mutable_receiver_id();
  ::std::string* release_receiver_id();
  void set_allocated_receiver_id(::std::string* receiver_id);

  // @@protoc_insertion_point(class_scope:agrirouter.feed.response.HeaderQueryResponse.Feed)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::agrirouter::feed::response::HeaderQueryResponse_Header > headers_;
  ::google::protobuf::internal::ArenaStringPtr sender_id_;
  ::google::protobuf::internal::ArenaStringPtr receiver_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::TableStruct;
  friend void ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsHeaderQueryResponse_FeedImpl();
};
// -------------------------------------------------------------------

class HeaderQueryResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:agrirouter.feed.response.HeaderQueryResponse) */ {
 public:
  HeaderQueryResponse();
  virtual ~HeaderQueryResponse();

  HeaderQueryResponse(const HeaderQueryResponse& from);

  inline HeaderQueryResponse& operator=(const HeaderQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeaderQueryResponse(HeaderQueryResponse&& from) noexcept
    : HeaderQueryResponse() {
    *this = ::std::move(from);
  }

  inline HeaderQueryResponse& operator=(HeaderQueryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeaderQueryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeaderQueryResponse* internal_default_instance() {
    return reinterpret_cast<const HeaderQueryResponse*>(
               &_HeaderQueryResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(HeaderQueryResponse* other);
  friend void swap(HeaderQueryResponse& a, HeaderQueryResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeaderQueryResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  HeaderQueryResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HeaderQueryResponse& from);
  void MergeFrom(const HeaderQueryResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HeaderQueryResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HeaderQueryResponse_Header Header;
  typedef HeaderQueryResponse_Feed Feed;

  // accessors -------------------------------------------------------

  // repeated .agrirouter.commons.ChunkComponent chunk_contexts = 3;
  int chunk_contexts_size() const;
  void clear_chunk_contexts();
  static const int kChunkContextsFieldNumber = 3;
  const ::agrirouter::commons::ChunkComponent& chunk_contexts(int index) const;
  ::agrirouter::commons::ChunkComponent* mutable_chunk_contexts(int index);
  ::agrirouter::commons::ChunkComponent* add_chunk_contexts();
  ::google::protobuf::RepeatedPtrField< ::agrirouter::commons::ChunkComponent >*
      mutable_chunk_contexts();
  const ::google::protobuf::RepeatedPtrField< ::agrirouter::commons::ChunkComponent >&
      chunk_contexts() const;

  // repeated .agrirouter.feed.response.HeaderQueryResponse.Feed feed = 4;
  int feed_size() const;
  void clear_feed();
  static const int kFeedFieldNumber = 4;
  const ::agrirouter::feed::response::HeaderQueryResponse_Feed& feed(int index) const;
  ::agrirouter::feed::response::HeaderQueryResponse_Feed* mutable_feed(int index);
  ::agrirouter::feed::response::HeaderQueryResponse_Feed* add_feed();
  ::google::protobuf::RepeatedPtrField< ::agrirouter::feed::response::HeaderQueryResponse_Feed >*
      mutable_feed();
  const ::google::protobuf::RepeatedPtrField< ::agrirouter::feed::response::HeaderQueryResponse_Feed >&
      feed() const;

  // .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
  bool has_querymetrics() const;
  void clear_querymetrics();
  static const int kQueryMetricsFieldNumber = 1;
  const ::agrirouter::feed::response::QueryMetrics& querymetrics() const;
  ::agrirouter::feed::response::QueryMetrics* release_querymetrics();
  ::agrirouter::feed::response::QueryMetrics* mutable_querymetrics();
  void set_allocated_querymetrics(::agrirouter::feed::response::QueryMetrics* querymetrics);

  // .agrirouter.feed.response.Page page = 2;
  bool has_page() const;
  void clear_page();
  static const int kPageFieldNumber = 2;
  const ::agrirouter::feed::response::Page& page() const;
  ::agrirouter::feed::response::Page* release_page();
  ::agrirouter::feed::response::Page* mutable_page();
  void set_allocated_page(::agrirouter::feed::response::Page* page);

  // @@protoc_insertion_point(class_scope:agrirouter.feed.response.HeaderQueryResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::agrirouter::commons::ChunkComponent > chunk_contexts_;
  ::google::protobuf::RepeatedPtrField< ::agrirouter::feed::response::HeaderQueryResponse_Feed > feed_;
  ::agrirouter::feed::response::QueryMetrics* querymetrics_;
  ::agrirouter::feed::response::Page* page_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::TableStruct;
  friend void ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsHeaderQueryResponseImpl();
};
// -------------------------------------------------------------------

class MessageQueryResponse_Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:agrirouter.feed.response.MessageQueryResponse.Header) */ {
 public:
  MessageQueryResponse_Header();
  virtual ~MessageQueryResponse_Header();

  MessageQueryResponse_Header(const MessageQueryResponse_Header& from);

  inline MessageQueryResponse_Header& operator=(const MessageQueryResponse_Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageQueryResponse_Header(MessageQueryResponse_Header&& from) noexcept
    : MessageQueryResponse_Header() {
    *this = ::std::move(from);
  }

  inline MessageQueryResponse_Header& operator=(MessageQueryResponse_Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageQueryResponse_Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageQueryResponse_Header* internal_default_instance() {
    return reinterpret_cast<const MessageQueryResponse_Header*>(
               &_MessageQueryResponse_Header_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(MessageQueryResponse_Header* other);
  friend void swap(MessageQueryResponse_Header& a, MessageQueryResponse_Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageQueryResponse_Header* New() const PROTOBUF_FINAL { return New(NULL); }

  MessageQueryResponse_Header* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MessageQueryResponse_Header& from);
  void MergeFrom(const MessageQueryResponse_Header& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MessageQueryResponse_Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string receiver_id = 1;
  void clear_receiver_id();
  static const int kReceiverIdFieldNumber = 1;
  const ::std::string& receiver_id() const;
  void set_receiver_id(const ::std::string& value);
  #if LANG_CXX11
  void set_receiver_id(::std::string&& value);
  #endif
  void set_receiver_id(const char* value);
  void set_receiver_id(const char* value, size_t size);
  ::std::string* mutable_receiver_id();
  ::std::string* release_receiver_id();
  void set_allocated_receiver_id(::std::string* receiver_id);

  // string technical_message_type = 2;
  void clear_technical_message_type();
  static const int kTechnicalMessageTypeFieldNumber = 2;
  const ::std::string& technical_message_type() const;
  void set_technical_message_type(const ::std::string& value);
  #if LANG_CXX11
  void set_technical_message_type(::std::string&& value);
  #endif
  void set_technical_message_type(const char* value);
  void set_technical_message_type(const char* value, size_t size);
  ::std::string* mutable_technical_message_type();
  ::std::string* release_technical_message_type();
  void set_allocated_technical_message_type(::std::string* technical_message_type);

  // string team_set_context_id = 3;
  void clear_team_set_context_id();
  static const int kTeamSetContextIdFieldNumber = 3;
  const ::std::string& team_set_context_id() const;
  void set_team_set_context_id(const ::std::string& value);
  #if LANG_CXX11
  void set_team_set_context_id(::std::string&& value);
  #endif
  void set_team_set_context_id(const char* value);
  void set_team_set_context_id(const char* value, size_t size);
  ::std::string* mutable_team_set_context_id();
  ::std::string* release_team_set_context_id();
  void set_allocated_team_set_context_id(::std::string* team_set_context_id);

  // string sender_id = 8;
  void clear_sender_id();
  static const int kSenderIdFieldNumber = 8;
  const ::std::string& sender_id() const;
  void set_sender_id(const ::std::string& value);
  #if LANG_CXX11
  void set_sender_id(::std::string&& value);
  #endif
  void set_sender_id(const char* value);
  void set_sender_id(const char* value, size_t size);
  ::std::string* mutable_sender_id();
  ::std::string* release_sender_id();
  void set_allocated_sender_id(::std::string* sender_id);

  // string message_id = 10;
  void clear_message_id();
  static const int kMessageIdFieldNumber = 10;
  const ::std::string& message_id() const;
  void set_message_id(const ::std::string& value);
  #if LANG_CXX11
  void set_message_id(::std::string&& value);
  #endif
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  ::std::string* mutable_message_id();
  ::std::string* release_message_id();
  void set_allocated_message_id(::std::string* message_id);

  // .agrirouter.commons.ChunkComponent chunk_context = 4;
  bool has_chunk_context() const;
  void clear_chunk_context();
  static const int kChunkContextFieldNumber = 4;
  const ::agrirouter::commons::ChunkComponent& chunk_context() const;
  ::agrirouter::commons::ChunkComponent* release_chunk_context();
  ::agrirouter::commons::ChunkComponent* mutable_chunk_context();
  void set_allocated_chunk_context(::agrirouter::commons::ChunkComponent* chunk_context);

  // .google.protobuf.Timestamp sent_timestamp = 6;
  bool has_sent_timestamp() const;
  void clear_sent_timestamp();
  static const int kSentTimestampFieldNumber = 6;
  const ::google::protobuf::Timestamp& sent_timestamp() const;
  ::google::protobuf::Timestamp* release_sent_timestamp();
  ::google::protobuf::Timestamp* mutable_sent_timestamp();
  void set_allocated_sent_timestamp(::google::protobuf::Timestamp* sent_timestamp);

  // .google.protobuf.Timestamp created_at = 9;
  bool has_created_at() const;
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 9;
  const ::google::protobuf::Timestamp& created_at() const;
  ::google::protobuf::Timestamp* release_created_at();
  ::google::protobuf::Timestamp* mutable_created_at();
  void set_allocated_created_at(::google::protobuf::Timestamp* created_at);

  // int64 payload_size = 5;
  void clear_payload_size();
  static const int kPayloadSizeFieldNumber = 5;
  ::google::protobuf::int64 payload_size() const;
  void set_payload_size(::google::protobuf::int64 value);

  // int64 sequence_number = 7;
  void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 7;
  ::google::protobuf::int64 sequence_number() const;
  void set_sequence_number(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:agrirouter.feed.response.MessageQueryResponse.Header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr receiver_id_;
  ::google::protobuf::internal::ArenaStringPtr technical_message_type_;
  ::google::protobuf::internal::ArenaStringPtr team_set_context_id_;
  ::google::protobuf::internal::ArenaStringPtr sender_id_;
  ::google::protobuf::internal::ArenaStringPtr message_id_;
  ::agrirouter::commons::ChunkComponent* chunk_context_;
  ::google::protobuf::Timestamp* sent_timestamp_;
  ::google::protobuf::Timestamp* created_at_;
  ::google::protobuf::int64 payload_size_;
  ::google::protobuf::int64 sequence_number_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::TableStruct;
  friend void ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsMessageQueryResponse_HeaderImpl();
};
// -------------------------------------------------------------------

class MessageQueryResponse_FeedMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:agrirouter.feed.response.MessageQueryResponse.FeedMessage) */ {
 public:
  MessageQueryResponse_FeedMessage();
  virtual ~MessageQueryResponse_FeedMessage();

  MessageQueryResponse_FeedMessage(const MessageQueryResponse_FeedMessage& from);

  inline MessageQueryResponse_FeedMessage& operator=(const MessageQueryResponse_FeedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageQueryResponse_FeedMessage(MessageQueryResponse_FeedMessage&& from) noexcept
    : MessageQueryResponse_FeedMessage() {
    *this = ::std::move(from);
  }

  inline MessageQueryResponse_FeedMessage& operator=(MessageQueryResponse_FeedMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageQueryResponse_FeedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageQueryResponse_FeedMessage* internal_default_instance() {
    return reinterpret_cast<const MessageQueryResponse_FeedMessage*>(
               &_MessageQueryResponse_FeedMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(MessageQueryResponse_FeedMessage* other);
  friend void swap(MessageQueryResponse_FeedMessage& a, MessageQueryResponse_FeedMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageQueryResponse_FeedMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  MessageQueryResponse_FeedMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MessageQueryResponse_FeedMessage& from);
  void MergeFrom(const MessageQueryResponse_FeedMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MessageQueryResponse_FeedMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .agrirouter.feed.response.MessageQueryResponse.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::agrirouter::feed::response::MessageQueryResponse_Header& header() const;
  ::agrirouter::feed::response::MessageQueryResponse_Header* release_header();
  ::agrirouter::feed::response::MessageQueryResponse_Header* mutable_header();
  void set_allocated_header(::agrirouter::feed::response::MessageQueryResponse_Header* header);

  // .google.protobuf.Any content = 2;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::google::protobuf::Any& content() const;
  ::google::protobuf::Any* release_content();
  ::google::protobuf::Any* mutable_content();
  void set_allocated_content(::google::protobuf::Any* content);

  // @@protoc_insertion_point(class_scope:agrirouter.feed.response.MessageQueryResponse.FeedMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::agrirouter::feed::response::MessageQueryResponse_Header* header_;
  ::google::protobuf::Any* content_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::TableStruct;
  friend void ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsMessageQueryResponse_FeedMessageImpl();
};
// -------------------------------------------------------------------

class MessageQueryResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:agrirouter.feed.response.MessageQueryResponse) */ {
 public:
  MessageQueryResponse();
  virtual ~MessageQueryResponse();

  MessageQueryResponse(const MessageQueryResponse& from);

  inline MessageQueryResponse& operator=(const MessageQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageQueryResponse(MessageQueryResponse&& from) noexcept
    : MessageQueryResponse() {
    *this = ::std::move(from);
  }

  inline MessageQueryResponse& operator=(MessageQueryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageQueryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageQueryResponse* internal_default_instance() {
    return reinterpret_cast<const MessageQueryResponse*>(
               &_MessageQueryResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(MessageQueryResponse* other);
  friend void swap(MessageQueryResponse& a, MessageQueryResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageQueryResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  MessageQueryResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MessageQueryResponse& from);
  void MergeFrom(const MessageQueryResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MessageQueryResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MessageQueryResponse_Header Header;
  typedef MessageQueryResponse_FeedMessage FeedMessage;

  // accessors -------------------------------------------------------

  // repeated .agrirouter.feed.response.MessageQueryResponse.FeedMessage messages = 3;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 3;
  const ::agrirouter::feed::response::MessageQueryResponse_FeedMessage& messages(int index) const;
  ::agrirouter::feed::response::MessageQueryResponse_FeedMessage* mutable_messages(int index);
  ::agrirouter::feed::response::MessageQueryResponse_FeedMessage* add_messages();
  ::google::protobuf::RepeatedPtrField< ::agrirouter::feed::response::MessageQueryResponse_FeedMessage >*
      mutable_messages();
  const ::google::protobuf::RepeatedPtrField< ::agrirouter::feed::response::MessageQueryResponse_FeedMessage >&
      messages() const;

  // .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
  bool has_querymetrics() const;
  void clear_querymetrics();
  static const int kQueryMetricsFieldNumber = 1;
  const ::agrirouter::feed::response::QueryMetrics& querymetrics() const;
  ::agrirouter::feed::response::QueryMetrics* release_querymetrics();
  ::agrirouter::feed::response::QueryMetrics* mutable_querymetrics();
  void set_allocated_querymetrics(::agrirouter::feed::response::QueryMetrics* querymetrics);

  // .agrirouter.feed.response.Page page = 2;
  bool has_page() const;
  void clear_page();
  static const int kPageFieldNumber = 2;
  const ::agrirouter::feed::response::Page& page() const;
  ::agrirouter::feed::response::Page* release_page();
  ::agrirouter::feed::response::Page* mutable_page();
  void set_allocated_page(::agrirouter::feed::response::Page* page);

  // @@protoc_insertion_point(class_scope:agrirouter.feed.response.MessageQueryResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::agrirouter::feed::response::MessageQueryResponse_FeedMessage > messages_;
  ::agrirouter::feed::response::QueryMetrics* querymetrics_;
  ::agrirouter::feed::response::Page* page_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::TableStruct;
  friend void ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsMessageQueryResponseImpl();
};
// -------------------------------------------------------------------

class FailedMessageQueryResponse_Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:agrirouter.feed.response.FailedMessageQueryResponse.Header) */ {
 public:
  FailedMessageQueryResponse_Header();
  virtual ~FailedMessageQueryResponse_Header();

  FailedMessageQueryResponse_Header(const FailedMessageQueryResponse_Header& from);

  inline FailedMessageQueryResponse_Header& operator=(const FailedMessageQueryResponse_Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FailedMessageQueryResponse_Header(FailedMessageQueryResponse_Header&& from) noexcept
    : FailedMessageQueryResponse_Header() {
    *this = ::std::move(from);
  }

  inline FailedMessageQueryResponse_Header& operator=(FailedMessageQueryResponse_Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FailedMessageQueryResponse_Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FailedMessageQueryResponse_Header* internal_default_instance() {
    return reinterpret_cast<const FailedMessageQueryResponse_Header*>(
               &_FailedMessageQueryResponse_Header_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(FailedMessageQueryResponse_Header* other);
  friend void swap(FailedMessageQueryResponse_Header& a, FailedMessageQueryResponse_Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FailedMessageQueryResponse_Header* New() const PROTOBUF_FINAL { return New(NULL); }

  FailedMessageQueryResponse_Header* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FailedMessageQueryResponse_Header& from);
  void MergeFrom(const FailedMessageQueryResponse_Header& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FailedMessageQueryResponse_Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string technical_message_type = 1;
  void clear_technical_message_type();
  static const int kTechnicalMessageTypeFieldNumber = 1;
  const ::std::string& technical_message_type() const;
  void set_technical_message_type(const ::std::string& value);
  #if LANG_CXX11
  void set_technical_message_type(::std::string&& value);
  #endif
  void set_technical_message_type(const char* value);
  void set_technical_message_type(const char* value, size_t size);
  ::std::string* mutable_technical_message_type();
  ::std::string* release_technical_message_type();
  void set_allocated_technical_message_type(::std::string* technical_message_type);

  // string team_set_context_id = 2;
  void clear_team_set_context_id();
  static const int kTeamSetContextIdFieldNumber = 2;
  const ::std::string& team_set_context_id() const;
  void set_team_set_context_id(const ::std::string& value);
  #if LANG_CXX11
  void set_team_set_context_id(::std::string&& value);
  #endif
  void set_team_set_context_id(const char* value);
  void set_team_set_context_id(const char* value, size_t size);
  ::std::string* mutable_team_set_context_id();
  ::std::string* release_team_set_context_id();
  void set_allocated_team_set_context_id(::std::string* team_set_context_id);

  // .google.protobuf.Timestamp sent_timestamp = 4;
  bool has_sent_timestamp() const;
  void clear_sent_timestamp();
  static const int kSentTimestampFieldNumber = 4;
  const ::google::protobuf::Timestamp& sent_timestamp() const;
  ::google::protobuf::Timestamp* release_sent_timestamp();
  ::google::protobuf::Timestamp* mutable_sent_timestamp();
  void set_allocated_sent_timestamp(::google::protobuf::Timestamp* sent_timestamp);

  // int64 payload_size = 3;
  void clear_payload_size();
  static const int kPayloadSizeFieldNumber = 3;
  ::google::protobuf::int64 payload_size() const;
  void set_payload_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:agrirouter.feed.response.FailedMessageQueryResponse.Header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr technical_message_type_;
  ::google::protobuf::internal::ArenaStringPtr team_set_context_id_;
  ::google::protobuf::Timestamp* sent_timestamp_;
  ::google::protobuf::int64 payload_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::TableStruct;
  friend void ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsFailedMessageQueryResponse_HeaderImpl();
};
// -------------------------------------------------------------------

class FailedMessageQueryResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:agrirouter.feed.response.FailedMessageQueryResponse) */ {
 public:
  FailedMessageQueryResponse();
  virtual ~FailedMessageQueryResponse();

  FailedMessageQueryResponse(const FailedMessageQueryResponse& from);

  inline FailedMessageQueryResponse& operator=(const FailedMessageQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FailedMessageQueryResponse(FailedMessageQueryResponse&& from) noexcept
    : FailedMessageQueryResponse() {
    *this = ::std::move(from);
  }

  inline FailedMessageQueryResponse& operator=(FailedMessageQueryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FailedMessageQueryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FailedMessageQueryResponse* internal_default_instance() {
    return reinterpret_cast<const FailedMessageQueryResponse*>(
               &_FailedMessageQueryResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(FailedMessageQueryResponse* other);
  friend void swap(FailedMessageQueryResponse& a, FailedMessageQueryResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FailedMessageQueryResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  FailedMessageQueryResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FailedMessageQueryResponse& from);
  void MergeFrom(const FailedMessageQueryResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FailedMessageQueryResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef FailedMessageQueryResponse_Header Header;

  // accessors -------------------------------------------------------

  // repeated .agrirouter.commons.Message reasons = 4;
  int reasons_size() const;
  void clear_reasons();
  static const int kReasonsFieldNumber = 4;
  const ::agrirouter::commons::Message& reasons(int index) const;
  ::agrirouter::commons::Message* mutable_reasons(int index);
  ::agrirouter::commons::Message* add_reasons();
  ::google::protobuf::RepeatedPtrField< ::agrirouter::commons::Message >*
      mutable_reasons();
  const ::google::protobuf::RepeatedPtrField< ::agrirouter::commons::Message >&
      reasons() const;

  // .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
  bool has_querymetrics() const;
  void clear_querymetrics();
  static const int kQueryMetricsFieldNumber = 1;
  const ::agrirouter::feed::response::QueryMetrics& querymetrics() const;
  ::agrirouter::feed::response::QueryMetrics* release_querymetrics();
  ::agrirouter::feed::response::QueryMetrics* mutable_querymetrics();
  void set_allocated_querymetrics(::agrirouter::feed::response::QueryMetrics* querymetrics);

  // .agrirouter.feed.response.Page page = 2;
  bool has_page() const;
  void clear_page();
  static const int kPageFieldNumber = 2;
  const ::agrirouter::feed::response::Page& page() const;
  ::agrirouter::feed::response::Page* release_page();
  ::agrirouter::feed::response::Page* mutable_page();
  void set_allocated_page(::agrirouter::feed::response::Page* page);

  // .agrirouter.feed.response.FailedMessageQueryResponse.Header header = 3;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 3;
  const ::agrirouter::feed::response::FailedMessageQueryResponse_Header& header() const;
  ::agrirouter::feed::response::FailedMessageQueryResponse_Header* release_header();
  ::agrirouter::feed::response::FailedMessageQueryResponse_Header* mutable_header();
  void set_allocated_header(::agrirouter::feed::response::FailedMessageQueryResponse_Header* header);

  // @@protoc_insertion_point(class_scope:agrirouter.feed.response.FailedMessageQueryResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::agrirouter::commons::Message > reasons_;
  ::agrirouter::feed::response::QueryMetrics* querymetrics_;
  ::agrirouter::feed::response::Page* page_;
  ::agrirouter::feed::response::FailedMessageQueryResponse_Header* header_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::TableStruct;
  friend void ::protobuf_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto::InitDefaultsFailedMessageQueryResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Page

// int32 number = 1;
inline void Page::clear_number() {
  number_ = 0;
}
inline ::google::protobuf::int32 Page::number() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.Page.number)
  return number_;
}
inline void Page::set_number(::google::protobuf::int32 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.Page.number)
}

// int32 total = 2;
inline void Page::clear_total() {
  total_ = 0;
}
inline ::google::protobuf::int32 Page::total() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.Page.total)
  return total_;
}
inline void Page::set_total(::google::protobuf::int32 value) {
  
  total_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.Page.total)
}

// -------------------------------------------------------------------

// QueryMetrics

// int32 total_messages_in_query = 1;
inline void QueryMetrics::clear_total_messages_in_query() {
  total_messages_in_query_ = 0;
}
inline ::google::protobuf::int32 QueryMetrics::total_messages_in_query() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.QueryMetrics.total_messages_in_query)
  return total_messages_in_query_;
}
inline void QueryMetrics::set_total_messages_in_query(::google::protobuf::int32 value) {
  
  total_messages_in_query_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.QueryMetrics.total_messages_in_query)
}

// int32 max_count_restriction = 2;
inline void QueryMetrics::clear_max_count_restriction() {
  max_count_restriction_ = 0;
}
inline ::google::protobuf::int32 QueryMetrics::max_count_restriction() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.QueryMetrics.max_count_restriction)
  return max_count_restriction_;
}
inline void QueryMetrics::set_max_count_restriction(::google::protobuf::int32 value) {
  
  max_count_restriction_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.QueryMetrics.max_count_restriction)
}

// -------------------------------------------------------------------

// HeaderQueryResponse_Header

// string message_id = 1;
inline void HeaderQueryResponse_Header::clear_message_id() {
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeaderQueryResponse_Header::message_id() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.Header.message_id)
  return message_id_.GetNoArena();
}
inline void HeaderQueryResponse_Header::set_message_id(const ::std::string& value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.HeaderQueryResponse.Header.message_id)
}
#if LANG_CXX11
inline void HeaderQueryResponse_Header::set_message_id(::std::string&& value) {
  
  message_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:agrirouter.feed.response.HeaderQueryResponse.Header.message_id)
}
#endif
inline void HeaderQueryResponse_Header::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.response.HeaderQueryResponse.Header.message_id)
}
inline void HeaderQueryResponse_Header::set_message_id(const char* value, size_t size) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.response.HeaderQueryResponse.Header.message_id)
}
inline ::std::string* HeaderQueryResponse_Header::mutable_message_id() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.HeaderQueryResponse.Header.message_id)
  return message_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeaderQueryResponse_Header::release_message_id() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.HeaderQueryResponse.Header.message_id)
  
  return message_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeaderQueryResponse_Header::set_allocated_message_id(::std::string* message_id) {
  if (message_id != NULL) {
    
  } else {
    
  }
  message_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_id);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.HeaderQueryResponse.Header.message_id)
}

// string technical_message_type = 2;
inline void HeaderQueryResponse_Header::clear_technical_message_type() {
  technical_message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeaderQueryResponse_Header::technical_message_type() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.Header.technical_message_type)
  return technical_message_type_.GetNoArena();
}
inline void HeaderQueryResponse_Header::set_technical_message_type(const ::std::string& value) {
  
  technical_message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.HeaderQueryResponse.Header.technical_message_type)
}
#if LANG_CXX11
inline void HeaderQueryResponse_Header::set_technical_message_type(::std::string&& value) {
  
  technical_message_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:agrirouter.feed.response.HeaderQueryResponse.Header.technical_message_type)
}
#endif
inline void HeaderQueryResponse_Header::set_technical_message_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  technical_message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.response.HeaderQueryResponse.Header.technical_message_type)
}
inline void HeaderQueryResponse_Header::set_technical_message_type(const char* value, size_t size) {
  
  technical_message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.response.HeaderQueryResponse.Header.technical_message_type)
}
inline ::std::string* HeaderQueryResponse_Header::mutable_technical_message_type() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.HeaderQueryResponse.Header.technical_message_type)
  return technical_message_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeaderQueryResponse_Header::release_technical_message_type() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.HeaderQueryResponse.Header.technical_message_type)
  
  return technical_message_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeaderQueryResponse_Header::set_allocated_technical_message_type(::std::string* technical_message_type) {
  if (technical_message_type != NULL) {
    
  } else {
    
  }
  technical_message_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), technical_message_type);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.HeaderQueryResponse.Header.technical_message_type)
}

// string team_set_context_id = 3;
inline void HeaderQueryResponse_Header::clear_team_set_context_id() {
  team_set_context_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeaderQueryResponse_Header::team_set_context_id() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.Header.team_set_context_id)
  return team_set_context_id_.GetNoArena();
}
inline void HeaderQueryResponse_Header::set_team_set_context_id(const ::std::string& value) {
  
  team_set_context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.HeaderQueryResponse.Header.team_set_context_id)
}
#if LANG_CXX11
inline void HeaderQueryResponse_Header::set_team_set_context_id(::std::string&& value) {
  
  team_set_context_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:agrirouter.feed.response.HeaderQueryResponse.Header.team_set_context_id)
}
#endif
inline void HeaderQueryResponse_Header::set_team_set_context_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  team_set_context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.response.HeaderQueryResponse.Header.team_set_context_id)
}
inline void HeaderQueryResponse_Header::set_team_set_context_id(const char* value, size_t size) {
  
  team_set_context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.response.HeaderQueryResponse.Header.team_set_context_id)
}
inline ::std::string* HeaderQueryResponse_Header::mutable_team_set_context_id() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.HeaderQueryResponse.Header.team_set_context_id)
  return team_set_context_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeaderQueryResponse_Header::release_team_set_context_id() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.HeaderQueryResponse.Header.team_set_context_id)
  
  return team_set_context_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeaderQueryResponse_Header::set_allocated_team_set_context_id(::std::string* team_set_context_id) {
  if (team_set_context_id != NULL) {
    
  } else {
    
  }
  team_set_context_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_set_context_id);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.HeaderQueryResponse.Header.team_set_context_id)
}

// string chunk_context_id = 4;
inline void HeaderQueryResponse_Header::clear_chunk_context_id() {
  chunk_context_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeaderQueryResponse_Header::chunk_context_id() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.Header.chunk_context_id)
  return chunk_context_id_.GetNoArena();
}
inline void HeaderQueryResponse_Header::set_chunk_context_id(const ::std::string& value) {
  
  chunk_context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.HeaderQueryResponse.Header.chunk_context_id)
}
#if LANG_CXX11
inline void HeaderQueryResponse_Header::set_chunk_context_id(::std::string&& value) {
  
  chunk_context_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:agrirouter.feed.response.HeaderQueryResponse.Header.chunk_context_id)
}
#endif
inline void HeaderQueryResponse_Header::set_chunk_context_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chunk_context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.response.HeaderQueryResponse.Header.chunk_context_id)
}
inline void HeaderQueryResponse_Header::set_chunk_context_id(const char* value, size_t size) {
  
  chunk_context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.response.HeaderQueryResponse.Header.chunk_context_id)
}
inline ::std::string* HeaderQueryResponse_Header::mutable_chunk_context_id() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.HeaderQueryResponse.Header.chunk_context_id)
  return chunk_context_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeaderQueryResponse_Header::release_chunk_context_id() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.HeaderQueryResponse.Header.chunk_context_id)
  
  return chunk_context_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeaderQueryResponse_Header::set_allocated_chunk_context_id(::std::string* chunk_context_id) {
  if (chunk_context_id != NULL) {
    
  } else {
    
  }
  chunk_context_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chunk_context_id);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.HeaderQueryResponse.Header.chunk_context_id)
}

// int64 payload_size = 5;
inline void HeaderQueryResponse_Header::clear_payload_size() {
  payload_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 HeaderQueryResponse_Header::payload_size() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.Header.payload_size)
  return payload_size_;
}
inline void HeaderQueryResponse_Header::set_payload_size(::google::protobuf::int64 value) {
  
  payload_size_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.HeaderQueryResponse.Header.payload_size)
}

// .google.protobuf.Timestamp sent_timestamp = 6;
inline bool HeaderQueryResponse_Header::has_sent_timestamp() const {
  return this != internal_default_instance() && sent_timestamp_ != NULL;
}
inline const ::google::protobuf::Timestamp& HeaderQueryResponse_Header::sent_timestamp() const {
  const ::google::protobuf::Timestamp* p = sent_timestamp_;
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.Header.sent_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* HeaderQueryResponse_Header::release_sent_timestamp() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.HeaderQueryResponse.Header.sent_timestamp)
  
  ::google::protobuf::Timestamp* temp = sent_timestamp_;
  sent_timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* HeaderQueryResponse_Header::mutable_sent_timestamp() {
  
  if (sent_timestamp_ == NULL) {
    sent_timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.HeaderQueryResponse.Header.sent_timestamp)
  return sent_timestamp_;
}
inline void HeaderQueryResponse_Header::set_allocated_sent_timestamp(::google::protobuf::Timestamp* sent_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sent_timestamp_);
  }
  if (sent_timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(sent_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      sent_timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sent_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  sent_timestamp_ = sent_timestamp;
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.HeaderQueryResponse.Header.sent_timestamp)
}

// int64 sequence_number = 7;
inline void HeaderQueryResponse_Header::clear_sequence_number() {
  sequence_number_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 HeaderQueryResponse_Header::sequence_number() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.Header.sequence_number)
  return sequence_number_;
}
inline void HeaderQueryResponse_Header::set_sequence_number(::google::protobuf::int64 value) {
  
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.HeaderQueryResponse.Header.sequence_number)
}

// int64 current_chunk = 8;
inline void HeaderQueryResponse_Header::clear_current_chunk() {
  current_chunk_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 HeaderQueryResponse_Header::current_chunk() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.Header.current_chunk)
  return current_chunk_;
}
inline void HeaderQueryResponse_Header::set_current_chunk(::google::protobuf::int64 value) {
  
  current_chunk_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.HeaderQueryResponse.Header.current_chunk)
}

// .google.protobuf.Timestamp created_at = 9;
inline bool HeaderQueryResponse_Header::has_created_at() const {
  return this != internal_default_instance() && created_at_ != NULL;
}
inline const ::google::protobuf::Timestamp& HeaderQueryResponse_Header::created_at() const {
  const ::google::protobuf::Timestamp* p = created_at_;
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.Header.created_at)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* HeaderQueryResponse_Header::release_created_at() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.HeaderQueryResponse.Header.created_at)
  
  ::google::protobuf::Timestamp* temp = created_at_;
  created_at_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* HeaderQueryResponse_Header::mutable_created_at() {
  
  if (created_at_ == NULL) {
    created_at_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.HeaderQueryResponse.Header.created_at)
  return created_at_;
}
inline void HeaderQueryResponse_Header::set_allocated_created_at(::google::protobuf::Timestamp* created_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.HeaderQueryResponse.Header.created_at)
}

// -------------------------------------------------------------------

// HeaderQueryResponse_Feed

// string sender_id = 1;
inline void HeaderQueryResponse_Feed::clear_sender_id() {
  sender_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeaderQueryResponse_Feed::sender_id() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.Feed.sender_id)
  return sender_id_.GetNoArena();
}
inline void HeaderQueryResponse_Feed::set_sender_id(const ::std::string& value) {
  
  sender_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.HeaderQueryResponse.Feed.sender_id)
}
#if LANG_CXX11
inline void HeaderQueryResponse_Feed::set_sender_id(::std::string&& value) {
  
  sender_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:agrirouter.feed.response.HeaderQueryResponse.Feed.sender_id)
}
#endif
inline void HeaderQueryResponse_Feed::set_sender_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sender_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.response.HeaderQueryResponse.Feed.sender_id)
}
inline void HeaderQueryResponse_Feed::set_sender_id(const char* value, size_t size) {
  
  sender_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.response.HeaderQueryResponse.Feed.sender_id)
}
inline ::std::string* HeaderQueryResponse_Feed::mutable_sender_id() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.HeaderQueryResponse.Feed.sender_id)
  return sender_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeaderQueryResponse_Feed::release_sender_id() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.HeaderQueryResponse.Feed.sender_id)
  
  return sender_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeaderQueryResponse_Feed::set_allocated_sender_id(::std::string* sender_id) {
  if (sender_id != NULL) {
    
  } else {
    
  }
  sender_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_id);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.HeaderQueryResponse.Feed.sender_id)
}

// string receiver_id = 2;
inline void HeaderQueryResponse_Feed::clear_receiver_id() {
  receiver_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeaderQueryResponse_Feed::receiver_id() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.Feed.receiver_id)
  return receiver_id_.GetNoArena();
}
inline void HeaderQueryResponse_Feed::set_receiver_id(const ::std::string& value) {
  
  receiver_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.HeaderQueryResponse.Feed.receiver_id)
}
#if LANG_CXX11
inline void HeaderQueryResponse_Feed::set_receiver_id(::std::string&& value) {
  
  receiver_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:agrirouter.feed.response.HeaderQueryResponse.Feed.receiver_id)
}
#endif
inline void HeaderQueryResponse_Feed::set_receiver_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  receiver_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.response.HeaderQueryResponse.Feed.receiver_id)
}
inline void HeaderQueryResponse_Feed::set_receiver_id(const char* value, size_t size) {
  
  receiver_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.response.HeaderQueryResponse.Feed.receiver_id)
}
inline ::std::string* HeaderQueryResponse_Feed::mutable_receiver_id() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.HeaderQueryResponse.Feed.receiver_id)
  return receiver_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeaderQueryResponse_Feed::release_receiver_id() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.HeaderQueryResponse.Feed.receiver_id)
  
  return receiver_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeaderQueryResponse_Feed::set_allocated_receiver_id(::std::string* receiver_id) {
  if (receiver_id != NULL) {
    
  } else {
    
  }
  receiver_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receiver_id);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.HeaderQueryResponse.Feed.receiver_id)
}

// repeated .agrirouter.feed.response.HeaderQueryResponse.Header headers = 3;
inline int HeaderQueryResponse_Feed::headers_size() const {
  return headers_.size();
}
inline void HeaderQueryResponse_Feed::clear_headers() {
  headers_.Clear();
}
inline const ::agrirouter::feed::response::HeaderQueryResponse_Header& HeaderQueryResponse_Feed::headers(int index) const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.Feed.headers)
  return headers_.Get(index);
}
inline ::agrirouter::feed::response::HeaderQueryResponse_Header* HeaderQueryResponse_Feed::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.HeaderQueryResponse.Feed.headers)
  return headers_.Mutable(index);
}
inline ::agrirouter::feed::response::HeaderQueryResponse_Header* HeaderQueryResponse_Feed::add_headers() {
  // @@protoc_insertion_point(field_add:agrirouter.feed.response.HeaderQueryResponse.Feed.headers)
  return headers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::agrirouter::feed::response::HeaderQueryResponse_Header >*
HeaderQueryResponse_Feed::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:agrirouter.feed.response.HeaderQueryResponse.Feed.headers)
  return &headers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::agrirouter::feed::response::HeaderQueryResponse_Header >&
HeaderQueryResponse_Feed::headers() const {
  // @@protoc_insertion_point(field_list:agrirouter.feed.response.HeaderQueryResponse.Feed.headers)
  return headers_;
}

// -------------------------------------------------------------------

// HeaderQueryResponse

// .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
inline bool HeaderQueryResponse::has_querymetrics() const {
  return this != internal_default_instance() && querymetrics_ != NULL;
}
inline void HeaderQueryResponse::clear_querymetrics() {
  if (GetArenaNoVirtual() == NULL && querymetrics_ != NULL) {
    delete querymetrics_;
  }
  querymetrics_ = NULL;
}
inline const ::agrirouter::feed::response::QueryMetrics& HeaderQueryResponse::querymetrics() const {
  const ::agrirouter::feed::response::QueryMetrics* p = querymetrics_;
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.queryMetrics)
  return p != NULL ? *p : *reinterpret_cast<const ::agrirouter::feed::response::QueryMetrics*>(
      &::agrirouter::feed::response::_QueryMetrics_default_instance_);
}
inline ::agrirouter::feed::response::QueryMetrics* HeaderQueryResponse::release_querymetrics() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.HeaderQueryResponse.queryMetrics)
  
  ::agrirouter::feed::response::QueryMetrics* temp = querymetrics_;
  querymetrics_ = NULL;
  return temp;
}
inline ::agrirouter::feed::response::QueryMetrics* HeaderQueryResponse::mutable_querymetrics() {
  
  if (querymetrics_ == NULL) {
    querymetrics_ = new ::agrirouter::feed::response::QueryMetrics;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.HeaderQueryResponse.queryMetrics)
  return querymetrics_;
}
inline void HeaderQueryResponse::set_allocated_querymetrics(::agrirouter::feed::response::QueryMetrics* querymetrics) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete querymetrics_;
  }
  if (querymetrics) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      querymetrics = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, querymetrics, submessage_arena);
    }
    
  } else {
    
  }
  querymetrics_ = querymetrics;
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.HeaderQueryResponse.queryMetrics)
}

// .agrirouter.feed.response.Page page = 2;
inline bool HeaderQueryResponse::has_page() const {
  return this != internal_default_instance() && page_ != NULL;
}
inline void HeaderQueryResponse::clear_page() {
  if (GetArenaNoVirtual() == NULL && page_ != NULL) {
    delete page_;
  }
  page_ = NULL;
}
inline const ::agrirouter::feed::response::Page& HeaderQueryResponse::page() const {
  const ::agrirouter::feed::response::Page* p = page_;
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.page)
  return p != NULL ? *p : *reinterpret_cast<const ::agrirouter::feed::response::Page*>(
      &::agrirouter::feed::response::_Page_default_instance_);
}
inline ::agrirouter::feed::response::Page* HeaderQueryResponse::release_page() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.HeaderQueryResponse.page)
  
  ::agrirouter::feed::response::Page* temp = page_;
  page_ = NULL;
  return temp;
}
inline ::agrirouter::feed::response::Page* HeaderQueryResponse::mutable_page() {
  
  if (page_ == NULL) {
    page_ = new ::agrirouter::feed::response::Page;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.HeaderQueryResponse.page)
  return page_;
}
inline void HeaderQueryResponse::set_allocated_page(::agrirouter::feed::response::Page* page) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete page_;
  }
  if (page) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      page = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, page, submessage_arena);
    }
    
  } else {
    
  }
  page_ = page;
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.HeaderQueryResponse.page)
}

// repeated .agrirouter.commons.ChunkComponent chunk_contexts = 3;
inline int HeaderQueryResponse::chunk_contexts_size() const {
  return chunk_contexts_.size();
}
inline const ::agrirouter::commons::ChunkComponent& HeaderQueryResponse::chunk_contexts(int index) const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.chunk_contexts)
  return chunk_contexts_.Get(index);
}
inline ::agrirouter::commons::ChunkComponent* HeaderQueryResponse::mutable_chunk_contexts(int index) {
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.HeaderQueryResponse.chunk_contexts)
  return chunk_contexts_.Mutable(index);
}
inline ::agrirouter::commons::ChunkComponent* HeaderQueryResponse::add_chunk_contexts() {
  // @@protoc_insertion_point(field_add:agrirouter.feed.response.HeaderQueryResponse.chunk_contexts)
  return chunk_contexts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::agrirouter::commons::ChunkComponent >*
HeaderQueryResponse::mutable_chunk_contexts() {
  // @@protoc_insertion_point(field_mutable_list:agrirouter.feed.response.HeaderQueryResponse.chunk_contexts)
  return &chunk_contexts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::agrirouter::commons::ChunkComponent >&
HeaderQueryResponse::chunk_contexts() const {
  // @@protoc_insertion_point(field_list:agrirouter.feed.response.HeaderQueryResponse.chunk_contexts)
  return chunk_contexts_;
}

// repeated .agrirouter.feed.response.HeaderQueryResponse.Feed feed = 4;
inline int HeaderQueryResponse::feed_size() const {
  return feed_.size();
}
inline void HeaderQueryResponse::clear_feed() {
  feed_.Clear();
}
inline const ::agrirouter::feed::response::HeaderQueryResponse_Feed& HeaderQueryResponse::feed(int index) const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.HeaderQueryResponse.feed)
  return feed_.Get(index);
}
inline ::agrirouter::feed::response::HeaderQueryResponse_Feed* HeaderQueryResponse::mutable_feed(int index) {
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.HeaderQueryResponse.feed)
  return feed_.Mutable(index);
}
inline ::agrirouter::feed::response::HeaderQueryResponse_Feed* HeaderQueryResponse::add_feed() {
  // @@protoc_insertion_point(field_add:agrirouter.feed.response.HeaderQueryResponse.feed)
  return feed_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::agrirouter::feed::response::HeaderQueryResponse_Feed >*
HeaderQueryResponse::mutable_feed() {
  // @@protoc_insertion_point(field_mutable_list:agrirouter.feed.response.HeaderQueryResponse.feed)
  return &feed_;
}
inline const ::google::protobuf::RepeatedPtrField< ::agrirouter::feed::response::HeaderQueryResponse_Feed >&
HeaderQueryResponse::feed() const {
  // @@protoc_insertion_point(field_list:agrirouter.feed.response.HeaderQueryResponse.feed)
  return feed_;
}

// -------------------------------------------------------------------

// MessageQueryResponse_Header

// string receiver_id = 1;
inline void MessageQueryResponse_Header::clear_receiver_id() {
  receiver_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageQueryResponse_Header::receiver_id() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.Header.receiver_id)
  return receiver_id_.GetNoArena();
}
inline void MessageQueryResponse_Header::set_receiver_id(const ::std::string& value) {
  
  receiver_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.MessageQueryResponse.Header.receiver_id)
}
#if LANG_CXX11
inline void MessageQueryResponse_Header::set_receiver_id(::std::string&& value) {
  
  receiver_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:agrirouter.feed.response.MessageQueryResponse.Header.receiver_id)
}
#endif
inline void MessageQueryResponse_Header::set_receiver_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  receiver_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.response.MessageQueryResponse.Header.receiver_id)
}
inline void MessageQueryResponse_Header::set_receiver_id(const char* value, size_t size) {
  
  receiver_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.response.MessageQueryResponse.Header.receiver_id)
}
inline ::std::string* MessageQueryResponse_Header::mutable_receiver_id() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.MessageQueryResponse.Header.receiver_id)
  return receiver_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageQueryResponse_Header::release_receiver_id() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.MessageQueryResponse.Header.receiver_id)
  
  return receiver_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageQueryResponse_Header::set_allocated_receiver_id(::std::string* receiver_id) {
  if (receiver_id != NULL) {
    
  } else {
    
  }
  receiver_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receiver_id);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.MessageQueryResponse.Header.receiver_id)
}

// string technical_message_type = 2;
inline void MessageQueryResponse_Header::clear_technical_message_type() {
  technical_message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageQueryResponse_Header::technical_message_type() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.Header.technical_message_type)
  return technical_message_type_.GetNoArena();
}
inline void MessageQueryResponse_Header::set_technical_message_type(const ::std::string& value) {
  
  technical_message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.MessageQueryResponse.Header.technical_message_type)
}
#if LANG_CXX11
inline void MessageQueryResponse_Header::set_technical_message_type(::std::string&& value) {
  
  technical_message_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:agrirouter.feed.response.MessageQueryResponse.Header.technical_message_type)
}
#endif
inline void MessageQueryResponse_Header::set_technical_message_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  technical_message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.response.MessageQueryResponse.Header.technical_message_type)
}
inline void MessageQueryResponse_Header::set_technical_message_type(const char* value, size_t size) {
  
  technical_message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.response.MessageQueryResponse.Header.technical_message_type)
}
inline ::std::string* MessageQueryResponse_Header::mutable_technical_message_type() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.MessageQueryResponse.Header.technical_message_type)
  return technical_message_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageQueryResponse_Header::release_technical_message_type() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.MessageQueryResponse.Header.technical_message_type)
  
  return technical_message_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageQueryResponse_Header::set_allocated_technical_message_type(::std::string* technical_message_type) {
  if (technical_message_type != NULL) {
    
  } else {
    
  }
  technical_message_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), technical_message_type);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.MessageQueryResponse.Header.technical_message_type)
}

// string team_set_context_id = 3;
inline void MessageQueryResponse_Header::clear_team_set_context_id() {
  team_set_context_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageQueryResponse_Header::team_set_context_id() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.Header.team_set_context_id)
  return team_set_context_id_.GetNoArena();
}
inline void MessageQueryResponse_Header::set_team_set_context_id(const ::std::string& value) {
  
  team_set_context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.MessageQueryResponse.Header.team_set_context_id)
}
#if LANG_CXX11
inline void MessageQueryResponse_Header::set_team_set_context_id(::std::string&& value) {
  
  team_set_context_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:agrirouter.feed.response.MessageQueryResponse.Header.team_set_context_id)
}
#endif
inline void MessageQueryResponse_Header::set_team_set_context_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  team_set_context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.response.MessageQueryResponse.Header.team_set_context_id)
}
inline void MessageQueryResponse_Header::set_team_set_context_id(const char* value, size_t size) {
  
  team_set_context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.response.MessageQueryResponse.Header.team_set_context_id)
}
inline ::std::string* MessageQueryResponse_Header::mutable_team_set_context_id() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.MessageQueryResponse.Header.team_set_context_id)
  return team_set_context_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageQueryResponse_Header::release_team_set_context_id() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.MessageQueryResponse.Header.team_set_context_id)
  
  return team_set_context_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageQueryResponse_Header::set_allocated_team_set_context_id(::std::string* team_set_context_id) {
  if (team_set_context_id != NULL) {
    
  } else {
    
  }
  team_set_context_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_set_context_id);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.MessageQueryResponse.Header.team_set_context_id)
}

// .agrirouter.commons.ChunkComponent chunk_context = 4;
inline bool MessageQueryResponse_Header::has_chunk_context() const {
  return this != internal_default_instance() && chunk_context_ != NULL;
}
inline const ::agrirouter::commons::ChunkComponent& MessageQueryResponse_Header::chunk_context() const {
  const ::agrirouter::commons::ChunkComponent* p = chunk_context_;
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.Header.chunk_context)
  return p != NULL ? *p : *reinterpret_cast<const ::agrirouter::commons::ChunkComponent*>(
      &::agrirouter::commons::_ChunkComponent_default_instance_);
}
inline ::agrirouter::commons::ChunkComponent* MessageQueryResponse_Header::release_chunk_context() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.MessageQueryResponse.Header.chunk_context)
  
  ::agrirouter::commons::ChunkComponent* temp = chunk_context_;
  chunk_context_ = NULL;
  return temp;
}
inline ::agrirouter::commons::ChunkComponent* MessageQueryResponse_Header::mutable_chunk_context() {
  
  if (chunk_context_ == NULL) {
    chunk_context_ = new ::agrirouter::commons::ChunkComponent;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.MessageQueryResponse.Header.chunk_context)
  return chunk_context_;
}
inline void MessageQueryResponse_Header::set_allocated_chunk_context(::agrirouter::commons::ChunkComponent* chunk_context) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(chunk_context_);
  }
  if (chunk_context) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      chunk_context = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, chunk_context, submessage_arena);
    }
    
  } else {
    
  }
  chunk_context_ = chunk_context;
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.MessageQueryResponse.Header.chunk_context)
}

// int64 payload_size = 5;
inline void MessageQueryResponse_Header::clear_payload_size() {
  payload_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageQueryResponse_Header::payload_size() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.Header.payload_size)
  return payload_size_;
}
inline void MessageQueryResponse_Header::set_payload_size(::google::protobuf::int64 value) {
  
  payload_size_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.MessageQueryResponse.Header.payload_size)
}

// .google.protobuf.Timestamp sent_timestamp = 6;
inline bool MessageQueryResponse_Header::has_sent_timestamp() const {
  return this != internal_default_instance() && sent_timestamp_ != NULL;
}
inline const ::google::protobuf::Timestamp& MessageQueryResponse_Header::sent_timestamp() const {
  const ::google::protobuf::Timestamp* p = sent_timestamp_;
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.Header.sent_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* MessageQueryResponse_Header::release_sent_timestamp() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.MessageQueryResponse.Header.sent_timestamp)
  
  ::google::protobuf::Timestamp* temp = sent_timestamp_;
  sent_timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* MessageQueryResponse_Header::mutable_sent_timestamp() {
  
  if (sent_timestamp_ == NULL) {
    sent_timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.MessageQueryResponse.Header.sent_timestamp)
  return sent_timestamp_;
}
inline void MessageQueryResponse_Header::set_allocated_sent_timestamp(::google::protobuf::Timestamp* sent_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sent_timestamp_);
  }
  if (sent_timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(sent_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      sent_timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sent_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  sent_timestamp_ = sent_timestamp;
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.MessageQueryResponse.Header.sent_timestamp)
}

// int64 sequence_number = 7;
inline void MessageQueryResponse_Header::clear_sequence_number() {
  sequence_number_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageQueryResponse_Header::sequence_number() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.Header.sequence_number)
  return sequence_number_;
}
inline void MessageQueryResponse_Header::set_sequence_number(::google::protobuf::int64 value) {
  
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.MessageQueryResponse.Header.sequence_number)
}

// string sender_id = 8;
inline void MessageQueryResponse_Header::clear_sender_id() {
  sender_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageQueryResponse_Header::sender_id() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.Header.sender_id)
  return sender_id_.GetNoArena();
}
inline void MessageQueryResponse_Header::set_sender_id(const ::std::string& value) {
  
  sender_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.MessageQueryResponse.Header.sender_id)
}
#if LANG_CXX11
inline void MessageQueryResponse_Header::set_sender_id(::std::string&& value) {
  
  sender_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:agrirouter.feed.response.MessageQueryResponse.Header.sender_id)
}
#endif
inline void MessageQueryResponse_Header::set_sender_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sender_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.response.MessageQueryResponse.Header.sender_id)
}
inline void MessageQueryResponse_Header::set_sender_id(const char* value, size_t size) {
  
  sender_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.response.MessageQueryResponse.Header.sender_id)
}
inline ::std::string* MessageQueryResponse_Header::mutable_sender_id() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.MessageQueryResponse.Header.sender_id)
  return sender_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageQueryResponse_Header::release_sender_id() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.MessageQueryResponse.Header.sender_id)
  
  return sender_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageQueryResponse_Header::set_allocated_sender_id(::std::string* sender_id) {
  if (sender_id != NULL) {
    
  } else {
    
  }
  sender_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_id);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.MessageQueryResponse.Header.sender_id)
}

// .google.protobuf.Timestamp created_at = 9;
inline bool MessageQueryResponse_Header::has_created_at() const {
  return this != internal_default_instance() && created_at_ != NULL;
}
inline const ::google::protobuf::Timestamp& MessageQueryResponse_Header::created_at() const {
  const ::google::protobuf::Timestamp* p = created_at_;
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.Header.created_at)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* MessageQueryResponse_Header::release_created_at() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.MessageQueryResponse.Header.created_at)
  
  ::google::protobuf::Timestamp* temp = created_at_;
  created_at_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* MessageQueryResponse_Header::mutable_created_at() {
  
  if (created_at_ == NULL) {
    created_at_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.MessageQueryResponse.Header.created_at)
  return created_at_;
}
inline void MessageQueryResponse_Header::set_allocated_created_at(::google::protobuf::Timestamp* created_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.MessageQueryResponse.Header.created_at)
}

// string message_id = 10;
inline void MessageQueryResponse_Header::clear_message_id() {
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageQueryResponse_Header::message_id() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.Header.message_id)
  return message_id_.GetNoArena();
}
inline void MessageQueryResponse_Header::set_message_id(const ::std::string& value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.MessageQueryResponse.Header.message_id)
}
#if LANG_CXX11
inline void MessageQueryResponse_Header::set_message_id(::std::string&& value) {
  
  message_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:agrirouter.feed.response.MessageQueryResponse.Header.message_id)
}
#endif
inline void MessageQueryResponse_Header::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.response.MessageQueryResponse.Header.message_id)
}
inline void MessageQueryResponse_Header::set_message_id(const char* value, size_t size) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.response.MessageQueryResponse.Header.message_id)
}
inline ::std::string* MessageQueryResponse_Header::mutable_message_id() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.MessageQueryResponse.Header.message_id)
  return message_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageQueryResponse_Header::release_message_id() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.MessageQueryResponse.Header.message_id)
  
  return message_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageQueryResponse_Header::set_allocated_message_id(::std::string* message_id) {
  if (message_id != NULL) {
    
  } else {
    
  }
  message_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_id);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.MessageQueryResponse.Header.message_id)
}

// -------------------------------------------------------------------

// MessageQueryResponse_FeedMessage

// .agrirouter.feed.response.MessageQueryResponse.Header header = 1;
inline bool MessageQueryResponse_FeedMessage::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void MessageQueryResponse_FeedMessage::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::agrirouter::feed::response::MessageQueryResponse_Header& MessageQueryResponse_FeedMessage::header() const {
  const ::agrirouter::feed::response::MessageQueryResponse_Header* p = header_;
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.FeedMessage.header)
  return p != NULL ? *p : *reinterpret_cast<const ::agrirouter::feed::response::MessageQueryResponse_Header*>(
      &::agrirouter::feed::response::_MessageQueryResponse_Header_default_instance_);
}
inline ::agrirouter::feed::response::MessageQueryResponse_Header* MessageQueryResponse_FeedMessage::release_header() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.MessageQueryResponse.FeedMessage.header)
  
  ::agrirouter::feed::response::MessageQueryResponse_Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::agrirouter::feed::response::MessageQueryResponse_Header* MessageQueryResponse_FeedMessage::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::agrirouter::feed::response::MessageQueryResponse_Header;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.MessageQueryResponse.FeedMessage.header)
  return header_;
}
inline void MessageQueryResponse_FeedMessage::set_allocated_header(::agrirouter::feed::response::MessageQueryResponse_Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.MessageQueryResponse.FeedMessage.header)
}

// .google.protobuf.Any content = 2;
inline bool MessageQueryResponse_FeedMessage::has_content() const {
  return this != internal_default_instance() && content_ != NULL;
}
inline const ::google::protobuf::Any& MessageQueryResponse_FeedMessage::content() const {
  const ::google::protobuf::Any* p = content_;
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.FeedMessage.content)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* MessageQueryResponse_FeedMessage::release_content() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.MessageQueryResponse.FeedMessage.content)
  
  ::google::protobuf::Any* temp = content_;
  content_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* MessageQueryResponse_FeedMessage::mutable_content() {
  
  if (content_ == NULL) {
    content_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.MessageQueryResponse.FeedMessage.content)
  return content_;
}
inline void MessageQueryResponse_FeedMessage::set_allocated_content(::google::protobuf::Any* content) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(content_);
  }
  if (content) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      content = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, content, submessage_arena);
    }
    
  } else {
    
  }
  content_ = content;
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.MessageQueryResponse.FeedMessage.content)
}

// -------------------------------------------------------------------

// MessageQueryResponse

// .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
inline bool MessageQueryResponse::has_querymetrics() const {
  return this != internal_default_instance() && querymetrics_ != NULL;
}
inline void MessageQueryResponse::clear_querymetrics() {
  if (GetArenaNoVirtual() == NULL && querymetrics_ != NULL) {
    delete querymetrics_;
  }
  querymetrics_ = NULL;
}
inline const ::agrirouter::feed::response::QueryMetrics& MessageQueryResponse::querymetrics() const {
  const ::agrirouter::feed::response::QueryMetrics* p = querymetrics_;
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.queryMetrics)
  return p != NULL ? *p : *reinterpret_cast<const ::agrirouter::feed::response::QueryMetrics*>(
      &::agrirouter::feed::response::_QueryMetrics_default_instance_);
}
inline ::agrirouter::feed::response::QueryMetrics* MessageQueryResponse::release_querymetrics() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.MessageQueryResponse.queryMetrics)
  
  ::agrirouter::feed::response::QueryMetrics* temp = querymetrics_;
  querymetrics_ = NULL;
  return temp;
}
inline ::agrirouter::feed::response::QueryMetrics* MessageQueryResponse::mutable_querymetrics() {
  
  if (querymetrics_ == NULL) {
    querymetrics_ = new ::agrirouter::feed::response::QueryMetrics;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.MessageQueryResponse.queryMetrics)
  return querymetrics_;
}
inline void MessageQueryResponse::set_allocated_querymetrics(::agrirouter::feed::response::QueryMetrics* querymetrics) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete querymetrics_;
  }
  if (querymetrics) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      querymetrics = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, querymetrics, submessage_arena);
    }
    
  } else {
    
  }
  querymetrics_ = querymetrics;
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.MessageQueryResponse.queryMetrics)
}

// .agrirouter.feed.response.Page page = 2;
inline bool MessageQueryResponse::has_page() const {
  return this != internal_default_instance() && page_ != NULL;
}
inline void MessageQueryResponse::clear_page() {
  if (GetArenaNoVirtual() == NULL && page_ != NULL) {
    delete page_;
  }
  page_ = NULL;
}
inline const ::agrirouter::feed::response::Page& MessageQueryResponse::page() const {
  const ::agrirouter::feed::response::Page* p = page_;
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.page)
  return p != NULL ? *p : *reinterpret_cast<const ::agrirouter::feed::response::Page*>(
      &::agrirouter::feed::response::_Page_default_instance_);
}
inline ::agrirouter::feed::response::Page* MessageQueryResponse::release_page() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.MessageQueryResponse.page)
  
  ::agrirouter::feed::response::Page* temp = page_;
  page_ = NULL;
  return temp;
}
inline ::agrirouter::feed::response::Page* MessageQueryResponse::mutable_page() {
  
  if (page_ == NULL) {
    page_ = new ::agrirouter::feed::response::Page;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.MessageQueryResponse.page)
  return page_;
}
inline void MessageQueryResponse::set_allocated_page(::agrirouter::feed::response::Page* page) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete page_;
  }
  if (page) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      page = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, page, submessage_arena);
    }
    
  } else {
    
  }
  page_ = page;
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.MessageQueryResponse.page)
}

// repeated .agrirouter.feed.response.MessageQueryResponse.FeedMessage messages = 3;
inline int MessageQueryResponse::messages_size() const {
  return messages_.size();
}
inline void MessageQueryResponse::clear_messages() {
  messages_.Clear();
}
inline const ::agrirouter::feed::response::MessageQueryResponse_FeedMessage& MessageQueryResponse::messages(int index) const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.MessageQueryResponse.messages)
  return messages_.Get(index);
}
inline ::agrirouter::feed::response::MessageQueryResponse_FeedMessage* MessageQueryResponse::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.MessageQueryResponse.messages)
  return messages_.Mutable(index);
}
inline ::agrirouter::feed::response::MessageQueryResponse_FeedMessage* MessageQueryResponse::add_messages() {
  // @@protoc_insertion_point(field_add:agrirouter.feed.response.MessageQueryResponse.messages)
  return messages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::agrirouter::feed::response::MessageQueryResponse_FeedMessage >*
MessageQueryResponse::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:agrirouter.feed.response.MessageQueryResponse.messages)
  return &messages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::agrirouter::feed::response::MessageQueryResponse_FeedMessage >&
MessageQueryResponse::messages() const {
  // @@protoc_insertion_point(field_list:agrirouter.feed.response.MessageQueryResponse.messages)
  return messages_;
}

// -------------------------------------------------------------------

// FailedMessageQueryResponse_Header

// string technical_message_type = 1;
inline void FailedMessageQueryResponse_Header::clear_technical_message_type() {
  technical_message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FailedMessageQueryResponse_Header::technical_message_type() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.FailedMessageQueryResponse.Header.technical_message_type)
  return technical_message_type_.GetNoArena();
}
inline void FailedMessageQueryResponse_Header::set_technical_message_type(const ::std::string& value) {
  
  technical_message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.FailedMessageQueryResponse.Header.technical_message_type)
}
#if LANG_CXX11
inline void FailedMessageQueryResponse_Header::set_technical_message_type(::std::string&& value) {
  
  technical_message_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:agrirouter.feed.response.FailedMessageQueryResponse.Header.technical_message_type)
}
#endif
inline void FailedMessageQueryResponse_Header::set_technical_message_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  technical_message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.response.FailedMessageQueryResponse.Header.technical_message_type)
}
inline void FailedMessageQueryResponse_Header::set_technical_message_type(const char* value, size_t size) {
  
  technical_message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.response.FailedMessageQueryResponse.Header.technical_message_type)
}
inline ::std::string* FailedMessageQueryResponse_Header::mutable_technical_message_type() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.FailedMessageQueryResponse.Header.technical_message_type)
  return technical_message_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FailedMessageQueryResponse_Header::release_technical_message_type() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.FailedMessageQueryResponse.Header.technical_message_type)
  
  return technical_message_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FailedMessageQueryResponse_Header::set_allocated_technical_message_type(::std::string* technical_message_type) {
  if (technical_message_type != NULL) {
    
  } else {
    
  }
  technical_message_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), technical_message_type);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.FailedMessageQueryResponse.Header.technical_message_type)
}

// string team_set_context_id = 2;
inline void FailedMessageQueryResponse_Header::clear_team_set_context_id() {
  team_set_context_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FailedMessageQueryResponse_Header::team_set_context_id() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.FailedMessageQueryResponse.Header.team_set_context_id)
  return team_set_context_id_.GetNoArena();
}
inline void FailedMessageQueryResponse_Header::set_team_set_context_id(const ::std::string& value) {
  
  team_set_context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.FailedMessageQueryResponse.Header.team_set_context_id)
}
#if LANG_CXX11
inline void FailedMessageQueryResponse_Header::set_team_set_context_id(::std::string&& value) {
  
  team_set_context_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:agrirouter.feed.response.FailedMessageQueryResponse.Header.team_set_context_id)
}
#endif
inline void FailedMessageQueryResponse_Header::set_team_set_context_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  team_set_context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.feed.response.FailedMessageQueryResponse.Header.team_set_context_id)
}
inline void FailedMessageQueryResponse_Header::set_team_set_context_id(const char* value, size_t size) {
  
  team_set_context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.feed.response.FailedMessageQueryResponse.Header.team_set_context_id)
}
inline ::std::string* FailedMessageQueryResponse_Header::mutable_team_set_context_id() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.FailedMessageQueryResponse.Header.team_set_context_id)
  return team_set_context_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FailedMessageQueryResponse_Header::release_team_set_context_id() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.FailedMessageQueryResponse.Header.team_set_context_id)
  
  return team_set_context_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FailedMessageQueryResponse_Header::set_allocated_team_set_context_id(::std::string* team_set_context_id) {
  if (team_set_context_id != NULL) {
    
  } else {
    
  }
  team_set_context_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_set_context_id);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.FailedMessageQueryResponse.Header.team_set_context_id)
}

// int64 payload_size = 3;
inline void FailedMessageQueryResponse_Header::clear_payload_size() {
  payload_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FailedMessageQueryResponse_Header::payload_size() const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.FailedMessageQueryResponse.Header.payload_size)
  return payload_size_;
}
inline void FailedMessageQueryResponse_Header::set_payload_size(::google::protobuf::int64 value) {
  
  payload_size_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.feed.response.FailedMessageQueryResponse.Header.payload_size)
}

// .google.protobuf.Timestamp sent_timestamp = 4;
inline bool FailedMessageQueryResponse_Header::has_sent_timestamp() const {
  return this != internal_default_instance() && sent_timestamp_ != NULL;
}
inline const ::google::protobuf::Timestamp& FailedMessageQueryResponse_Header::sent_timestamp() const {
  const ::google::protobuf::Timestamp* p = sent_timestamp_;
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.FailedMessageQueryResponse.Header.sent_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* FailedMessageQueryResponse_Header::release_sent_timestamp() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.FailedMessageQueryResponse.Header.sent_timestamp)
  
  ::google::protobuf::Timestamp* temp = sent_timestamp_;
  sent_timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* FailedMessageQueryResponse_Header::mutable_sent_timestamp() {
  
  if (sent_timestamp_ == NULL) {
    sent_timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.FailedMessageQueryResponse.Header.sent_timestamp)
  return sent_timestamp_;
}
inline void FailedMessageQueryResponse_Header::set_allocated_sent_timestamp(::google::protobuf::Timestamp* sent_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sent_timestamp_);
  }
  if (sent_timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(sent_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      sent_timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sent_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  sent_timestamp_ = sent_timestamp;
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.FailedMessageQueryResponse.Header.sent_timestamp)
}

// -------------------------------------------------------------------

// FailedMessageQueryResponse

// .agrirouter.feed.response.QueryMetrics queryMetrics = 1;
inline bool FailedMessageQueryResponse::has_querymetrics() const {
  return this != internal_default_instance() && querymetrics_ != NULL;
}
inline void FailedMessageQueryResponse::clear_querymetrics() {
  if (GetArenaNoVirtual() == NULL && querymetrics_ != NULL) {
    delete querymetrics_;
  }
  querymetrics_ = NULL;
}
inline const ::agrirouter::feed::response::QueryMetrics& FailedMessageQueryResponse::querymetrics() const {
  const ::agrirouter::feed::response::QueryMetrics* p = querymetrics_;
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.FailedMessageQueryResponse.queryMetrics)
  return p != NULL ? *p : *reinterpret_cast<const ::agrirouter::feed::response::QueryMetrics*>(
      &::agrirouter::feed::response::_QueryMetrics_default_instance_);
}
inline ::agrirouter::feed::response::QueryMetrics* FailedMessageQueryResponse::release_querymetrics() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.FailedMessageQueryResponse.queryMetrics)
  
  ::agrirouter::feed::response::QueryMetrics* temp = querymetrics_;
  querymetrics_ = NULL;
  return temp;
}
inline ::agrirouter::feed::response::QueryMetrics* FailedMessageQueryResponse::mutable_querymetrics() {
  
  if (querymetrics_ == NULL) {
    querymetrics_ = new ::agrirouter::feed::response::QueryMetrics;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.FailedMessageQueryResponse.queryMetrics)
  return querymetrics_;
}
inline void FailedMessageQueryResponse::set_allocated_querymetrics(::agrirouter::feed::response::QueryMetrics* querymetrics) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete querymetrics_;
  }
  if (querymetrics) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      querymetrics = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, querymetrics, submessage_arena);
    }
    
  } else {
    
  }
  querymetrics_ = querymetrics;
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.FailedMessageQueryResponse.queryMetrics)
}

// .agrirouter.feed.response.Page page = 2;
inline bool FailedMessageQueryResponse::has_page() const {
  return this != internal_default_instance() && page_ != NULL;
}
inline void FailedMessageQueryResponse::clear_page() {
  if (GetArenaNoVirtual() == NULL && page_ != NULL) {
    delete page_;
  }
  page_ = NULL;
}
inline const ::agrirouter::feed::response::Page& FailedMessageQueryResponse::page() const {
  const ::agrirouter::feed::response::Page* p = page_;
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.FailedMessageQueryResponse.page)
  return p != NULL ? *p : *reinterpret_cast<const ::agrirouter::feed::response::Page*>(
      &::agrirouter::feed::response::_Page_default_instance_);
}
inline ::agrirouter::feed::response::Page* FailedMessageQueryResponse::release_page() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.FailedMessageQueryResponse.page)
  
  ::agrirouter::feed::response::Page* temp = page_;
  page_ = NULL;
  return temp;
}
inline ::agrirouter::feed::response::Page* FailedMessageQueryResponse::mutable_page() {
  
  if (page_ == NULL) {
    page_ = new ::agrirouter::feed::response::Page;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.FailedMessageQueryResponse.page)
  return page_;
}
inline void FailedMessageQueryResponse::set_allocated_page(::agrirouter::feed::response::Page* page) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete page_;
  }
  if (page) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      page = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, page, submessage_arena);
    }
    
  } else {
    
  }
  page_ = page;
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.FailedMessageQueryResponse.page)
}

// .agrirouter.feed.response.FailedMessageQueryResponse.Header header = 3;
inline bool FailedMessageQueryResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void FailedMessageQueryResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::agrirouter::feed::response::FailedMessageQueryResponse_Header& FailedMessageQueryResponse::header() const {
  const ::agrirouter::feed::response::FailedMessageQueryResponse_Header* p = header_;
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.FailedMessageQueryResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::agrirouter::feed::response::FailedMessageQueryResponse_Header*>(
      &::agrirouter::feed::response::_FailedMessageQueryResponse_Header_default_instance_);
}
inline ::agrirouter::feed::response::FailedMessageQueryResponse_Header* FailedMessageQueryResponse::release_header() {
  // @@protoc_insertion_point(field_release:agrirouter.feed.response.FailedMessageQueryResponse.header)
  
  ::agrirouter::feed::response::FailedMessageQueryResponse_Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::agrirouter::feed::response::FailedMessageQueryResponse_Header* FailedMessageQueryResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::agrirouter::feed::response::FailedMessageQueryResponse_Header;
  }
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.FailedMessageQueryResponse.header)
  return header_;
}
inline void FailedMessageQueryResponse::set_allocated_header(::agrirouter::feed::response::FailedMessageQueryResponse_Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:agrirouter.feed.response.FailedMessageQueryResponse.header)
}

// repeated .agrirouter.commons.Message reasons = 4;
inline int FailedMessageQueryResponse::reasons_size() const {
  return reasons_.size();
}
inline const ::agrirouter::commons::Message& FailedMessageQueryResponse::reasons(int index) const {
  // @@protoc_insertion_point(field_get:agrirouter.feed.response.FailedMessageQueryResponse.reasons)
  return reasons_.Get(index);
}
inline ::agrirouter::commons::Message* FailedMessageQueryResponse::mutable_reasons(int index) {
  // @@protoc_insertion_point(field_mutable:agrirouter.feed.response.FailedMessageQueryResponse.reasons)
  return reasons_.Mutable(index);
}
inline ::agrirouter::commons::Message* FailedMessageQueryResponse::add_reasons() {
  // @@protoc_insertion_point(field_add:agrirouter.feed.response.FailedMessageQueryResponse.reasons)
  return reasons_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::agrirouter::commons::Message >*
FailedMessageQueryResponse::mutable_reasons() {
  // @@protoc_insertion_point(field_mutable_list:agrirouter.feed.response.FailedMessageQueryResponse.reasons)
  return &reasons_;
}
inline const ::google::protobuf::RepeatedPtrField< ::agrirouter::commons::Message >&
FailedMessageQueryResponse::reasons() const {
  // @@protoc_insertion_point(field_list:agrirouter.feed.response.FailedMessageQueryResponse.reasons)
  return reasons_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace response
}  // namespace feed
}  // namespace agrirouter

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messaging_2fresponse_2fpayload_2ffeed_2ffeed_2dresponse_2eproto__INCLUDED
