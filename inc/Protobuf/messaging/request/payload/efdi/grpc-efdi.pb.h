// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messaging/request/payload/efdi/grpc-efdi.proto

#ifndef PROTOBUF_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto__INCLUDED
#define PROTOBUF_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[58];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsUIDImpl();
void InitDefaultsUID();
void InitDefaultsAllocationStampImpl();
void InitDefaultsAllocationStamp();
void InitDefaultsAttachedFileImpl();
void InitDefaultsAttachedFile();
void InitDefaultsBaseStationImpl();
void InitDefaultsBaseStation();
void InitDefaultsCodedCommentImpl();
void InitDefaultsCodedComment();
void InitDefaultsCodedCommentGroupImpl();
void InitDefaultsCodedCommentGroup();
void InitDefaultsCodedCommentListValueImpl();
void InitDefaultsCodedCommentListValue();
void InitDefaultsColourLegendImpl();
void InitDefaultsColourLegend();
void InitDefaultsColourRangeImpl();
void InitDefaultsColourRange();
void InitDefaultsCommentAllocationImpl();
void InitDefaultsCommentAllocation();
void InitDefaultsConnectionImpl();
void InitDefaultsConnection();
void InitDefaultsControlAssignmentImpl();
void InitDefaultsControlAssignment();
void InitDefaultsCropTypeImpl();
void InitDefaultsCropType();
void InitDefaultsCropVarietyImpl();
void InitDefaultsCropVariety();
void InitDefaultsCulturalPracticeImpl();
void InitDefaultsCulturalPractice();
void InitDefaultsCustomerImpl();
void InitDefaultsCustomer();
void InitDefaultsDataLogTriggerImpl();
void InitDefaultsDataLogTrigger();
void InitDefaultsDataLogValueImpl();
void InitDefaultsDataLogValue();
void InitDefaultsDataLogValueIntOnlyImpl();
void InitDefaultsDataLogValueIntOnly();
void InitDefaultsDeviceImpl();
void InitDefaultsDevice();
void InitDefaultsDeviceAllocationImpl();
void InitDefaultsDeviceAllocation();
void InitDefaultsDeviceElementImpl();
void InitDefaultsDeviceElement();
void InitDefaultsDeviceObjectReferenceImpl();
void InitDefaultsDeviceObjectReference();
void InitDefaultsDeviceProcessDataImpl();
void InitDefaultsDeviceProcessData();
void InitDefaultsDevicePropertyImpl();
void InitDefaultsDeviceProperty();
void InitDefaultsDeviceValuePresentationImpl();
void InitDefaultsDeviceValuePresentation();
void InitDefaultsFarmImpl();
void InitDefaultsFarm();
void InitDefaultsGridImpl();
void InitDefaultsGrid();
void InitDefaultsGuidanceAllocationImpl();
void InitDefaultsGuidanceAllocation();
void InitDefaultsGuidanceGroupImpl();
void InitDefaultsGuidanceGroup();
void InitDefaultsGuidancePatternImpl();
void InitDefaultsGuidancePattern();
void InitDefaultsGuidanceShiftImpl();
void InitDefaultsGuidanceShift();
void InitDefaultsISO11783_TaskDataImpl();
void InitDefaultsISO11783_TaskData();
void InitDefaultsLineStringImpl();
void InitDefaultsLineString();
void InitDefaultsOperationTechniqueImpl();
void InitDefaultsOperationTechnique();
void InitDefaultsOperationTechniqueReferenceImpl();
void InitDefaultsOperationTechniqueReference();
void InitDefaultsOperTechPracticeImpl();
void InitDefaultsOperTechPractice();
void InitDefaultsPartfieldImpl();
void InitDefaultsPartfield();
void InitDefaultsPointImpl();
void InitDefaultsPoint();
void InitDefaultsPolygonImpl();
void InitDefaultsPolygon();
void InitDefaultsPositionImpl();
void InitDefaultsPosition();
void InitDefaultsProcessDataVariableImpl();
void InitDefaultsProcessDataVariable();
void InitDefaultsProductImpl();
void InitDefaultsProduct();
void InitDefaultsProductAllocationImpl();
void InitDefaultsProductAllocation();
void InitDefaultsProductGroupImpl();
void InitDefaultsProductGroup();
void InitDefaultsProductRelationImpl();
void InitDefaultsProductRelation();
void InitDefaultsTaskImpl();
void InitDefaultsTask();
void InitDefaultsTaskControllerCapabilitiesImpl();
void InitDefaultsTaskControllerCapabilities();
void InitDefaultsTimeImpl();
void InitDefaultsTime();
void InitDefaultsTimeIntOnlyImpl();
void InitDefaultsTimeIntOnly();
void InitDefaultsTimeDetHierImpl();
void InitDefaultsTimeDetHier();
void InitDefaultsDeviceElementDataImpl();
void InitDefaultsDeviceElementData();
void InitDefaultsTimeLogImpl();
void InitDefaultsTimeLog();
void InitDefaultsTreatmentZoneImpl();
void InitDefaultsTreatmentZone();
void InitDefaultsValuePresentationImpl();
void InitDefaultsValuePresentation();
void InitDefaultsWorkerImpl();
void InitDefaultsWorker();
void InitDefaultsWorkerAllocationImpl();
void InitDefaultsWorkerAllocation();
void InitDefaultsExternalFileReferenceImpl();
void InitDefaultsExternalFileReference();
inline void InitDefaults() {
  InitDefaultsUID();
  InitDefaultsAllocationStamp();
  InitDefaultsAttachedFile();
  InitDefaultsBaseStation();
  InitDefaultsCodedComment();
  InitDefaultsCodedCommentGroup();
  InitDefaultsCodedCommentListValue();
  InitDefaultsColourLegend();
  InitDefaultsColourRange();
  InitDefaultsCommentAllocation();
  InitDefaultsConnection();
  InitDefaultsControlAssignment();
  InitDefaultsCropType();
  InitDefaultsCropVariety();
  InitDefaultsCulturalPractice();
  InitDefaultsCustomer();
  InitDefaultsDataLogTrigger();
  InitDefaultsDataLogValue();
  InitDefaultsDataLogValueIntOnly();
  InitDefaultsDevice();
  InitDefaultsDeviceAllocation();
  InitDefaultsDeviceElement();
  InitDefaultsDeviceObjectReference();
  InitDefaultsDeviceProcessData();
  InitDefaultsDeviceProperty();
  InitDefaultsDeviceValuePresentation();
  InitDefaultsFarm();
  InitDefaultsGrid();
  InitDefaultsGuidanceAllocation();
  InitDefaultsGuidanceGroup();
  InitDefaultsGuidancePattern();
  InitDefaultsGuidanceShift();
  InitDefaultsISO11783_TaskData();
  InitDefaultsLineString();
  InitDefaultsOperationTechnique();
  InitDefaultsOperationTechniqueReference();
  InitDefaultsOperTechPractice();
  InitDefaultsPartfield();
  InitDefaultsPoint();
  InitDefaultsPolygon();
  InitDefaultsPosition();
  InitDefaultsProcessDataVariable();
  InitDefaultsProduct();
  InitDefaultsProductAllocation();
  InitDefaultsProductGroup();
  InitDefaultsProductRelation();
  InitDefaultsTask();
  InitDefaultsTaskControllerCapabilities();
  InitDefaultsTime();
  InitDefaultsTimeIntOnly();
  InitDefaultsTimeDetHier();
  InitDefaultsDeviceElementData();
  InitDefaultsTimeLog();
  InitDefaultsTreatmentZone();
  InitDefaultsValuePresentation();
  InitDefaultsWorker();
  InitDefaultsWorkerAllocation();
  InitDefaultsExternalFileReference();
}
}  // namespace protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto
namespace efdi {
class AllocationStamp;
class AllocationStampDefaultTypeInternal;
extern AllocationStampDefaultTypeInternal _AllocationStamp_default_instance_;
class AttachedFile;
class AttachedFileDefaultTypeInternal;
extern AttachedFileDefaultTypeInternal _AttachedFile_default_instance_;
class BaseStation;
class BaseStationDefaultTypeInternal;
extern BaseStationDefaultTypeInternal _BaseStation_default_instance_;
class CodedComment;
class CodedCommentDefaultTypeInternal;
extern CodedCommentDefaultTypeInternal _CodedComment_default_instance_;
class CodedCommentGroup;
class CodedCommentGroupDefaultTypeInternal;
extern CodedCommentGroupDefaultTypeInternal _CodedCommentGroup_default_instance_;
class CodedCommentListValue;
class CodedCommentListValueDefaultTypeInternal;
extern CodedCommentListValueDefaultTypeInternal _CodedCommentListValue_default_instance_;
class ColourLegend;
class ColourLegendDefaultTypeInternal;
extern ColourLegendDefaultTypeInternal _ColourLegend_default_instance_;
class ColourRange;
class ColourRangeDefaultTypeInternal;
extern ColourRangeDefaultTypeInternal _ColourRange_default_instance_;
class CommentAllocation;
class CommentAllocationDefaultTypeInternal;
extern CommentAllocationDefaultTypeInternal _CommentAllocation_default_instance_;
class Connection;
class ConnectionDefaultTypeInternal;
extern ConnectionDefaultTypeInternal _Connection_default_instance_;
class ControlAssignment;
class ControlAssignmentDefaultTypeInternal;
extern ControlAssignmentDefaultTypeInternal _ControlAssignment_default_instance_;
class CropType;
class CropTypeDefaultTypeInternal;
extern CropTypeDefaultTypeInternal _CropType_default_instance_;
class CropVariety;
class CropVarietyDefaultTypeInternal;
extern CropVarietyDefaultTypeInternal _CropVariety_default_instance_;
class CulturalPractice;
class CulturalPracticeDefaultTypeInternal;
extern CulturalPracticeDefaultTypeInternal _CulturalPractice_default_instance_;
class Customer;
class CustomerDefaultTypeInternal;
extern CustomerDefaultTypeInternal _Customer_default_instance_;
class DataLogTrigger;
class DataLogTriggerDefaultTypeInternal;
extern DataLogTriggerDefaultTypeInternal _DataLogTrigger_default_instance_;
class DataLogValue;
class DataLogValueDefaultTypeInternal;
extern DataLogValueDefaultTypeInternal _DataLogValue_default_instance_;
class DataLogValueIntOnly;
class DataLogValueIntOnlyDefaultTypeInternal;
extern DataLogValueIntOnlyDefaultTypeInternal _DataLogValueIntOnly_default_instance_;
class Device;
class DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class DeviceAllocation;
class DeviceAllocationDefaultTypeInternal;
extern DeviceAllocationDefaultTypeInternal _DeviceAllocation_default_instance_;
class DeviceElement;
class DeviceElementDefaultTypeInternal;
extern DeviceElementDefaultTypeInternal _DeviceElement_default_instance_;
class DeviceElementData;
class DeviceElementDataDefaultTypeInternal;
extern DeviceElementDataDefaultTypeInternal _DeviceElementData_default_instance_;
class DeviceObjectReference;
class DeviceObjectReferenceDefaultTypeInternal;
extern DeviceObjectReferenceDefaultTypeInternal _DeviceObjectReference_default_instance_;
class DeviceProcessData;
class DeviceProcessDataDefaultTypeInternal;
extern DeviceProcessDataDefaultTypeInternal _DeviceProcessData_default_instance_;
class DeviceProperty;
class DevicePropertyDefaultTypeInternal;
extern DevicePropertyDefaultTypeInternal _DeviceProperty_default_instance_;
class DeviceValuePresentation;
class DeviceValuePresentationDefaultTypeInternal;
extern DeviceValuePresentationDefaultTypeInternal _DeviceValuePresentation_default_instance_;
class ExternalFileReference;
class ExternalFileReferenceDefaultTypeInternal;
extern ExternalFileReferenceDefaultTypeInternal _ExternalFileReference_default_instance_;
class Farm;
class FarmDefaultTypeInternal;
extern FarmDefaultTypeInternal _Farm_default_instance_;
class Grid;
class GridDefaultTypeInternal;
extern GridDefaultTypeInternal _Grid_default_instance_;
class GuidanceAllocation;
class GuidanceAllocationDefaultTypeInternal;
extern GuidanceAllocationDefaultTypeInternal _GuidanceAllocation_default_instance_;
class GuidanceGroup;
class GuidanceGroupDefaultTypeInternal;
extern GuidanceGroupDefaultTypeInternal _GuidanceGroup_default_instance_;
class GuidancePattern;
class GuidancePatternDefaultTypeInternal;
extern GuidancePatternDefaultTypeInternal _GuidancePattern_default_instance_;
class GuidanceShift;
class GuidanceShiftDefaultTypeInternal;
extern GuidanceShiftDefaultTypeInternal _GuidanceShift_default_instance_;
class ISO11783_TaskData;
class ISO11783_TaskDataDefaultTypeInternal;
extern ISO11783_TaskDataDefaultTypeInternal _ISO11783_TaskData_default_instance_;
class LineString;
class LineStringDefaultTypeInternal;
extern LineStringDefaultTypeInternal _LineString_default_instance_;
class OperTechPractice;
class OperTechPracticeDefaultTypeInternal;
extern OperTechPracticeDefaultTypeInternal _OperTechPractice_default_instance_;
class OperationTechnique;
class OperationTechniqueDefaultTypeInternal;
extern OperationTechniqueDefaultTypeInternal _OperationTechnique_default_instance_;
class OperationTechniqueReference;
class OperationTechniqueReferenceDefaultTypeInternal;
extern OperationTechniqueReferenceDefaultTypeInternal _OperationTechniqueReference_default_instance_;
class Partfield;
class PartfieldDefaultTypeInternal;
extern PartfieldDefaultTypeInternal _Partfield_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class ProcessDataVariable;
class ProcessDataVariableDefaultTypeInternal;
extern ProcessDataVariableDefaultTypeInternal _ProcessDataVariable_default_instance_;
class Product;
class ProductDefaultTypeInternal;
extern ProductDefaultTypeInternal _Product_default_instance_;
class ProductAllocation;
class ProductAllocationDefaultTypeInternal;
extern ProductAllocationDefaultTypeInternal _ProductAllocation_default_instance_;
class ProductGroup;
class ProductGroupDefaultTypeInternal;
extern ProductGroupDefaultTypeInternal _ProductGroup_default_instance_;
class ProductRelation;
class ProductRelationDefaultTypeInternal;
extern ProductRelationDefaultTypeInternal _ProductRelation_default_instance_;
class Task;
class TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class TaskControllerCapabilities;
class TaskControllerCapabilitiesDefaultTypeInternal;
extern TaskControllerCapabilitiesDefaultTypeInternal _TaskControllerCapabilities_default_instance_;
class Time;
class TimeDefaultTypeInternal;
extern TimeDefaultTypeInternal _Time_default_instance_;
class TimeDetHier;
class TimeDetHierDefaultTypeInternal;
extern TimeDetHierDefaultTypeInternal _TimeDetHier_default_instance_;
class TimeIntOnly;
class TimeIntOnlyDefaultTypeInternal;
extern TimeIntOnlyDefaultTypeInternal _TimeIntOnly_default_instance_;
class TimeLog;
class TimeLogDefaultTypeInternal;
extern TimeLogDefaultTypeInternal _TimeLog_default_instance_;
class TreatmentZone;
class TreatmentZoneDefaultTypeInternal;
extern TreatmentZoneDefaultTypeInternal _TreatmentZone_default_instance_;
class UID;
class UIDDefaultTypeInternal;
extern UIDDefaultTypeInternal _UID_default_instance_;
class ValuePresentation;
class ValuePresentationDefaultTypeInternal;
extern ValuePresentationDefaultTypeInternal _ValuePresentation_default_instance_;
class Worker;
class WorkerDefaultTypeInternal;
extern WorkerDefaultTypeInternal _Worker_default_instance_;
class WorkerAllocation;
class WorkerAllocationDefaultTypeInternal;
extern WorkerAllocationDefaultTypeInternal _WorkerAllocation_default_instance_;
}  // namespace efdi
namespace efdi {

enum AllocationStamp_AllocationStampType {
  AllocationStamp_AllocationStampType_D_NOTSET = 0,
  AllocationStamp_AllocationStampType_D_PLANNED = 1,
  AllocationStamp_AllocationStampType_D_EFFECTIVE = 4,
  AllocationStamp_AllocationStampType_AllocationStamp_AllocationStampType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AllocationStamp_AllocationStampType_AllocationStamp_AllocationStampType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AllocationStamp_AllocationStampType_IsValid(int value);
const AllocationStamp_AllocationStampType AllocationStamp_AllocationStampType_AllocationStampType_MIN = AllocationStamp_AllocationStampType_D_NOTSET;
const AllocationStamp_AllocationStampType AllocationStamp_AllocationStampType_AllocationStampType_MAX = AllocationStamp_AllocationStampType_D_EFFECTIVE;
const int AllocationStamp_AllocationStampType_AllocationStampType_ARRAYSIZE = AllocationStamp_AllocationStampType_AllocationStampType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AllocationStamp_AllocationStampType_descriptor();
inline const ::std::string& AllocationStamp_AllocationStampType_Name(AllocationStamp_AllocationStampType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AllocationStamp_AllocationStampType_descriptor(), value);
}
inline bool AllocationStamp_AllocationStampType_Parse(
    const ::std::string& name, AllocationStamp_AllocationStampType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AllocationStamp_AllocationStampType>(
    AllocationStamp_AllocationStampType_descriptor(), name, value);
}
enum AttachedFile_Preserve {
  AttachedFile_Preserve_B_NOTSET = 0,
  AttachedFile_Preserve_B_PRESERVE_NO = 1,
  AttachedFile_Preserve_B_PRESERVE_YES = 2,
  AttachedFile_Preserve_AttachedFile_Preserve_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AttachedFile_Preserve_AttachedFile_Preserve_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AttachedFile_Preserve_IsValid(int value);
const AttachedFile_Preserve AttachedFile_Preserve_Preserve_MIN = AttachedFile_Preserve_B_NOTSET;
const AttachedFile_Preserve AttachedFile_Preserve_Preserve_MAX = AttachedFile_Preserve_B_PRESERVE_YES;
const int AttachedFile_Preserve_Preserve_ARRAYSIZE = AttachedFile_Preserve_Preserve_MAX + 1;

const ::google::protobuf::EnumDescriptor* AttachedFile_Preserve_descriptor();
inline const ::std::string& AttachedFile_Preserve_Name(AttachedFile_Preserve value) {
  return ::google::protobuf::internal::NameOfEnum(
    AttachedFile_Preserve_descriptor(), value);
}
inline bool AttachedFile_Preserve_Parse(
    const ::std::string& name, AttachedFile_Preserve* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AttachedFile_Preserve>(
    AttachedFile_Preserve_descriptor(), name, value);
}
enum CodedComment_CodedCommentScope {
  CodedComment_CodedCommentScope_C_NOTSET = 0,
  CodedComment_CodedCommentScope_C_POINT = 1,
  CodedComment_CodedCommentScope_C_GLOBAL = 2,
  CodedComment_CodedCommentScope_C_CONTINUOUS = 3,
  CodedComment_CodedCommentScope_CodedComment_CodedCommentScope_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CodedComment_CodedCommentScope_CodedComment_CodedCommentScope_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CodedComment_CodedCommentScope_IsValid(int value);
const CodedComment_CodedCommentScope CodedComment_CodedCommentScope_CodedCommentScope_MIN = CodedComment_CodedCommentScope_C_NOTSET;
const CodedComment_CodedCommentScope CodedComment_CodedCommentScope_CodedCommentScope_MAX = CodedComment_CodedCommentScope_C_CONTINUOUS;
const int CodedComment_CodedCommentScope_CodedCommentScope_ARRAYSIZE = CodedComment_CodedCommentScope_CodedCommentScope_MAX + 1;

const ::google::protobuf::EnumDescriptor* CodedComment_CodedCommentScope_descriptor();
inline const ::std::string& CodedComment_CodedCommentScope_Name(CodedComment_CodedCommentScope value) {
  return ::google::protobuf::internal::NameOfEnum(
    CodedComment_CodedCommentScope_descriptor(), value);
}
inline bool CodedComment_CodedCommentScope_Parse(
    const ::std::string& name, CodedComment_CodedCommentScope* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CodedComment_CodedCommentScope>(
    CodedComment_CodedCommentScope_descriptor(), name, value);
}
enum DeviceElement_DeviceElementType {
  DeviceElement_DeviceElementType_C_NOTSET = 0,
  DeviceElement_DeviceElementType_C_DEVICE = 1,
  DeviceElement_DeviceElementType_C_FUNCTION = 2,
  DeviceElement_DeviceElementType_C_BIN = 3,
  DeviceElement_DeviceElementType_C_SECTION = 4,
  DeviceElement_DeviceElementType_C_UNIT = 5,
  DeviceElement_DeviceElementType_C_CONNECTOR = 6,
  DeviceElement_DeviceElementType_C_NAVIGATION = 7,
  DeviceElement_DeviceElementType_DeviceElement_DeviceElementType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DeviceElement_DeviceElementType_DeviceElement_DeviceElementType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DeviceElement_DeviceElementType_IsValid(int value);
const DeviceElement_DeviceElementType DeviceElement_DeviceElementType_DeviceElementType_MIN = DeviceElement_DeviceElementType_C_NOTSET;
const DeviceElement_DeviceElementType DeviceElement_DeviceElementType_DeviceElementType_MAX = DeviceElement_DeviceElementType_C_NAVIGATION;
const int DeviceElement_DeviceElementType_DeviceElementType_ARRAYSIZE = DeviceElement_DeviceElementType_DeviceElementType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DeviceElement_DeviceElementType_descriptor();
inline const ::std::string& DeviceElement_DeviceElementType_Name(DeviceElement_DeviceElementType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeviceElement_DeviceElementType_descriptor(), value);
}
inline bool DeviceElement_DeviceElementType_Parse(
    const ::std::string& name, DeviceElement_DeviceElementType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeviceElement_DeviceElementType>(
    DeviceElement_DeviceElementType_descriptor(), name, value);
}
enum Grid_GridType {
  Grid_GridType_I_NOTSET = 0,
  Grid_GridType_I_GRID_TYPE_1 = 1,
  Grid_GridType_I_GRID_TYPE_2 = 2,
  Grid_GridType_Grid_GridType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Grid_GridType_Grid_GridType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Grid_GridType_IsValid(int value);
const Grid_GridType Grid_GridType_GridType_MIN = Grid_GridType_I_NOTSET;
const Grid_GridType Grid_GridType_GridType_MAX = Grid_GridType_I_GRID_TYPE_2;
const int Grid_GridType_GridType_ARRAYSIZE = Grid_GridType_GridType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Grid_GridType_descriptor();
inline const ::std::string& Grid_GridType_Name(Grid_GridType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Grid_GridType_descriptor(), value);
}
inline bool Grid_GridType_Parse(
    const ::std::string& name, Grid_GridType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Grid_GridType>(
    Grid_GridType_descriptor(), name, value);
}
enum GuidancePattern_GuidancePatternType {
  GuidancePattern_GuidancePatternType_C_NOTSET = 0,
  GuidancePattern_GuidancePatternType_C_AB = 1,
  GuidancePattern_GuidancePatternType_C_A_PLUS = 2,
  GuidancePattern_GuidancePatternType_C_CURVE = 3,
  GuidancePattern_GuidancePatternType_C_PIVOT = 4,
  GuidancePattern_GuidancePatternType_C_SPIRAL = 5,
  GuidancePattern_GuidancePatternType_GuidancePattern_GuidancePatternType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GuidancePattern_GuidancePatternType_GuidancePattern_GuidancePatternType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GuidancePattern_GuidancePatternType_IsValid(int value);
const GuidancePattern_GuidancePatternType GuidancePattern_GuidancePatternType_GuidancePatternType_MIN = GuidancePattern_GuidancePatternType_C_NOTSET;
const GuidancePattern_GuidancePatternType GuidancePattern_GuidancePatternType_GuidancePatternType_MAX = GuidancePattern_GuidancePatternType_C_SPIRAL;
const int GuidancePattern_GuidancePatternType_GuidancePatternType_ARRAYSIZE = GuidancePattern_GuidancePatternType_GuidancePatternType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GuidancePattern_GuidancePatternType_descriptor();
inline const ::std::string& GuidancePattern_GuidancePatternType_Name(GuidancePattern_GuidancePatternType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GuidancePattern_GuidancePatternType_descriptor(), value);
}
inline bool GuidancePattern_GuidancePatternType_Parse(
    const ::std::string& name, GuidancePattern_GuidancePatternType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GuidancePattern_GuidancePatternType>(
    GuidancePattern_GuidancePatternType_descriptor(), name, value);
}
enum GuidancePattern_GuidancePatternOptions {
  GuidancePattern_GuidancePatternOptions_D_NOTSET = 0,
  GuidancePattern_GuidancePatternOptions_D_CLOCKWISE = 1,
  GuidancePattern_GuidancePatternOptions_D_COUNTER_CLOCKWISE = 2,
  GuidancePattern_GuidancePatternOptions_D_FULL_CIRCLE = 3,
  GuidancePattern_GuidancePatternOptions_GuidancePattern_GuidancePatternOptions_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GuidancePattern_GuidancePatternOptions_GuidancePattern_GuidancePatternOptions_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GuidancePattern_GuidancePatternOptions_IsValid(int value);
const GuidancePattern_GuidancePatternOptions GuidancePattern_GuidancePatternOptions_GuidancePatternOptions_MIN = GuidancePattern_GuidancePatternOptions_D_NOTSET;
const GuidancePattern_GuidancePatternOptions GuidancePattern_GuidancePatternOptions_GuidancePatternOptions_MAX = GuidancePattern_GuidancePatternOptions_D_FULL_CIRCLE;
const int GuidancePattern_GuidancePatternOptions_GuidancePatternOptions_ARRAYSIZE = GuidancePattern_GuidancePatternOptions_GuidancePatternOptions_MAX + 1;

const ::google::protobuf::EnumDescriptor* GuidancePattern_GuidancePatternOptions_descriptor();
inline const ::std::string& GuidancePattern_GuidancePatternOptions_Name(GuidancePattern_GuidancePatternOptions value) {
  return ::google::protobuf::internal::NameOfEnum(
    GuidancePattern_GuidancePatternOptions_descriptor(), value);
}
inline bool GuidancePattern_GuidancePatternOptions_Parse(
    const ::std::string& name, GuidancePattern_GuidancePatternOptions* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GuidancePattern_GuidancePatternOptions>(
    GuidancePattern_GuidancePatternOptions_descriptor(), name, value);
}
enum GuidancePattern_GuidancePatternPropagationDirection {
  GuidancePattern_GuidancePatternPropagationDirection_E_NOTSET = 0,
  GuidancePattern_GuidancePatternPropagationDirection_E_BOTH = 1,
  GuidancePattern_GuidancePatternPropagationDirection_E_LEFT = 2,
  GuidancePattern_GuidancePatternPropagationDirection_E_RIGHT = 3,
  GuidancePattern_GuidancePatternPropagationDirection_E_NO_PROP = 4,
  GuidancePattern_GuidancePatternPropagationDirection_GuidancePattern_GuidancePatternPropagationDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GuidancePattern_GuidancePatternPropagationDirection_GuidancePattern_GuidancePatternPropagationDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GuidancePattern_GuidancePatternPropagationDirection_IsValid(int value);
const GuidancePattern_GuidancePatternPropagationDirection GuidancePattern_GuidancePatternPropagationDirection_GuidancePatternPropagationDirection_MIN = GuidancePattern_GuidancePatternPropagationDirection_E_NOTSET;
const GuidancePattern_GuidancePatternPropagationDirection GuidancePattern_GuidancePatternPropagationDirection_GuidancePatternPropagationDirection_MAX = GuidancePattern_GuidancePatternPropagationDirection_E_NO_PROP;
const int GuidancePattern_GuidancePatternPropagationDirection_GuidancePatternPropagationDirection_ARRAYSIZE = GuidancePattern_GuidancePatternPropagationDirection_GuidancePatternPropagationDirection_MAX + 1;

const ::google::protobuf::EnumDescriptor* GuidancePattern_GuidancePatternPropagationDirection_descriptor();
inline const ::std::string& GuidancePattern_GuidancePatternPropagationDirection_Name(GuidancePattern_GuidancePatternPropagationDirection value) {
  return ::google::protobuf::internal::NameOfEnum(
    GuidancePattern_GuidancePatternPropagationDirection_descriptor(), value);
}
inline bool GuidancePattern_GuidancePatternPropagationDirection_Parse(
    const ::std::string& name, GuidancePattern_GuidancePatternPropagationDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GuidancePattern_GuidancePatternPropagationDirection>(
    GuidancePattern_GuidancePatternPropagationDirection_descriptor(), name, value);
}
enum GuidancePattern_GuidancePatternExtension {
  GuidancePattern_GuidancePatternExtension_F_NOTSET = 0,
  GuidancePattern_GuidancePatternExtension_F_BOTH = 1,
  GuidancePattern_GuidancePatternExtension_F_FIRST_ONLY = 2,
  GuidancePattern_GuidancePatternExtension_F_LAST_ONLY = 3,
  GuidancePattern_GuidancePatternExtension_F_NO_EXT = 4,
  GuidancePattern_GuidancePatternExtension_GuidancePattern_GuidancePatternExtension_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GuidancePattern_GuidancePatternExtension_GuidancePattern_GuidancePatternExtension_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GuidancePattern_GuidancePatternExtension_IsValid(int value);
const GuidancePattern_GuidancePatternExtension GuidancePattern_GuidancePatternExtension_GuidancePatternExtension_MIN = GuidancePattern_GuidancePatternExtension_F_NOTSET;
const GuidancePattern_GuidancePatternExtension GuidancePattern_GuidancePatternExtension_GuidancePatternExtension_MAX = GuidancePattern_GuidancePatternExtension_F_NO_EXT;
const int GuidancePattern_GuidancePatternExtension_GuidancePatternExtension_ARRAYSIZE = GuidancePattern_GuidancePatternExtension_GuidancePatternExtension_MAX + 1;

const ::google::protobuf::EnumDescriptor* GuidancePattern_GuidancePatternExtension_descriptor();
inline const ::std::string& GuidancePattern_GuidancePatternExtension_Name(GuidancePattern_GuidancePatternExtension value) {
  return ::google::protobuf::internal::NameOfEnum(
    GuidancePattern_GuidancePatternExtension_descriptor(), value);
}
inline bool GuidancePattern_GuidancePatternExtension_Parse(
    const ::std::string& name, GuidancePattern_GuidancePatternExtension* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GuidancePattern_GuidancePatternExtension>(
    GuidancePattern_GuidancePatternExtension_descriptor(), name, value);
}
enum GuidancePattern_GuidancePatternGNSSMethod {
  GuidancePattern_GuidancePatternGNSSMethod_I_NOTSET = 0,
  GuidancePattern_GuidancePatternGNSSMethod_I_GNSS_FIX = 1,
  GuidancePattern_GuidancePatternGNSSMethod_I_DGNSS_FIX = 2,
  GuidancePattern_GuidancePatternGNSSMethod_I_PRECISE_GNSS = 3,
  GuidancePattern_GuidancePatternGNSSMethod_I_RTK_FIXED_INTEGER = 4,
  GuidancePattern_GuidancePatternGNSSMethod_I_RTK_FLOAT = 5,
  GuidancePattern_GuidancePatternGNSSMethod_I_ESTIMATED_DR_MODE = 6,
  GuidancePattern_GuidancePatternGNSSMethod_I_MANUAL_INPUT = 7,
  GuidancePattern_GuidancePatternGNSSMethod_I_SIMULATE_MODE = 8,
  GuidancePattern_GuidancePatternGNSSMethod_I_DESKTOP_GENERATED_DATA = 16,
  GuidancePattern_GuidancePatternGNSSMethod_I_OTHER = 17,
  GuidancePattern_GuidancePatternGNSSMethod_GuidancePattern_GuidancePatternGNSSMethod_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GuidancePattern_GuidancePatternGNSSMethod_GuidancePattern_GuidancePatternGNSSMethod_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GuidancePattern_GuidancePatternGNSSMethod_IsValid(int value);
const GuidancePattern_GuidancePatternGNSSMethod GuidancePattern_GuidancePatternGNSSMethod_GuidancePatternGNSSMethod_MIN = GuidancePattern_GuidancePatternGNSSMethod_I_NOTSET;
const GuidancePattern_GuidancePatternGNSSMethod GuidancePattern_GuidancePatternGNSSMethod_GuidancePatternGNSSMethod_MAX = GuidancePattern_GuidancePatternGNSSMethod_I_OTHER;
const int GuidancePattern_GuidancePatternGNSSMethod_GuidancePatternGNSSMethod_ARRAYSIZE = GuidancePattern_GuidancePatternGNSSMethod_GuidancePatternGNSSMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* GuidancePattern_GuidancePatternGNSSMethod_descriptor();
inline const ::std::string& GuidancePattern_GuidancePatternGNSSMethod_Name(GuidancePattern_GuidancePatternGNSSMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    GuidancePattern_GuidancePatternGNSSMethod_descriptor(), value);
}
inline bool GuidancePattern_GuidancePatternGNSSMethod_Parse(
    const ::std::string& name, GuidancePattern_GuidancePatternGNSSMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GuidancePattern_GuidancePatternGNSSMethod>(
    GuidancePattern_GuidancePatternGNSSMethod_descriptor(), name, value);
}
enum ISO11783_TaskData_VersionMajor {
  ISO11783_TaskData_VersionMajor_VERSION_MAJOR_DIS = 0,
  ISO11783_TaskData_VersionMajor_VERSION_MAJOR_FDIS_1 = 1,
  ISO11783_TaskData_VersionMajor_VERSION_MAJOR_FDIS_2 = 2,
  ISO11783_TaskData_VersionMajor_VERSION_MAJOR_E2_DIS = 3,
  ISO11783_TaskData_VersionMajor_VERSION_MAJOR_E2_FDIS = 4,
  ISO11783_TaskData_VersionMajor_ISO11783_TaskData_VersionMajor_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ISO11783_TaskData_VersionMajor_ISO11783_TaskData_VersionMajor_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ISO11783_TaskData_VersionMajor_IsValid(int value);
const ISO11783_TaskData_VersionMajor ISO11783_TaskData_VersionMajor_VersionMajor_MIN = ISO11783_TaskData_VersionMajor_VERSION_MAJOR_DIS;
const ISO11783_TaskData_VersionMajor ISO11783_TaskData_VersionMajor_VersionMajor_MAX = ISO11783_TaskData_VersionMajor_VERSION_MAJOR_E2_FDIS;
const int ISO11783_TaskData_VersionMajor_VersionMajor_ARRAYSIZE = ISO11783_TaskData_VersionMajor_VersionMajor_MAX + 1;

const ::google::protobuf::EnumDescriptor* ISO11783_TaskData_VersionMajor_descriptor();
inline const ::std::string& ISO11783_TaskData_VersionMajor_Name(ISO11783_TaskData_VersionMajor value) {
  return ::google::protobuf::internal::NameOfEnum(
    ISO11783_TaskData_VersionMajor_descriptor(), value);
}
inline bool ISO11783_TaskData_VersionMajor_Parse(
    const ::std::string& name, ISO11783_TaskData_VersionMajor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ISO11783_TaskData_VersionMajor>(
    ISO11783_TaskData_VersionMajor_descriptor(), name, value);
}
enum ISO11783_TaskData_DataTransferOrigin {
  ISO11783_TaskData_DataTransferOrigin_DATA_TRANSFER_ORIGIN_NOTSET = 0,
  ISO11783_TaskData_DataTransferOrigin_DATA_TRANSFER_ORIGIN_FMIS = 1,
  ISO11783_TaskData_DataTransferOrigin_DATA_TRANSFER_ORIGIN_MICS = 2,
  ISO11783_TaskData_DataTransferOrigin_ISO11783_TaskData_DataTransferOrigin_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ISO11783_TaskData_DataTransferOrigin_ISO11783_TaskData_DataTransferOrigin_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ISO11783_TaskData_DataTransferOrigin_IsValid(int value);
const ISO11783_TaskData_DataTransferOrigin ISO11783_TaskData_DataTransferOrigin_DataTransferOrigin_MIN = ISO11783_TaskData_DataTransferOrigin_DATA_TRANSFER_ORIGIN_NOTSET;
const ISO11783_TaskData_DataTransferOrigin ISO11783_TaskData_DataTransferOrigin_DataTransferOrigin_MAX = ISO11783_TaskData_DataTransferOrigin_DATA_TRANSFER_ORIGIN_MICS;
const int ISO11783_TaskData_DataTransferOrigin_DataTransferOrigin_ARRAYSIZE = ISO11783_TaskData_DataTransferOrigin_DataTransferOrigin_MAX + 1;

const ::google::protobuf::EnumDescriptor* ISO11783_TaskData_DataTransferOrigin_descriptor();
inline const ::std::string& ISO11783_TaskData_DataTransferOrigin_Name(ISO11783_TaskData_DataTransferOrigin value) {
  return ::google::protobuf::internal::NameOfEnum(
    ISO11783_TaskData_DataTransferOrigin_descriptor(), value);
}
inline bool ISO11783_TaskData_DataTransferOrigin_Parse(
    const ::std::string& name, ISO11783_TaskData_DataTransferOrigin* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ISO11783_TaskData_DataTransferOrigin>(
    ISO11783_TaskData_DataTransferOrigin_descriptor(), name, value);
}
enum LineString_LinestringType {
  LineString_LinestringType_A_NOTSET = 0,
  LineString_LinestringType_A_POLYGON_EXTERIOR = 1,
  LineString_LinestringType_A_POLYGON_INTERIOR = 2,
  LineString_LinestringType_A_TRAM_LINE = 3,
  LineString_LinestringType_A_SAMPLING_ROUTE = 4,
  LineString_LinestringType_A_GUIDANCE_PATTERN = 5,
  LineString_LinestringType_A_DRAINAGE = 6,
  LineString_LinestringType_A_FENCE = 7,
  LineString_LinestringType_A_FLAG = 8,
  LineString_LinestringType_A_OBSTACLE = 9,
  LineString_LinestringType_LineString_LinestringType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LineString_LinestringType_LineString_LinestringType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LineString_LinestringType_IsValid(int value);
const LineString_LinestringType LineString_LinestringType_LinestringType_MIN = LineString_LinestringType_A_NOTSET;
const LineString_LinestringType LineString_LinestringType_LinestringType_MAX = LineString_LinestringType_A_OBSTACLE;
const int LineString_LinestringType_LinestringType_ARRAYSIZE = LineString_LinestringType_LinestringType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LineString_LinestringType_descriptor();
inline const ::std::string& LineString_LinestringType_Name(LineString_LinestringType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LineString_LinestringType_descriptor(), value);
}
inline bool LineString_LinestringType_Parse(
    const ::std::string& name, LineString_LinestringType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LineString_LinestringType>(
    LineString_LinestringType_descriptor(), name, value);
}
enum Point_PointType {
  Point_PointType_A_NOTSET = 0,
  Point_PointType_A_FLAG = 1,
  Point_PointType_A_OTHER = 2,
  Point_PointType_A_FIELD_ACCESS = 3,
  Point_PointType_A_STORAGE = 4,
  Point_PointType_A_OBSTACLE = 5,
  Point_PointType_A_GUID_REF_A = 6,
  Point_PointType_A_GUID_REF_B = 7,
  Point_PointType_A_GUID_REF_CENTER = 8,
  Point_PointType_A_GUID_POINT = 9,
  Point_PointType_A_PARTFIELD_REF_POINT = 10,
  Point_PointType_A_HOMEBASE = 11,
  Point_PointType_Point_PointType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Point_PointType_Point_PointType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Point_PointType_IsValid(int value);
const Point_PointType Point_PointType_PointType_MIN = Point_PointType_A_NOTSET;
const Point_PointType Point_PointType_PointType_MAX = Point_PointType_A_HOMEBASE;
const int Point_PointType_PointType_ARRAYSIZE = Point_PointType_PointType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Point_PointType_descriptor();
inline const ::std::string& Point_PointType_Name(Point_PointType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Point_PointType_descriptor(), value);
}
inline bool Point_PointType_Parse(
    const ::std::string& name, Point_PointType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Point_PointType>(
    Point_PointType_descriptor(), name, value);
}
enum Polygon_PolygonType {
  Polygon_PolygonType_A_NOTSET = 0,
  Polygon_PolygonType_A_PARTFIELD_BOUNDARY = 1,
  Polygon_PolygonType_A_TREATMENT_ZONE = 2,
  Polygon_PolygonType_A_WATER_SURFACE = 3,
  Polygon_PolygonType_A_BUILDING = 4,
  Polygon_PolygonType_A_ROAD = 5,
  Polygon_PolygonType_A_OBSTACLE = 6,
  Polygon_PolygonType_A_FLAG = 7,
  Polygon_PolygonType_A_OTHER = 8,
  Polygon_PolygonType_A_MAINFIELD = 9,
  Polygon_PolygonType_A_HEADLAND = 10,
  Polygon_PolygonType_A_BUFFER_ZONE = 11,
  Polygon_PolygonType_A_WINDBREAK = 12,
  Polygon_PolygonType_Polygon_PolygonType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Polygon_PolygonType_Polygon_PolygonType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Polygon_PolygonType_IsValid(int value);
const Polygon_PolygonType Polygon_PolygonType_PolygonType_MIN = Polygon_PolygonType_A_NOTSET;
const Polygon_PolygonType Polygon_PolygonType_PolygonType_MAX = Polygon_PolygonType_A_WINDBREAK;
const int Polygon_PolygonType_PolygonType_ARRAYSIZE = Polygon_PolygonType_PolygonType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Polygon_PolygonType_descriptor();
inline const ::std::string& Polygon_PolygonType_Name(Polygon_PolygonType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Polygon_PolygonType_descriptor(), value);
}
inline bool Polygon_PolygonType_Parse(
    const ::std::string& name, Polygon_PolygonType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Polygon_PolygonType>(
    Polygon_PolygonType_descriptor(), name, value);
}
enum Position_PositionStatus {
  Position_PositionStatus_D_NO_GPS = 0,
  Position_PositionStatus_D_GNSS = 1,
  Position_PositionStatus_D_DGNSS = 2,
  Position_PositionStatus_D_PRECISE_GNSS = 3,
  Position_PositionStatus_D_RTK_FINTEGER = 4,
  Position_PositionStatus_D_RTK_FLOAT = 5,
  Position_PositionStatus_D_EST_DR_MODE = 6,
  Position_PositionStatus_D_MANUAL_INPUT = 7,
  Position_PositionStatus_D_SIMULATE_MODE = 8,
  Position_PositionStatus_D_ERROR = 14,
  Position_PositionStatus_D_NOT_AVAILABLE = 15,
  Position_PositionStatus_Position_PositionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Position_PositionStatus_Position_PositionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Position_PositionStatus_IsValid(int value);
const Position_PositionStatus Position_PositionStatus_PositionStatus_MIN = Position_PositionStatus_D_NO_GPS;
const Position_PositionStatus Position_PositionStatus_PositionStatus_MAX = Position_PositionStatus_D_NOT_AVAILABLE;
const int Position_PositionStatus_PositionStatus_ARRAYSIZE = Position_PositionStatus_PositionStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* Position_PositionStatus_descriptor();
inline const ::std::string& Position_PositionStatus_Name(Position_PositionStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    Position_PositionStatus_descriptor(), value);
}
inline bool Position_PositionStatus_Parse(
    const ::std::string& name, Position_PositionStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Position_PositionStatus>(
    Position_PositionStatus_descriptor(), name, value);
}
enum Product_ProductType {
  Product_ProductType_F_NOTSET = 0,
  Product_ProductType_F_SINGLE = 1,
  Product_ProductType_F_MIXTURE = 2,
  Product_ProductType_F_TEMPORARY_MIXTURE = 3,
  Product_ProductType_Product_ProductType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Product_ProductType_Product_ProductType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Product_ProductType_IsValid(int value);
const Product_ProductType Product_ProductType_ProductType_MIN = Product_ProductType_F_NOTSET;
const Product_ProductType Product_ProductType_ProductType_MAX = Product_ProductType_F_TEMPORARY_MIXTURE;
const int Product_ProductType_ProductType_ARRAYSIZE = Product_ProductType_ProductType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Product_ProductType_descriptor();
inline const ::std::string& Product_ProductType_Name(Product_ProductType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Product_ProductType_descriptor(), value);
}
inline bool Product_ProductType_Parse(
    const ::std::string& name, Product_ProductType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Product_ProductType>(
    Product_ProductType_descriptor(), name, value);
}
enum ProductAllocation_TransferMode {
  ProductAllocation_TransferMode_D_NOTSET = 0,
  ProductAllocation_TransferMode_D_FILLING = 1,
  ProductAllocation_TransferMode_D_EMPTYING = 2,
  ProductAllocation_TransferMode_D_REMAINDER = 3,
  ProductAllocation_TransferMode_ProductAllocation_TransferMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ProductAllocation_TransferMode_ProductAllocation_TransferMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ProductAllocation_TransferMode_IsValid(int value);
const ProductAllocation_TransferMode ProductAllocation_TransferMode_TransferMode_MIN = ProductAllocation_TransferMode_D_NOTSET;
const ProductAllocation_TransferMode ProductAllocation_TransferMode_TransferMode_MAX = ProductAllocation_TransferMode_D_REMAINDER;
const int ProductAllocation_TransferMode_TransferMode_ARRAYSIZE = ProductAllocation_TransferMode_TransferMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProductAllocation_TransferMode_descriptor();
inline const ::std::string& ProductAllocation_TransferMode_Name(ProductAllocation_TransferMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProductAllocation_TransferMode_descriptor(), value);
}
inline bool ProductAllocation_TransferMode_Parse(
    const ::std::string& name, ProductAllocation_TransferMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProductAllocation_TransferMode>(
    ProductAllocation_TransferMode_descriptor(), name, value);
}
enum ProductGroup_ProductGroupType {
  ProductGroup_ProductGroupType_C_NOTSET = 0,
  ProductGroup_ProductGroupType_C_PRODUCT_GROUP = 1,
  ProductGroup_ProductGroupType_C_CROP_TYPE = 2,
  ProductGroup_ProductGroupType_ProductGroup_ProductGroupType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ProductGroup_ProductGroupType_ProductGroup_ProductGroupType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ProductGroup_ProductGroupType_IsValid(int value);
const ProductGroup_ProductGroupType ProductGroup_ProductGroupType_ProductGroupType_MIN = ProductGroup_ProductGroupType_C_NOTSET;
const ProductGroup_ProductGroupType ProductGroup_ProductGroupType_ProductGroupType_MAX = ProductGroup_ProductGroupType_C_CROP_TYPE;
const int ProductGroup_ProductGroupType_ProductGroupType_ARRAYSIZE = ProductGroup_ProductGroupType_ProductGroupType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProductGroup_ProductGroupType_descriptor();
inline const ::std::string& ProductGroup_ProductGroupType_Name(ProductGroup_ProductGroupType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProductGroup_ProductGroupType_descriptor(), value);
}
inline bool ProductGroup_ProductGroupType_Parse(
    const ::std::string& name, ProductGroup_ProductGroupType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProductGroup_ProductGroupType>(
    ProductGroup_ProductGroupType_descriptor(), name, value);
}
enum Task_TaskStatus {
  Task_TaskStatus_G_NOTSET = 0,
  Task_TaskStatus_G_PLANNED = 1,
  Task_TaskStatus_G_RUNNING = 2,
  Task_TaskStatus_G_PAUSED = 3,
  Task_TaskStatus_G_COMPLETED = 4,
  Task_TaskStatus_G_TEMPLATE = 5,
  Task_TaskStatus_G_CANCELED = 6,
  Task_TaskStatus_Task_TaskStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Task_TaskStatus_Task_TaskStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Task_TaskStatus_IsValid(int value);
const Task_TaskStatus Task_TaskStatus_TaskStatus_MIN = Task_TaskStatus_G_NOTSET;
const Task_TaskStatus Task_TaskStatus_TaskStatus_MAX = Task_TaskStatus_G_CANCELED;
const int Task_TaskStatus_TaskStatus_ARRAYSIZE = Task_TaskStatus_TaskStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* Task_TaskStatus_descriptor();
inline const ::std::string& Task_TaskStatus_Name(Task_TaskStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    Task_TaskStatus_descriptor(), value);
}
inline bool Task_TaskStatus_Parse(
    const ::std::string& name, Task_TaskStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Task_TaskStatus>(
    Task_TaskStatus_descriptor(), name, value);
}
enum TaskControllerCapabilities_VersionNumber {
  TaskControllerCapabilities_VersionNumber_C_DIS = 0,
  TaskControllerCapabilities_VersionNumber_C_FDIS_1 = 1,
  TaskControllerCapabilities_VersionNumber_C_FDIS_2 = 2,
  TaskControllerCapabilities_VersionNumber_C_E2_DIS = 3,
  TaskControllerCapabilities_VersionNumber_C_E2_FDIS = 4,
  TaskControllerCapabilities_VersionNumber_TaskControllerCapabilities_VersionNumber_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TaskControllerCapabilities_VersionNumber_TaskControllerCapabilities_VersionNumber_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TaskControllerCapabilities_VersionNumber_IsValid(int value);
const TaskControllerCapabilities_VersionNumber TaskControllerCapabilities_VersionNumber_VersionNumber_MIN = TaskControllerCapabilities_VersionNumber_C_DIS;
const TaskControllerCapabilities_VersionNumber TaskControllerCapabilities_VersionNumber_VersionNumber_MAX = TaskControllerCapabilities_VersionNumber_C_E2_FDIS;
const int TaskControllerCapabilities_VersionNumber_VersionNumber_ARRAYSIZE = TaskControllerCapabilities_VersionNumber_VersionNumber_MAX + 1;

const ::google::protobuf::EnumDescriptor* TaskControllerCapabilities_VersionNumber_descriptor();
inline const ::std::string& TaskControllerCapabilities_VersionNumber_Name(TaskControllerCapabilities_VersionNumber value) {
  return ::google::protobuf::internal::NameOfEnum(
    TaskControllerCapabilities_VersionNumber_descriptor(), value);
}
inline bool TaskControllerCapabilities_VersionNumber_Parse(
    const ::std::string& name, TaskControllerCapabilities_VersionNumber* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskControllerCapabilities_VersionNumber>(
    TaskControllerCapabilities_VersionNumber_descriptor(), name, value);
}
enum Time_TimeType {
  Time_TimeType_D_NOTSET = 0,
  Time_TimeType_D_PLANNED = 1,
  Time_TimeType_D_PRELIMINARY = 2,
  Time_TimeType_D_EFFECTIVE = 4,
  Time_TimeType_D_INEFFECTIVE = 5,
  Time_TimeType_D_REPAIR = 6,
  Time_TimeType_D_CLEARING = 7,
  Time_TimeType_D_POWERED_DOWN = 8,
  Time_TimeType_Time_TimeType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Time_TimeType_Time_TimeType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Time_TimeType_IsValid(int value);
const Time_TimeType Time_TimeType_TimeType_MIN = Time_TimeType_D_NOTSET;
const Time_TimeType Time_TimeType_TimeType_MAX = Time_TimeType_D_POWERED_DOWN;
const int Time_TimeType_TimeType_ARRAYSIZE = Time_TimeType_TimeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Time_TimeType_descriptor();
inline const ::std::string& Time_TimeType_Name(Time_TimeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Time_TimeType_descriptor(), value);
}
inline bool Time_TimeType_Parse(
    const ::std::string& name, Time_TimeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Time_TimeType>(
    Time_TimeType_descriptor(), name, value);
}
enum TimeIntOnly_TimeType {
  TimeIntOnly_TimeType_D_NOTSET = 0,
  TimeIntOnly_TimeType_D_PLANNED = 1,
  TimeIntOnly_TimeType_D_PRELIMINARY = 2,
  TimeIntOnly_TimeType_D_PREPARATION = 3,
  TimeIntOnly_TimeType_D_EFFECTIVE = 4,
  TimeIntOnly_TimeType_D_INEFFECTIVE = 5,
  TimeIntOnly_TimeType_D_REPAIR = 6,
  TimeIntOnly_TimeType_D_CLEARING = 7,
  TimeIntOnly_TimeType_D_POWERED_DOWN = 8,
  TimeIntOnly_TimeType_TimeIntOnly_TimeType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TimeIntOnly_TimeType_TimeIntOnly_TimeType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TimeIntOnly_TimeType_IsValid(int value);
const TimeIntOnly_TimeType TimeIntOnly_TimeType_TimeType_MIN = TimeIntOnly_TimeType_D_NOTSET;
const TimeIntOnly_TimeType TimeIntOnly_TimeType_TimeType_MAX = TimeIntOnly_TimeType_D_POWERED_DOWN;
const int TimeIntOnly_TimeType_TimeType_ARRAYSIZE = TimeIntOnly_TimeType_TimeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TimeIntOnly_TimeType_descriptor();
inline const ::std::string& TimeIntOnly_TimeType_Name(TimeIntOnly_TimeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TimeIntOnly_TimeType_descriptor(), value);
}
inline bool TimeIntOnly_TimeType_Parse(
    const ::std::string& name, TimeIntOnly_TimeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TimeIntOnly_TimeType>(
    TimeIntOnly_TimeType_descriptor(), name, value);
}
enum TimeDetHier_TimeType {
  TimeDetHier_TimeType_D_NOTSET = 0,
  TimeDetHier_TimeType_D_PLANNED = 1,
  TimeDetHier_TimeType_D_PRELIMINARY = 2,
  TimeDetHier_TimeType_D_PREPARATION = 3,
  TimeDetHier_TimeType_D_EFFECTIVE = 4,
  TimeDetHier_TimeType_D_INEFFECTIVE = 5,
  TimeDetHier_TimeType_D_REPAIR = 6,
  TimeDetHier_TimeType_D_CLEARING = 7,
  TimeDetHier_TimeType_D_POWERED_DOWN = 8,
  TimeDetHier_TimeType_TimeDetHier_TimeType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TimeDetHier_TimeType_TimeDetHier_TimeType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TimeDetHier_TimeType_IsValid(int value);
const TimeDetHier_TimeType TimeDetHier_TimeType_TimeType_MIN = TimeDetHier_TimeType_D_NOTSET;
const TimeDetHier_TimeType TimeDetHier_TimeType_TimeType_MAX = TimeDetHier_TimeType_D_POWERED_DOWN;
const int TimeDetHier_TimeType_TimeType_ARRAYSIZE = TimeDetHier_TimeType_TimeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TimeDetHier_TimeType_descriptor();
inline const ::std::string& TimeDetHier_TimeType_Name(TimeDetHier_TimeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TimeDetHier_TimeType_descriptor(), value);
}
inline bool TimeDetHier_TimeType_Parse(
    const ::std::string& name, TimeDetHier_TimeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TimeDetHier_TimeType>(
    TimeDetHier_TimeType_descriptor(), name, value);
}
enum TimeLog_TimeLogType {
  TimeLog_TimeLogType_C_NOTSET = 0,
  TimeLog_TimeLogType_C_BINARY_TIMELOG = 1,
  TimeLog_TimeLogType_TimeLog_TimeLogType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TimeLog_TimeLogType_TimeLog_TimeLogType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TimeLog_TimeLogType_IsValid(int value);
const TimeLog_TimeLogType TimeLog_TimeLogType_TimeLogType_MIN = TimeLog_TimeLogType_C_NOTSET;
const TimeLog_TimeLogType TimeLog_TimeLogType_TimeLogType_MAX = TimeLog_TimeLogType_C_BINARY_TIMELOG;
const int TimeLog_TimeLogType_TimeLogType_ARRAYSIZE = TimeLog_TimeLogType_TimeLogType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TimeLog_TimeLogType_descriptor();
inline const ::std::string& TimeLog_TimeLogType_Name(TimeLog_TimeLogType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TimeLog_TimeLogType_descriptor(), value);
}
inline bool TimeLog_TimeLogType_Parse(
    const ::std::string& name, TimeLog_TimeLogType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TimeLog_TimeLogType>(
    TimeLog_TimeLogType_descriptor(), name, value);
}
enum ExternalFileReference_FileType {
  ExternalFileReference_FileType_B_NOTSET = 0,
  ExternalFileReference_FileType_B_XML = 1,
  ExternalFileReference_FileType_ExternalFileReference_FileType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ExternalFileReference_FileType_ExternalFileReference_FileType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ExternalFileReference_FileType_IsValid(int value);
const ExternalFileReference_FileType ExternalFileReference_FileType_FileType_MIN = ExternalFileReference_FileType_B_NOTSET;
const ExternalFileReference_FileType ExternalFileReference_FileType_FileType_MAX = ExternalFileReference_FileType_B_XML;
const int ExternalFileReference_FileType_FileType_ARRAYSIZE = ExternalFileReference_FileType_FileType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExternalFileReference_FileType_descriptor();
inline const ::std::string& ExternalFileReference_FileType_Name(ExternalFileReference_FileType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExternalFileReference_FileType_descriptor(), value);
}
inline bool ExternalFileReference_FileType_Parse(
    const ::std::string& name, ExternalFileReference_FileType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExternalFileReference_FileType>(
    ExternalFileReference_FileType_descriptor(), name, value);
}
enum UIDHead {
  NOTSET = 0,
  BSN = 1,
  CCG = 2,
  CCL = 3,
  CCT = 4,
  CLD = 5,
  CPC = 6,
  CTP = 7,
  CTR = 8,
  CVT = 9,
  DET = 10,
  DVC = 11,
  FRM = 12,
  GGP = 13,
  GPN = 14,
  GRD = 15,
  LGP = 16,
  LSG = 17,
  OTQ = 18,
  PDT = 19,
  PFD = 20,
  PGP = 21,
  PLN = 22,
  PNT = 23,
  TSK = 24,
  VPN = 25,
  WKR = 26,
  UIDHead_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  UIDHead_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool UIDHead_IsValid(int value);
const UIDHead UIDHead_MIN = NOTSET;
const UIDHead UIDHead_MAX = WKR;
const int UIDHead_ARRAYSIZE = UIDHead_MAX + 1;

const ::google::protobuf::EnumDescriptor* UIDHead_descriptor();
inline const ::std::string& UIDHead_Name(UIDHead value) {
  return ::google::protobuf::internal::NameOfEnum(
    UIDHead_descriptor(), value);
}
inline bool UIDHead_Parse(
    const ::std::string& name, UIDHead* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UIDHead>(
    UIDHead_descriptor(), name, value);
}
// ===================================================================

class UID : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.UID) */ {
 public:
  UID();
  virtual ~UID();

  UID(const UID& from);

  inline UID& operator=(const UID& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UID(UID&& from) noexcept
    : UID() {
    *this = ::std::move(from);
  }

  inline UID& operator=(UID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UID* internal_default_instance() {
    return reinterpret_cast<const UID*>(
               &_UID_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(UID* other);
  friend void swap(UID& a, UID& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UID* New() const PROTOBUF_FINAL { return New(NULL); }

  UID* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UID& from);
  void MergeFrom(const UID& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // sint64 number = 2;
  void clear_number();
  static const int kNumberFieldNumber = 2;
  ::google::protobuf::int64 number() const;
  void set_number(::google::protobuf::int64 value);

  // .efdi.UIDHead head = 1;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  ::efdi::UIDHead head() const;
  void set_head(::efdi::UIDHead value);

  // @@protoc_insertion_point(class_scope:efdi.UID)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 number_;
  int head_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsUIDImpl();
};
// -------------------------------------------------------------------

class AllocationStamp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.AllocationStamp) */ {
 public:
  AllocationStamp();
  virtual ~AllocationStamp();

  AllocationStamp(const AllocationStamp& from);

  inline AllocationStamp& operator=(const AllocationStamp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllocationStamp(AllocationStamp&& from) noexcept
    : AllocationStamp() {
    *this = ::std::move(from);
  }

  inline AllocationStamp& operator=(AllocationStamp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllocationStamp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllocationStamp* internal_default_instance() {
    return reinterpret_cast<const AllocationStamp*>(
               &_AllocationStamp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(AllocationStamp* other);
  friend void swap(AllocationStamp& a, AllocationStamp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllocationStamp* New() const PROTOBUF_FINAL { return New(NULL); }

  AllocationStamp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AllocationStamp& from);
  void MergeFrom(const AllocationStamp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AllocationStamp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef AllocationStamp_AllocationStampType AllocationStampType;
  static const AllocationStampType D_NOTSET =
    AllocationStamp_AllocationStampType_D_NOTSET;
  static const AllocationStampType D_PLANNED =
    AllocationStamp_AllocationStampType_D_PLANNED;
  static const AllocationStampType D_EFFECTIVE =
    AllocationStamp_AllocationStampType_D_EFFECTIVE;
  static inline bool AllocationStampType_IsValid(int value) {
    return AllocationStamp_AllocationStampType_IsValid(value);
  }
  static const AllocationStampType AllocationStampType_MIN =
    AllocationStamp_AllocationStampType_AllocationStampType_MIN;
  static const AllocationStampType AllocationStampType_MAX =
    AllocationStamp_AllocationStampType_AllocationStampType_MAX;
  static const int AllocationStampType_ARRAYSIZE =
    AllocationStamp_AllocationStampType_AllocationStampType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AllocationStampType_descriptor() {
    return AllocationStamp_AllocationStampType_descriptor();
  }
  static inline const ::std::string& AllocationStampType_Name(AllocationStampType value) {
    return AllocationStamp_AllocationStampType_Name(value);
  }
  static inline bool AllocationStampType_Parse(const ::std::string& name,
      AllocationStampType* value) {
    return AllocationStamp_AllocationStampType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .efdi.Position position = 5;
  int position_size() const;
  void clear_position();
  static const int kPositionFieldNumber = 5;
  const ::efdi::Position& position(int index) const;
  ::efdi::Position* mutable_position(int index);
  ::efdi::Position* add_position();
  ::google::protobuf::RepeatedPtrField< ::efdi::Position >*
      mutable_position();
  const ::google::protobuf::RepeatedPtrField< ::efdi::Position >&
      position() const;

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // .google.protobuf.Timestamp start = 1;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 1;
  const ::google::protobuf::Timestamp& start() const;
  ::google::protobuf::Timestamp* release_start();
  ::google::protobuf::Timestamp* mutable_start();
  void set_allocated_start(::google::protobuf::Timestamp* start);

  // .google.protobuf.Timestamp stop = 2;
  bool has_stop() const;
  void clear_stop();
  static const int kStopFieldNumber = 2;
  const ::google::protobuf::Timestamp& stop() const;
  ::google::protobuf::Timestamp* release_stop();
  ::google::protobuf::Timestamp* mutable_stop();
  void set_allocated_stop(::google::protobuf::Timestamp* stop);

  // uint64 duration = 3;
  void clear_duration();
  static const int kDurationFieldNumber = 3;
  ::google::protobuf::uint64 duration() const;
  void set_duration(::google::protobuf::uint64 value);

  // .efdi.AllocationStamp.AllocationStampType type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::efdi::AllocationStamp_AllocationStampType type() const;
  void set_type(::efdi::AllocationStamp_AllocationStampType value);

  // @@protoc_insertion_point(class_scope:efdi.AllocationStamp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::efdi::Position > position_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::Timestamp* start_;
  ::google::protobuf::Timestamp* stop_;
  ::google::protobuf::uint64 duration_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsAllocationStampImpl();
};
// -------------------------------------------------------------------

class AttachedFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.AttachedFile) */ {
 public:
  AttachedFile();
  virtual ~AttachedFile();

  AttachedFile(const AttachedFile& from);

  inline AttachedFile& operator=(const AttachedFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AttachedFile(AttachedFile&& from) noexcept
    : AttachedFile() {
    *this = ::std::move(from);
  }

  inline AttachedFile& operator=(AttachedFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AttachedFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttachedFile* internal_default_instance() {
    return reinterpret_cast<const AttachedFile*>(
               &_AttachedFile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(AttachedFile* other);
  friend void swap(AttachedFile& a, AttachedFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AttachedFile* New() const PROTOBUF_FINAL { return New(NULL); }

  AttachedFile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AttachedFile& from);
  void MergeFrom(const AttachedFile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AttachedFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef AttachedFile_Preserve Preserve;
  static const Preserve B_NOTSET =
    AttachedFile_Preserve_B_NOTSET;
  static const Preserve B_PRESERVE_NO =
    AttachedFile_Preserve_B_PRESERVE_NO;
  static const Preserve B_PRESERVE_YES =
    AttachedFile_Preserve_B_PRESERVE_YES;
  static inline bool Preserve_IsValid(int value) {
    return AttachedFile_Preserve_IsValid(value);
  }
  static const Preserve Preserve_MIN =
    AttachedFile_Preserve_Preserve_MIN;
  static const Preserve Preserve_MAX =
    AttachedFile_Preserve_Preserve_MAX;
  static const int Preserve_ARRAYSIZE =
    AttachedFile_Preserve_Preserve_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Preserve_descriptor() {
    return AttachedFile_Preserve_descriptor();
  }
  static inline const ::std::string& Preserve_Name(Preserve value) {
    return AttachedFile_Preserve_Name(value);
  }
  static inline bool Preserve_Parse(const ::std::string& name,
      Preserve* value) {
    return AttachedFile_Preserve_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string manufacturer_gln = 3;
  void clear_manufacturer_gln();
  static const int kManufacturerGlnFieldNumber = 3;
  const ::std::string& manufacturer_gln() const;
  void set_manufacturer_gln(const ::std::string& value);
  #if LANG_CXX11
  void set_manufacturer_gln(::std::string&& value);
  #endif
  void set_manufacturer_gln(const char* value);
  void set_manufacturer_gln(const char* value, size_t size);
  ::std::string* mutable_manufacturer_gln();
  ::std::string* release_manufacturer_gln();
  void set_allocated_manufacturer_gln(::std::string* manufacturer_gln);

  // string file_version = 5;
  void clear_file_version();
  static const int kFileVersionFieldNumber = 5;
  const ::std::string& file_version() const;
  void set_file_version(const ::std::string& value);
  #if LANG_CXX11
  void set_file_version(::std::string&& value);
  #endif
  void set_file_version(const char* value);
  void set_file_version(const char* value, size_t size);
  ::std::string* mutable_file_version();
  ::std::string* release_file_version();
  void set_allocated_file_version(::std::string* file_version);

  // .efdi.UID filename_with_extension = 1;
  bool has_filename_with_extension() const;
  void clear_filename_with_extension();
  static const int kFilenameWithExtensionFieldNumber = 1;
  const ::efdi::UID& filename_with_extension() const;
  ::efdi::UID* release_filename_with_extension();
  ::efdi::UID* mutable_filename_with_extension();
  void set_allocated_filename_with_extension(::efdi::UID* filename_with_extension);

  // .efdi.AttachedFile.Preserve preserve = 2;
  void clear_preserve();
  static const int kPreserveFieldNumber = 2;
  ::efdi::AttachedFile_Preserve preserve() const;
  void set_preserve(::efdi::AttachedFile_Preserve value);

  // uint32 file_type = 4;
  void clear_file_type();
  static const int kFileTypeFieldNumber = 4;
  ::google::protobuf::uint32 file_type() const;
  void set_file_type(::google::protobuf::uint32 value);

  // uint64 file_length = 6;
  void clear_file_length();
  static const int kFileLengthFieldNumber = 6;
  ::google::protobuf::uint64 file_length() const;
  void set_file_length(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:efdi.AttachedFile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr manufacturer_gln_;
  ::google::protobuf::internal::ArenaStringPtr file_version_;
  ::efdi::UID* filename_with_extension_;
  int preserve_;
  ::google::protobuf::uint32 file_type_;
  ::google::protobuf::uint64 file_length_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsAttachedFileImpl();
};
// -------------------------------------------------------------------

class BaseStation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.BaseStation) */ {
 public:
  BaseStation();
  virtual ~BaseStation();

  BaseStation(const BaseStation& from);

  inline BaseStation& operator=(const BaseStation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BaseStation(BaseStation&& from) noexcept
    : BaseStation() {
    *this = ::std::move(from);
  }

  inline BaseStation& operator=(BaseStation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseStation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseStation* internal_default_instance() {
    return reinterpret_cast<const BaseStation*>(
               &_BaseStation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(BaseStation* other);
  friend void swap(BaseStation& a, BaseStation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BaseStation* New() const PROTOBUF_FINAL { return New(NULL); }

  BaseStation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BaseStation& from);
  void MergeFrom(const BaseStation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BaseStation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string base_station_designator = 2;
  void clear_base_station_designator();
  static const int kBaseStationDesignatorFieldNumber = 2;
  const ::std::string& base_station_designator() const;
  void set_base_station_designator(const ::std::string& value);
  #if LANG_CXX11
  void set_base_station_designator(::std::string&& value);
  #endif
  void set_base_station_designator(const char* value);
  void set_base_station_designator(const char* value, size_t size);
  ::std::string* mutable_base_station_designator();
  ::std::string* release_base_station_designator();
  void set_allocated_base_station_designator(::std::string* base_station_designator);

  // .efdi.UID base_station_id = 1;
  bool has_base_station_id() const;
  void clear_base_station_id();
  static const int kBaseStationIdFieldNumber = 1;
  const ::efdi::UID& base_station_id() const;
  ::efdi::UID* release_base_station_id();
  ::efdi::UID* mutable_base_station_id();
  void set_allocated_base_station_id(::efdi::UID* base_station_id);

  // double base_station_north = 3;
  void clear_base_station_north();
  static const int kBaseStationNorthFieldNumber = 3;
  double base_station_north() const;
  void set_base_station_north(double value);

  // double base_station_east = 4;
  void clear_base_station_east();
  static const int kBaseStationEastFieldNumber = 4;
  double base_station_east() const;
  void set_base_station_east(double value);

  // sint64 base_station_up = 5;
  void clear_base_station_up();
  static const int kBaseStationUpFieldNumber = 5;
  ::google::protobuf::int64 base_station_up() const;
  void set_base_station_up(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:efdi.BaseStation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr base_station_designator_;
  ::efdi::UID* base_station_id_;
  double base_station_north_;
  double base_station_east_;
  ::google::protobuf::int64 base_station_up_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsBaseStationImpl();
};
// -------------------------------------------------------------------

class CodedComment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.CodedComment) */ {
 public:
  CodedComment();
  virtual ~CodedComment();

  CodedComment(const CodedComment& from);

  inline CodedComment& operator=(const CodedComment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodedComment(CodedComment&& from) noexcept
    : CodedComment() {
    *this = ::std::move(from);
  }

  inline CodedComment& operator=(CodedComment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodedComment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodedComment* internal_default_instance() {
    return reinterpret_cast<const CodedComment*>(
               &_CodedComment_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(CodedComment* other);
  friend void swap(CodedComment& a, CodedComment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodedComment* New() const PROTOBUF_FINAL { return New(NULL); }

  CodedComment* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CodedComment& from);
  void MergeFrom(const CodedComment& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CodedComment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CodedComment_CodedCommentScope CodedCommentScope;
  static const CodedCommentScope C_NOTSET =
    CodedComment_CodedCommentScope_C_NOTSET;
  static const CodedCommentScope C_POINT =
    CodedComment_CodedCommentScope_C_POINT;
  static const CodedCommentScope C_GLOBAL =
    CodedComment_CodedCommentScope_C_GLOBAL;
  static const CodedCommentScope C_CONTINUOUS =
    CodedComment_CodedCommentScope_C_CONTINUOUS;
  static inline bool CodedCommentScope_IsValid(int value) {
    return CodedComment_CodedCommentScope_IsValid(value);
  }
  static const CodedCommentScope CodedCommentScope_MIN =
    CodedComment_CodedCommentScope_CodedCommentScope_MIN;
  static const CodedCommentScope CodedCommentScope_MAX =
    CodedComment_CodedCommentScope_CodedCommentScope_MAX;
  static const int CodedCommentScope_ARRAYSIZE =
    CodedComment_CodedCommentScope_CodedCommentScope_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CodedCommentScope_descriptor() {
    return CodedComment_CodedCommentScope_descriptor();
  }
  static inline const ::std::string& CodedCommentScope_Name(CodedCommentScope value) {
    return CodedComment_CodedCommentScope_Name(value);
  }
  static inline bool CodedCommentScope_Parse(const ::std::string& name,
      CodedCommentScope* value) {
    return CodedComment_CodedCommentScope_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .efdi.CodedCommentListValue coded_comment_list_value = 5;
  int coded_comment_list_value_size() const;
  void clear_coded_comment_list_value();
  static const int kCodedCommentListValueFieldNumber = 5;
  const ::efdi::CodedCommentListValue& coded_comment_list_value(int index) const;
  ::efdi::CodedCommentListValue* mutable_coded_comment_list_value(int index);
  ::efdi::CodedCommentListValue* add_coded_comment_list_value();
  ::google::protobuf::RepeatedPtrField< ::efdi::CodedCommentListValue >*
      mutable_coded_comment_list_value();
  const ::google::protobuf::RepeatedPtrField< ::efdi::CodedCommentListValue >&
      coded_comment_list_value() const;

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string coded_comment_designator = 2;
  void clear_coded_comment_designator();
  static const int kCodedCommentDesignatorFieldNumber = 2;
  const ::std::string& coded_comment_designator() const;
  void set_coded_comment_designator(const ::std::string& value);
  #if LANG_CXX11
  void set_coded_comment_designator(::std::string&& value);
  #endif
  void set_coded_comment_designator(const char* value);
  void set_coded_comment_designator(const char* value, size_t size);
  ::std::string* mutable_coded_comment_designator();
  ::std::string* release_coded_comment_designator();
  void set_allocated_coded_comment_designator(::std::string* coded_comment_designator);

  // .efdi.UID coded_comment_id = 1;
  bool has_coded_comment_id() const;
  void clear_coded_comment_id();
  static const int kCodedCommentIdFieldNumber = 1;
  const ::efdi::UID& coded_comment_id() const;
  ::efdi::UID* release_coded_comment_id();
  ::efdi::UID* mutable_coded_comment_id();
  void set_allocated_coded_comment_id(::efdi::UID* coded_comment_id);

  // .efdi.UID coded_comment_group_id_ref = 4;
  bool has_coded_comment_group_id_ref() const;
  void clear_coded_comment_group_id_ref();
  static const int kCodedCommentGroupIdRefFieldNumber = 4;
  const ::efdi::UID& coded_comment_group_id_ref() const;
  ::efdi::UID* release_coded_comment_group_id_ref();
  ::efdi::UID* mutable_coded_comment_group_id_ref();
  void set_allocated_coded_comment_group_id_ref(::efdi::UID* coded_comment_group_id_ref);

  // .efdi.CodedComment.CodedCommentScope coded_comment_scope = 3;
  void clear_coded_comment_scope();
  static const int kCodedCommentScopeFieldNumber = 3;
  ::efdi::CodedComment_CodedCommentScope coded_comment_scope() const;
  void set_coded_comment_scope(::efdi::CodedComment_CodedCommentScope value);

  // @@protoc_insertion_point(class_scope:efdi.CodedComment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::efdi::CodedCommentListValue > coded_comment_list_value_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr coded_comment_designator_;
  ::efdi::UID* coded_comment_id_;
  ::efdi::UID* coded_comment_group_id_ref_;
  int coded_comment_scope_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsCodedCommentImpl();
};
// -------------------------------------------------------------------

class CodedCommentGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.CodedCommentGroup) */ {
 public:
  CodedCommentGroup();
  virtual ~CodedCommentGroup();

  CodedCommentGroup(const CodedCommentGroup& from);

  inline CodedCommentGroup& operator=(const CodedCommentGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodedCommentGroup(CodedCommentGroup&& from) noexcept
    : CodedCommentGroup() {
    *this = ::std::move(from);
  }

  inline CodedCommentGroup& operator=(CodedCommentGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodedCommentGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodedCommentGroup* internal_default_instance() {
    return reinterpret_cast<const CodedCommentGroup*>(
               &_CodedCommentGroup_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(CodedCommentGroup* other);
  friend void swap(CodedCommentGroup& a, CodedCommentGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodedCommentGroup* New() const PROTOBUF_FINAL { return New(NULL); }

  CodedCommentGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CodedCommentGroup& from);
  void MergeFrom(const CodedCommentGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CodedCommentGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string coded_comment_group_designator = 2;
  void clear_coded_comment_group_designator();
  static const int kCodedCommentGroupDesignatorFieldNumber = 2;
  const ::std::string& coded_comment_group_designator() const;
  void set_coded_comment_group_designator(const ::std::string& value);
  #if LANG_CXX11
  void set_coded_comment_group_designator(::std::string&& value);
  #endif
  void set_coded_comment_group_designator(const char* value);
  void set_coded_comment_group_designator(const char* value, size_t size);
  ::std::string* mutable_coded_comment_group_designator();
  ::std::string* release_coded_comment_group_designator();
  void set_allocated_coded_comment_group_designator(::std::string* coded_comment_group_designator);

  // .efdi.UID coded_comment_group_id = 1;
  bool has_coded_comment_group_id() const;
  void clear_coded_comment_group_id();
  static const int kCodedCommentGroupIdFieldNumber = 1;
  const ::efdi::UID& coded_comment_group_id() const;
  ::efdi::UID* release_coded_comment_group_id();
  ::efdi::UID* mutable_coded_comment_group_id();
  void set_allocated_coded_comment_group_id(::efdi::UID* coded_comment_group_id);

  // @@protoc_insertion_point(class_scope:efdi.CodedCommentGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr coded_comment_group_designator_;
  ::efdi::UID* coded_comment_group_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsCodedCommentGroupImpl();
};
// -------------------------------------------------------------------

class CodedCommentListValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.CodedCommentListValue) */ {
 public:
  CodedCommentListValue();
  virtual ~CodedCommentListValue();

  CodedCommentListValue(const CodedCommentListValue& from);

  inline CodedCommentListValue& operator=(const CodedCommentListValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodedCommentListValue(CodedCommentListValue&& from) noexcept
    : CodedCommentListValue() {
    *this = ::std::move(from);
  }

  inline CodedCommentListValue& operator=(CodedCommentListValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodedCommentListValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodedCommentListValue* internal_default_instance() {
    return reinterpret_cast<const CodedCommentListValue*>(
               &_CodedCommentListValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(CodedCommentListValue* other);
  friend void swap(CodedCommentListValue& a, CodedCommentListValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodedCommentListValue* New() const PROTOBUF_FINAL { return New(NULL); }

  CodedCommentListValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CodedCommentListValue& from);
  void MergeFrom(const CodedCommentListValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CodedCommentListValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string coded_comment_list_value_designator = 2;
  void clear_coded_comment_list_value_designator();
  static const int kCodedCommentListValueDesignatorFieldNumber = 2;
  const ::std::string& coded_comment_list_value_designator() const;
  void set_coded_comment_list_value_designator(const ::std::string& value);
  #if LANG_CXX11
  void set_coded_comment_list_value_designator(::std::string&& value);
  #endif
  void set_coded_comment_list_value_designator(const char* value);
  void set_coded_comment_list_value_designator(const char* value, size_t size);
  ::std::string* mutable_coded_comment_list_value_designator();
  ::std::string* release_coded_comment_list_value_designator();
  void set_allocated_coded_comment_list_value_designator(::std::string* coded_comment_list_value_designator);

  // .efdi.UID coded_comment_list_value_id = 1;
  bool has_coded_comment_list_value_id() const;
  void clear_coded_comment_list_value_id();
  static const int kCodedCommentListValueIdFieldNumber = 1;
  const ::efdi::UID& coded_comment_list_value_id() const;
  ::efdi::UID* release_coded_comment_list_value_id();
  ::efdi::UID* mutable_coded_comment_list_value_id();
  void set_allocated_coded_comment_list_value_id(::efdi::UID* coded_comment_list_value_id);

  // @@protoc_insertion_point(class_scope:efdi.CodedCommentListValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr coded_comment_list_value_designator_;
  ::efdi::UID* coded_comment_list_value_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsCodedCommentListValueImpl();
};
// -------------------------------------------------------------------

class ColourLegend : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.ColourLegend) */ {
 public:
  ColourLegend();
  virtual ~ColourLegend();

  ColourLegend(const ColourLegend& from);

  inline ColourLegend& operator=(const ColourLegend& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ColourLegend(ColourLegend&& from) noexcept
    : ColourLegend() {
    *this = ::std::move(from);
  }

  inline ColourLegend& operator=(ColourLegend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ColourLegend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColourLegend* internal_default_instance() {
    return reinterpret_cast<const ColourLegend*>(
               &_ColourLegend_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(ColourLegend* other);
  friend void swap(ColourLegend& a, ColourLegend& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ColourLegend* New() const PROTOBUF_FINAL { return New(NULL); }

  ColourLegend* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ColourLegend& from);
  void MergeFrom(const ColourLegend& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ColourLegend* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .efdi.ColourRange colour_range = 3;
  int colour_range_size() const;
  void clear_colour_range();
  static const int kColourRangeFieldNumber = 3;
  const ::efdi::ColourRange& colour_range(int index) const;
  ::efdi::ColourRange* mutable_colour_range(int index);
  ::efdi::ColourRange* add_colour_range();
  ::google::protobuf::RepeatedPtrField< ::efdi::ColourRange >*
      mutable_colour_range();
  const ::google::protobuf::RepeatedPtrField< ::efdi::ColourRange >&
      colour_range() const;

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // .efdi.UID colour_legend_id = 1;
  bool has_colour_legend_id() const;
  void clear_colour_legend_id();
  static const int kColourLegendIdFieldNumber = 1;
  const ::efdi::UID& colour_legend_id() const;
  ::efdi::UID* release_colour_legend_id();
  ::efdi::UID* mutable_colour_legend_id();
  void set_allocated_colour_legend_id(::efdi::UID* colour_legend_id);

  // uint32 default_colour = 2;
  void clear_default_colour();
  static const int kDefaultColourFieldNumber = 2;
  ::google::protobuf::uint32 default_colour() const;
  void set_default_colour(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:efdi.ColourLegend)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::efdi::ColourRange > colour_range_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::efdi::UID* colour_legend_id_;
  ::google::protobuf::uint32 default_colour_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsColourLegendImpl();
};
// -------------------------------------------------------------------

class ColourRange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.ColourRange) */ {
 public:
  ColourRange();
  virtual ~ColourRange();

  ColourRange(const ColourRange& from);

  inline ColourRange& operator=(const ColourRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ColourRange(ColourRange&& from) noexcept
    : ColourRange() {
    *this = ::std::move(from);
  }

  inline ColourRange& operator=(ColourRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ColourRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColourRange* internal_default_instance() {
    return reinterpret_cast<const ColourRange*>(
               &_ColourRange_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(ColourRange* other);
  friend void swap(ColourRange& a, ColourRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ColourRange* New() const PROTOBUF_FINAL { return New(NULL); }

  ColourRange* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ColourRange& from);
  void MergeFrom(const ColourRange& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ColourRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // sint64 minimum_value = 1;
  void clear_minimum_value();
  static const int kMinimumValueFieldNumber = 1;
  ::google::protobuf::int64 minimum_value() const;
  void set_minimum_value(::google::protobuf::int64 value);

  // sint64 maximum_value = 2;
  void clear_maximum_value();
  static const int kMaximumValueFieldNumber = 2;
  ::google::protobuf::int64 maximum_value() const;
  void set_maximum_value(::google::protobuf::int64 value);

  // uint32 colour = 3;
  void clear_colour();
  static const int kColourFieldNumber = 3;
  ::google::protobuf::uint32 colour() const;
  void set_colour(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:efdi.ColourRange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::int64 minimum_value_;
  ::google::protobuf::int64 maximum_value_;
  ::google::protobuf::uint32 colour_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsColourRangeImpl();
};
// -------------------------------------------------------------------

class CommentAllocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.CommentAllocation) */ {
 public:
  CommentAllocation();
  virtual ~CommentAllocation();

  CommentAllocation(const CommentAllocation& from);

  inline CommentAllocation& operator=(const CommentAllocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommentAllocation(CommentAllocation&& from) noexcept
    : CommentAllocation() {
    *this = ::std::move(from);
  }

  inline CommentAllocation& operator=(CommentAllocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommentAllocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommentAllocation* internal_default_instance() {
    return reinterpret_cast<const CommentAllocation*>(
               &_CommentAllocation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(CommentAllocation* other);
  friend void swap(CommentAllocation& a, CommentAllocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommentAllocation* New() const PROTOBUF_FINAL { return New(NULL); }

  CommentAllocation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CommentAllocation& from);
  void MergeFrom(const CommentAllocation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CommentAllocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string free_comment_text = 3;
  void clear_free_comment_text();
  static const int kFreeCommentTextFieldNumber = 3;
  const ::std::string& free_comment_text() const;
  void set_free_comment_text(const ::std::string& value);
  #if LANG_CXX11
  void set_free_comment_text(::std::string&& value);
  #endif
  void set_free_comment_text(const char* value);
  void set_free_comment_text(const char* value, size_t size);
  ::std::string* mutable_free_comment_text();
  ::std::string* release_free_comment_text();
  void set_allocated_free_comment_text(::std::string* free_comment_text);

  // .efdi.UID coded_comment_id_ref = 1;
  bool has_coded_comment_id_ref() const;
  void clear_coded_comment_id_ref();
  static const int kCodedCommentIdRefFieldNumber = 1;
  const ::efdi::UID& coded_comment_id_ref() const;
  ::efdi::UID* release_coded_comment_id_ref();
  ::efdi::UID* mutable_coded_comment_id_ref();
  void set_allocated_coded_comment_id_ref(::efdi::UID* coded_comment_id_ref);

  // .efdi.UID coded_comment_list_value = 2;
  bool has_coded_comment_list_value() const;
  void clear_coded_comment_list_value();
  static const int kCodedCommentListValueFieldNumber = 2;
  const ::efdi::UID& coded_comment_list_value() const;
  ::efdi::UID* release_coded_comment_list_value();
  ::efdi::UID* mutable_coded_comment_list_value();
  void set_allocated_coded_comment_list_value(::efdi::UID* coded_comment_list_value);

  // .efdi.AllocationStamp allocation_stamp = 4;
  bool has_allocation_stamp() const;
  void clear_allocation_stamp();
  static const int kAllocationStampFieldNumber = 4;
  const ::efdi::AllocationStamp& allocation_stamp() const;
  ::efdi::AllocationStamp* release_allocation_stamp();
  ::efdi::AllocationStamp* mutable_allocation_stamp();
  void set_allocated_allocation_stamp(::efdi::AllocationStamp* allocation_stamp);

  // @@protoc_insertion_point(class_scope:efdi.CommentAllocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr free_comment_text_;
  ::efdi::UID* coded_comment_id_ref_;
  ::efdi::UID* coded_comment_list_value_;
  ::efdi::AllocationStamp* allocation_stamp_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsCommentAllocationImpl();
};
// -------------------------------------------------------------------

class Connection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.Connection) */ {
 public:
  Connection();
  virtual ~Connection();

  Connection(const Connection& from);

  inline Connection& operator=(const Connection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Connection(Connection&& from) noexcept
    : Connection() {
    *this = ::std::move(from);
  }

  inline Connection& operator=(Connection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Connection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Connection* internal_default_instance() {
    return reinterpret_cast<const Connection*>(
               &_Connection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Connection* other);
  friend void swap(Connection& a, Connection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Connection* New() const PROTOBUF_FINAL { return New(NULL); }

  Connection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Connection& from);
  void MergeFrom(const Connection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Connection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // .efdi.UID device_id_ref_0 = 1;
  bool has_device_id_ref_0() const;
  void clear_device_id_ref_0();
  static const int kDeviceIdRef0FieldNumber = 1;
  const ::efdi::UID& device_id_ref_0() const;
  ::efdi::UID* release_device_id_ref_0();
  ::efdi::UID* mutable_device_id_ref_0();
  void set_allocated_device_id_ref_0(::efdi::UID* device_id_ref_0);

  // .efdi.UID device_element_id_ref_0 = 2;
  bool has_device_element_id_ref_0() const;
  void clear_device_element_id_ref_0();
  static const int kDeviceElementIdRef0FieldNumber = 2;
  const ::efdi::UID& device_element_id_ref_0() const;
  ::efdi::UID* release_device_element_id_ref_0();
  ::efdi::UID* mutable_device_element_id_ref_0();
  void set_allocated_device_element_id_ref_0(::efdi::UID* device_element_id_ref_0);

  // .efdi.UID device_id_ref_1 = 3;
  bool has_device_id_ref_1() const;
  void clear_device_id_ref_1();
  static const int kDeviceIdRef1FieldNumber = 3;
  const ::efdi::UID& device_id_ref_1() const;
  ::efdi::UID* release_device_id_ref_1();
  ::efdi::UID* mutable_device_id_ref_1();
  void set_allocated_device_id_ref_1(::efdi::UID* device_id_ref_1);

  // .efdi.UID device_element_id_ref_1 = 4;
  bool has_device_element_id_ref_1() const;
  void clear_device_element_id_ref_1();
  static const int kDeviceElementIdRef1FieldNumber = 4;
  const ::efdi::UID& device_element_id_ref_1() const;
  ::efdi::UID* release_device_element_id_ref_1();
  ::efdi::UID* mutable_device_element_id_ref_1();
  void set_allocated_device_element_id_ref_1(::efdi::UID* device_element_id_ref_1);

  // @@protoc_insertion_point(class_scope:efdi.Connection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::efdi::UID* device_id_ref_0_;
  ::efdi::UID* device_element_id_ref_0_;
  ::efdi::UID* device_id_ref_1_;
  ::efdi::UID* device_element_id_ref_1_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsConnectionImpl();
};
// -------------------------------------------------------------------

class ControlAssignment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.ControlAssignment) */ {
 public:
  ControlAssignment();
  virtual ~ControlAssignment();

  ControlAssignment(const ControlAssignment& from);

  inline ControlAssignment& operator=(const ControlAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControlAssignment(ControlAssignment&& from) noexcept
    : ControlAssignment() {
    *this = ::std::move(from);
  }

  inline ControlAssignment& operator=(ControlAssignment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlAssignment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlAssignment* internal_default_instance() {
    return reinterpret_cast<const ControlAssignment*>(
               &_ControlAssignment_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(ControlAssignment* other);
  friend void swap(ControlAssignment& a, ControlAssignment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControlAssignment* New() const PROTOBUF_FINAL { return New(NULL); }

  ControlAssignment* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ControlAssignment& from);
  void MergeFrom(const ControlAssignment& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ControlAssignment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // bytes source_client_name = 1;
  void clear_source_client_name();
  static const int kSourceClientNameFieldNumber = 1;
  const ::std::string& source_client_name() const;
  void set_source_client_name(const ::std::string& value);
  #if LANG_CXX11
  void set_source_client_name(::std::string&& value);
  #endif
  void set_source_client_name(const char* value);
  void set_source_client_name(const void* value, size_t size);
  ::std::string* mutable_source_client_name();
  ::std::string* release_source_client_name();
  void set_allocated_source_client_name(::std::string* source_client_name);

  // bytes user_client_name = 2;
  void clear_user_client_name();
  static const int kUserClientNameFieldNumber = 2;
  const ::std::string& user_client_name() const;
  void set_user_client_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_client_name(::std::string&& value);
  #endif
  void set_user_client_name(const char* value);
  void set_user_client_name(const void* value, size_t size);
  ::std::string* mutable_user_client_name();
  ::std::string* release_user_client_name();
  void set_allocated_user_client_name(::std::string* user_client_name);

  // bytes source_device_structure_label = 3;
  void clear_source_device_structure_label();
  static const int kSourceDeviceStructureLabelFieldNumber = 3;
  const ::std::string& source_device_structure_label() const;
  void set_source_device_structure_label(const ::std::string& value);
  #if LANG_CXX11
  void set_source_device_structure_label(::std::string&& value);
  #endif
  void set_source_device_structure_label(const char* value);
  void set_source_device_structure_label(const void* value, size_t size);
  ::std::string* mutable_source_device_structure_label();
  ::std::string* release_source_device_structure_label();
  void set_allocated_source_device_structure_label(::std::string* source_device_structure_label);

  // bytes user_device_structure_label = 4;
  void clear_user_device_structure_label();
  static const int kUserDeviceStructureLabelFieldNumber = 4;
  const ::std::string& user_device_structure_label() const;
  void set_user_device_structure_label(const ::std::string& value);
  #if LANG_CXX11
  void set_user_device_structure_label(::std::string&& value);
  #endif
  void set_user_device_structure_label(const char* value);
  void set_user_device_structure_label(const void* value, size_t size);
  ::std::string* mutable_user_device_structure_label();
  ::std::string* release_user_device_structure_label();
  void set_allocated_user_device_structure_label(::std::string* user_device_structure_label);

  // .efdi.AllocationStamp allocation_stamp = 8;
  bool has_allocation_stamp() const;
  void clear_allocation_stamp();
  static const int kAllocationStampFieldNumber = 8;
  const ::efdi::AllocationStamp& allocation_stamp() const;
  ::efdi::AllocationStamp* release_allocation_stamp();
  ::efdi::AllocationStamp* mutable_allocation_stamp();
  void set_allocated_allocation_stamp(::efdi::AllocationStamp* allocation_stamp);

  // uint32 source_device_element_number = 5;
  void clear_source_device_element_number();
  static const int kSourceDeviceElementNumberFieldNumber = 5;
  ::google::protobuf::uint32 source_device_element_number() const;
  void set_source_device_element_number(::google::protobuf::uint32 value);

  // uint32 user_device_element_number = 6;
  void clear_user_device_element_number();
  static const int kUserDeviceElementNumberFieldNumber = 6;
  ::google::protobuf::uint32 user_device_element_number() const;
  void set_user_device_element_number(::google::protobuf::uint32 value);

  // uint32 process_data_ddi = 7;
  void clear_process_data_ddi();
  static const int kProcessDataDdiFieldNumber = 7;
  ::google::protobuf::uint32 process_data_ddi() const;
  void set_process_data_ddi(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:efdi.ControlAssignment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr source_client_name_;
  ::google::protobuf::internal::ArenaStringPtr user_client_name_;
  ::google::protobuf::internal::ArenaStringPtr source_device_structure_label_;
  ::google::protobuf::internal::ArenaStringPtr user_device_structure_label_;
  ::efdi::AllocationStamp* allocation_stamp_;
  ::google::protobuf::uint32 source_device_element_number_;
  ::google::protobuf::uint32 user_device_element_number_;
  ::google::protobuf::uint32 process_data_ddi_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsControlAssignmentImpl();
};
// -------------------------------------------------------------------

class CropType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.CropType) */ {
 public:
  CropType();
  virtual ~CropType();

  CropType(const CropType& from);

  inline CropType& operator=(const CropType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CropType(CropType&& from) noexcept
    : CropType() {
    *this = ::std::move(from);
  }

  inline CropType& operator=(CropType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CropType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CropType* internal_default_instance() {
    return reinterpret_cast<const CropType*>(
               &_CropType_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(CropType* other);
  friend void swap(CropType& a, CropType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CropType* New() const PROTOBUF_FINAL { return New(NULL); }

  CropType* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CropType& from);
  void MergeFrom(const CropType& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CropType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .efdi.CropVariety crop_variety = 4;
  int crop_variety_size() const;
  void clear_crop_variety();
  static const int kCropVarietyFieldNumber = 4;
  const ::efdi::CropVariety& crop_variety(int index) const;
  ::efdi::CropVariety* mutable_crop_variety(int index);
  ::efdi::CropVariety* add_crop_variety();
  ::google::protobuf::RepeatedPtrField< ::efdi::CropVariety >*
      mutable_crop_variety();
  const ::google::protobuf::RepeatedPtrField< ::efdi::CropVariety >&
      crop_variety() const;

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string crop_type_designator = 2;
  void clear_crop_type_designator();
  static const int kCropTypeDesignatorFieldNumber = 2;
  const ::std::string& crop_type_designator() const;
  void set_crop_type_designator(const ::std::string& value);
  #if LANG_CXX11
  void set_crop_type_designator(::std::string&& value);
  #endif
  void set_crop_type_designator(const char* value);
  void set_crop_type_designator(const char* value, size_t size);
  ::std::string* mutable_crop_type_designator();
  ::std::string* release_crop_type_designator();
  void set_allocated_crop_type_designator(::std::string* crop_type_designator);

  // .efdi.UID crop_type_id = 1;
  bool has_crop_type_id() const;
  void clear_crop_type_id();
  static const int kCropTypeIdFieldNumber = 1;
  const ::efdi::UID& crop_type_id() const;
  ::efdi::UID* release_crop_type_id();
  ::efdi::UID* mutable_crop_type_id();
  void set_allocated_crop_type_id(::efdi::UID* crop_type_id);

  // .efdi.UID product_group_id_ref = 3;
  bool has_product_group_id_ref() const;
  void clear_product_group_id_ref();
  static const int kProductGroupIdRefFieldNumber = 3;
  const ::efdi::UID& product_group_id_ref() const;
  ::efdi::UID* release_product_group_id_ref();
  ::efdi::UID* mutable_product_group_id_ref();
  void set_allocated_product_group_id_ref(::efdi::UID* product_group_id_ref);

  // @@protoc_insertion_point(class_scope:efdi.CropType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::efdi::CropVariety > crop_variety_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr crop_type_designator_;
  ::efdi::UID* crop_type_id_;
  ::efdi::UID* product_group_id_ref_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsCropTypeImpl();
};
// -------------------------------------------------------------------

class CropVariety : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.CropVariety) */ {
 public:
  CropVariety();
  virtual ~CropVariety();

  CropVariety(const CropVariety& from);

  inline CropVariety& operator=(const CropVariety& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CropVariety(CropVariety&& from) noexcept
    : CropVariety() {
    *this = ::std::move(from);
  }

  inline CropVariety& operator=(CropVariety&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CropVariety& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CropVariety* internal_default_instance() {
    return reinterpret_cast<const CropVariety*>(
               &_CropVariety_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(CropVariety* other);
  friend void swap(CropVariety& a, CropVariety& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CropVariety* New() const PROTOBUF_FINAL { return New(NULL); }

  CropVariety* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CropVariety& from);
  void MergeFrom(const CropVariety& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CropVariety* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string crop_variety_designator = 2;
  void clear_crop_variety_designator();
  static const int kCropVarietyDesignatorFieldNumber = 2;
  const ::std::string& crop_variety_designator() const;
  void set_crop_variety_designator(const ::std::string& value);
  #if LANG_CXX11
  void set_crop_variety_designator(::std::string&& value);
  #endif
  void set_crop_variety_designator(const char* value);
  void set_crop_variety_designator(const char* value, size_t size);
  ::std::string* mutable_crop_variety_designator();
  ::std::string* release_crop_variety_designator();
  void set_allocated_crop_variety_designator(::std::string* crop_variety_designator);

  // .efdi.UID crop_variety_id = 1;
  bool has_crop_variety_id() const;
  void clear_crop_variety_id();
  static const int kCropVarietyIdFieldNumber = 1;
  const ::efdi::UID& crop_variety_id() const;
  ::efdi::UID* release_crop_variety_id();
  ::efdi::UID* mutable_crop_variety_id();
  void set_allocated_crop_variety_id(::efdi::UID* crop_variety_id);

  // .efdi.UID product_id_ref = 3;
  bool has_product_id_ref() const;
  void clear_product_id_ref();
  static const int kProductIdRefFieldNumber = 3;
  const ::efdi::UID& product_id_ref() const;
  ::efdi::UID* release_product_id_ref();
  ::efdi::UID* mutable_product_id_ref();
  void set_allocated_product_id_ref(::efdi::UID* product_id_ref);

  // @@protoc_insertion_point(class_scope:efdi.CropVariety)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr crop_variety_designator_;
  ::efdi::UID* crop_variety_id_;
  ::efdi::UID* product_id_ref_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsCropVarietyImpl();
};
// -------------------------------------------------------------------

class CulturalPractice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.CulturalPractice) */ {
 public:
  CulturalPractice();
  virtual ~CulturalPractice();

  CulturalPractice(const CulturalPractice& from);

  inline CulturalPractice& operator=(const CulturalPractice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CulturalPractice(CulturalPractice&& from) noexcept
    : CulturalPractice() {
    *this = ::std::move(from);
  }

  inline CulturalPractice& operator=(CulturalPractice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CulturalPractice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CulturalPractice* internal_default_instance() {
    return reinterpret_cast<const CulturalPractice*>(
               &_CulturalPractice_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(CulturalPractice* other);
  friend void swap(CulturalPractice& a, CulturalPractice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CulturalPractice* New() const PROTOBUF_FINAL { return New(NULL); }

  CulturalPractice* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CulturalPractice& from);
  void MergeFrom(const CulturalPractice& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CulturalPractice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .efdi.OperationTechniqueReference operation_technique_reference = 3;
  int operation_technique_reference_size() const;
  void clear_operation_technique_reference();
  static const int kOperationTechniqueReferenceFieldNumber = 3;
  const ::efdi::OperationTechniqueReference& operation_technique_reference(int index) const;
  ::efdi::OperationTechniqueReference* mutable_operation_technique_reference(int index);
  ::efdi::OperationTechniqueReference* add_operation_technique_reference();
  ::google::protobuf::RepeatedPtrField< ::efdi::OperationTechniqueReference >*
      mutable_operation_technique_reference();
  const ::google::protobuf::RepeatedPtrField< ::efdi::OperationTechniqueReference >&
      operation_technique_reference() const;

  // string cultural_practice_designator = 2;
  void clear_cultural_practice_designator();
  static const int kCulturalPracticeDesignatorFieldNumber = 2;
  const ::std::string& cultural_practice_designator() const;
  void set_cultural_practice_designator(const ::std::string& value);
  #if LANG_CXX11
  void set_cultural_practice_designator(::std::string&& value);
  #endif
  void set_cultural_practice_designator(const char* value);
  void set_cultural_practice_designator(const char* value, size_t size);
  ::std::string* mutable_cultural_practice_designator();
  ::std::string* release_cultural_practice_designator();
  void set_allocated_cultural_practice_designator(::std::string* cultural_practice_designator);

  // .efdi.UID cultural_practice_id = 1;
  bool has_cultural_practice_id() const;
  void clear_cultural_practice_id();
  static const int kCulturalPracticeIdFieldNumber = 1;
  const ::efdi::UID& cultural_practice_id() const;
  ::efdi::UID* release_cultural_practice_id();
  ::efdi::UID* mutable_cultural_practice_id();
  void set_allocated_cultural_practice_id(::efdi::UID* cultural_practice_id);

  // @@protoc_insertion_point(class_scope:efdi.CulturalPractice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::efdi::OperationTechniqueReference > operation_technique_reference_;
  ::google::protobuf::internal::ArenaStringPtr cultural_practice_designator_;
  ::efdi::UID* cultural_practice_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsCulturalPracticeImpl();
};
// -------------------------------------------------------------------

class Customer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.Customer) */ {
 public:
  Customer();
  virtual ~Customer();

  Customer(const Customer& from);

  inline Customer& operator=(const Customer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Customer(Customer&& from) noexcept
    : Customer() {
    *this = ::std::move(from);
  }

  inline Customer& operator=(Customer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Customer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Customer* internal_default_instance() {
    return reinterpret_cast<const Customer*>(
               &_Customer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(Customer* other);
  friend void swap(Customer& a, Customer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Customer* New() const PROTOBUF_FINAL { return New(NULL); }

  Customer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Customer& from);
  void MergeFrom(const Customer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Customer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string customer_last_name = 2;
  void clear_customer_last_name();
  static const int kCustomerLastNameFieldNumber = 2;
  const ::std::string& customer_last_name() const;
  void set_customer_last_name(const ::std::string& value);
  #if LANG_CXX11
  void set_customer_last_name(::std::string&& value);
  #endif
  void set_customer_last_name(const char* value);
  void set_customer_last_name(const char* value, size_t size);
  ::std::string* mutable_customer_last_name();
  ::std::string* release_customer_last_name();
  void set_allocated_customer_last_name(::std::string* customer_last_name);

  // string customer_first_name = 3;
  void clear_customer_first_name();
  static const int kCustomerFirstNameFieldNumber = 3;
  const ::std::string& customer_first_name() const;
  void set_customer_first_name(const ::std::string& value);
  #if LANG_CXX11
  void set_customer_first_name(::std::string&& value);
  #endif
  void set_customer_first_name(const char* value);
  void set_customer_first_name(const char* value, size_t size);
  ::std::string* mutable_customer_first_name();
  ::std::string* release_customer_first_name();
  void set_allocated_customer_first_name(::std::string* customer_first_name);

  // string customer_street = 4;
  void clear_customer_street();
  static const int kCustomerStreetFieldNumber = 4;
  const ::std::string& customer_street() const;
  void set_customer_street(const ::std::string& value);
  #if LANG_CXX11
  void set_customer_street(::std::string&& value);
  #endif
  void set_customer_street(const char* value);
  void set_customer_street(const char* value, size_t size);
  ::std::string* mutable_customer_street();
  ::std::string* release_customer_street();
  void set_allocated_customer_street(::std::string* customer_street);

  // string customer_po_box = 5;
  void clear_customer_po_box();
  static const int kCustomerPoBoxFieldNumber = 5;
  const ::std::string& customer_po_box() const;
  void set_customer_po_box(const ::std::string& value);
  #if LANG_CXX11
  void set_customer_po_box(::std::string&& value);
  #endif
  void set_customer_po_box(const char* value);
  void set_customer_po_box(const char* value, size_t size);
  ::std::string* mutable_customer_po_box();
  ::std::string* release_customer_po_box();
  void set_allocated_customer_po_box(::std::string* customer_po_box);

  // string customer_postal_code = 6;
  void clear_customer_postal_code();
  static const int kCustomerPostalCodeFieldNumber = 6;
  const ::std::string& customer_postal_code() const;
  void set_customer_postal_code(const ::std::string& value);
  #if LANG_CXX11
  void set_customer_postal_code(::std::string&& value);
  #endif
  void set_customer_postal_code(const char* value);
  void set_customer_postal_code(const char* value, size_t size);
  ::std::string* mutable_customer_postal_code();
  ::std::string* release_customer_postal_code();
  void set_allocated_customer_postal_code(::std::string* customer_postal_code);

  // string customer_city = 7;
  void clear_customer_city();
  static const int kCustomerCityFieldNumber = 7;
  const ::std::string& customer_city() const;
  void set_customer_city(const ::std::string& value);
  #if LANG_CXX11
  void set_customer_city(::std::string&& value);
  #endif
  void set_customer_city(const char* value);
  void set_customer_city(const char* value, size_t size);
  ::std::string* mutable_customer_city();
  ::std::string* release_customer_city();
  void set_allocated_customer_city(::std::string* customer_city);

  // string customer_state = 8;
  void clear_customer_state();
  static const int kCustomerStateFieldNumber = 8;
  const ::std::string& customer_state() const;
  void set_customer_state(const ::std::string& value);
  #if LANG_CXX11
  void set_customer_state(::std::string&& value);
  #endif
  void set_customer_state(const char* value);
  void set_customer_state(const char* value, size_t size);
  ::std::string* mutable_customer_state();
  ::std::string* release_customer_state();
  void set_allocated_customer_state(::std::string* customer_state);

  // string customer_country = 9;
  void clear_customer_country();
  static const int kCustomerCountryFieldNumber = 9;
  const ::std::string& customer_country() const;
  void set_customer_country(const ::std::string& value);
  #if LANG_CXX11
  void set_customer_country(::std::string&& value);
  #endif
  void set_customer_country(const char* value);
  void set_customer_country(const char* value, size_t size);
  ::std::string* mutable_customer_country();
  ::std::string* release_customer_country();
  void set_allocated_customer_country(::std::string* customer_country);

  // string customer_phone = 10;
  void clear_customer_phone();
  static const int kCustomerPhoneFieldNumber = 10;
  const ::std::string& customer_phone() const;
  void set_customer_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_customer_phone(::std::string&& value);
  #endif
  void set_customer_phone(const char* value);
  void set_customer_phone(const char* value, size_t size);
  ::std::string* mutable_customer_phone();
  ::std::string* release_customer_phone();
  void set_allocated_customer_phone(::std::string* customer_phone);

  // string customer_mobile = 11;
  void clear_customer_mobile();
  static const int kCustomerMobileFieldNumber = 11;
  const ::std::string& customer_mobile() const;
  void set_customer_mobile(const ::std::string& value);
  #if LANG_CXX11
  void set_customer_mobile(::std::string&& value);
  #endif
  void set_customer_mobile(const char* value);
  void set_customer_mobile(const char* value, size_t size);
  ::std::string* mutable_customer_mobile();
  ::std::string* release_customer_mobile();
  void set_allocated_customer_mobile(::std::string* customer_mobile);

  // string customer_fax = 12;
  void clear_customer_fax();
  static const int kCustomerFaxFieldNumber = 12;
  const ::std::string& customer_fax() const;
  void set_customer_fax(const ::std::string& value);
  #if LANG_CXX11
  void set_customer_fax(::std::string&& value);
  #endif
  void set_customer_fax(const char* value);
  void set_customer_fax(const char* value, size_t size);
  ::std::string* mutable_customer_fax();
  ::std::string* release_customer_fax();
  void set_allocated_customer_fax(::std::string* customer_fax);

  // string customer_email = 13;
  void clear_customer_email();
  static const int kCustomerEmailFieldNumber = 13;
  const ::std::string& customer_email() const;
  void set_customer_email(const ::std::string& value);
  #if LANG_CXX11
  void set_customer_email(::std::string&& value);
  #endif
  void set_customer_email(const char* value);
  void set_customer_email(const char* value, size_t size);
  ::std::string* mutable_customer_email();
  ::std::string* release_customer_email();
  void set_allocated_customer_email(::std::string* customer_email);

  // .efdi.UID customer_id = 1;
  bool has_customer_id() const;
  void clear_customer_id();
  static const int kCustomerIdFieldNumber = 1;
  const ::efdi::UID& customer_id() const;
  ::efdi::UID* release_customer_id();
  ::efdi::UID* mutable_customer_id();
  void set_allocated_customer_id(::efdi::UID* customer_id);

  // @@protoc_insertion_point(class_scope:efdi.Customer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr customer_last_name_;
  ::google::protobuf::internal::ArenaStringPtr customer_first_name_;
  ::google::protobuf::internal::ArenaStringPtr customer_street_;
  ::google::protobuf::internal::ArenaStringPtr customer_po_box_;
  ::google::protobuf::internal::ArenaStringPtr customer_postal_code_;
  ::google::protobuf::internal::ArenaStringPtr customer_city_;
  ::google::protobuf::internal::ArenaStringPtr customer_state_;
  ::google::protobuf::internal::ArenaStringPtr customer_country_;
  ::google::protobuf::internal::ArenaStringPtr customer_phone_;
  ::google::protobuf::internal::ArenaStringPtr customer_mobile_;
  ::google::protobuf::internal::ArenaStringPtr customer_fax_;
  ::google::protobuf::internal::ArenaStringPtr customer_email_;
  ::efdi::UID* customer_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsCustomerImpl();
};
// -------------------------------------------------------------------

class DataLogTrigger : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.DataLogTrigger) */ {
 public:
  DataLogTrigger();
  virtual ~DataLogTrigger();

  DataLogTrigger(const DataLogTrigger& from);

  inline DataLogTrigger& operator=(const DataLogTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataLogTrigger(DataLogTrigger&& from) noexcept
    : DataLogTrigger() {
    *this = ::std::move(from);
  }

  inline DataLogTrigger& operator=(DataLogTrigger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataLogTrigger& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataLogTrigger* internal_default_instance() {
    return reinterpret_cast<const DataLogTrigger*>(
               &_DataLogTrigger_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(DataLogTrigger* other);
  friend void swap(DataLogTrigger& a, DataLogTrigger& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataLogTrigger* New() const PROTOBUF_FINAL { return New(NULL); }

  DataLogTrigger* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataLogTrigger& from);
  void MergeFrom(const DataLogTrigger& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataLogTrigger* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // .efdi.UID device_element_id_ref = 8;
  bool has_device_element_id_ref() const;
  void clear_device_element_id_ref();
  static const int kDeviceElementIdRefFieldNumber = 8;
  const ::efdi::UID& device_element_id_ref() const;
  ::efdi::UID* release_device_element_id_ref();
  ::efdi::UID* mutable_device_element_id_ref();
  void set_allocated_device_element_id_ref(::efdi::UID* device_element_id_ref);

  // .efdi.UID value_presentation_id_ref = 9;
  bool has_value_presentation_id_ref() const;
  void clear_value_presentation_id_ref();
  static const int kValuePresentationIdRefFieldNumber = 9;
  const ::efdi::UID& value_presentation_id_ref() const;
  ::efdi::UID* release_value_presentation_id_ref();
  ::efdi::UID* mutable_value_presentation_id_ref();
  void set_allocated_value_presentation_id_ref(::efdi::UID* value_presentation_id_ref);

  // uint32 data_log_ddi = 1;
  void clear_data_log_ddi();
  static const int kDataLogDdiFieldNumber = 1;
  ::google::protobuf::uint32 data_log_ddi() const;
  void set_data_log_ddi(::google::protobuf::uint32 value);

  // uint32 data_log_method = 2;
  void clear_data_log_method();
  static const int kDataLogMethodFieldNumber = 2;
  ::google::protobuf::uint32 data_log_method() const;
  void set_data_log_method(::google::protobuf::uint32 value);

  // sint64 data_log_distance_interval = 3;
  void clear_data_log_distance_interval();
  static const int kDataLogDistanceIntervalFieldNumber = 3;
  ::google::protobuf::int64 data_log_distance_interval() const;
  void set_data_log_distance_interval(::google::protobuf::int64 value);

  // sint64 data_log_time_interval = 4;
  void clear_data_log_time_interval();
  static const int kDataLogTimeIntervalFieldNumber = 4;
  ::google::protobuf::int64 data_log_time_interval() const;
  void set_data_log_time_interval(::google::protobuf::int64 value);

  // sint64 data_log_threshold_minumum = 5;
  void clear_data_log_threshold_minumum();
  static const int kDataLogThresholdMinumumFieldNumber = 5;
  ::google::protobuf::int64 data_log_threshold_minumum() const;
  void set_data_log_threshold_minumum(::google::protobuf::int64 value);

  // sint64 data_log_threshold_maximum = 6;
  void clear_data_log_threshold_maximum();
  static const int kDataLogThresholdMaximumFieldNumber = 6;
  ::google::protobuf::int64 data_log_threshold_maximum() const;
  void set_data_log_threshold_maximum(::google::protobuf::int64 value);

  // sint64 data_log_threshold_change = 7;
  void clear_data_log_threshold_change();
  static const int kDataLogThresholdChangeFieldNumber = 7;
  ::google::protobuf::int64 data_log_threshold_change() const;
  void set_data_log_threshold_change(::google::protobuf::int64 value);

  // uint64 data_log_pgn = 10;
  void clear_data_log_pgn();
  static const int kDataLogPgnFieldNumber = 10;
  ::google::protobuf::uint64 data_log_pgn() const;
  void set_data_log_pgn(::google::protobuf::uint64 value);

  // uint32 data_log_pgn_start_bit = 11;
  void clear_data_log_pgn_start_bit();
  static const int kDataLogPgnStartBitFieldNumber = 11;
  ::google::protobuf::uint32 data_log_pgn_start_bit() const;
  void set_data_log_pgn_start_bit(::google::protobuf::uint32 value);

  // uint32 data_log_pgn_stop_bit = 12;
  void clear_data_log_pgn_stop_bit();
  static const int kDataLogPgnStopBitFieldNumber = 12;
  ::google::protobuf::uint32 data_log_pgn_stop_bit() const;
  void set_data_log_pgn_stop_bit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:efdi.DataLogTrigger)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::efdi::UID* device_element_id_ref_;
  ::efdi::UID* value_presentation_id_ref_;
  ::google::protobuf::uint32 data_log_ddi_;
  ::google::protobuf::uint32 data_log_method_;
  ::google::protobuf::int64 data_log_distance_interval_;
  ::google::protobuf::int64 data_log_time_interval_;
  ::google::protobuf::int64 data_log_threshold_minumum_;
  ::google::protobuf::int64 data_log_threshold_maximum_;
  ::google::protobuf::int64 data_log_threshold_change_;
  ::google::protobuf::uint64 data_log_pgn_;
  ::google::protobuf::uint32 data_log_pgn_start_bit_;
  ::google::protobuf::uint32 data_log_pgn_stop_bit_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsDataLogTriggerImpl();
};
// -------------------------------------------------------------------

class DataLogValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.DataLogValue) */ {
 public:
  DataLogValue();
  virtual ~DataLogValue();

  DataLogValue(const DataLogValue& from);

  inline DataLogValue& operator=(const DataLogValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataLogValue(DataLogValue&& from) noexcept
    : DataLogValue() {
    *this = ::std::move(from);
  }

  inline DataLogValue& operator=(DataLogValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataLogValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataLogValue* internal_default_instance() {
    return reinterpret_cast<const DataLogValue*>(
               &_DataLogValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(DataLogValue* other);
  friend void swap(DataLogValue& a, DataLogValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataLogValue* New() const PROTOBUF_FINAL { return New(NULL); }

  DataLogValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataLogValue& from);
  void MergeFrom(const DataLogValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataLogValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // .efdi.UID device_element_id_ref = 3;
  bool has_device_element_id_ref() const;
  void clear_device_element_id_ref();
  static const int kDeviceElementIdRefFieldNumber = 3;
  const ::efdi::UID& device_element_id_ref() const;
  ::efdi::UID* release_device_element_id_ref();
  ::efdi::UID* mutable_device_element_id_ref();
  void set_allocated_device_element_id_ref(::efdi::UID* device_element_id_ref);

  // sint64 process_data_value = 2;
  void clear_process_data_value();
  static const int kProcessDataValueFieldNumber = 2;
  ::google::protobuf::int64 process_data_value() const;
  void set_process_data_value(::google::protobuf::int64 value);

  // uint32 process_data_ddi = 1;
  void clear_process_data_ddi();
  static const int kProcessDataDdiFieldNumber = 1;
  ::google::protobuf::uint32 process_data_ddi() const;
  void set_process_data_ddi(::google::protobuf::uint32 value);

  // uint32 data_log_pgn_start_bit = 5;
  void clear_data_log_pgn_start_bit();
  static const int kDataLogPgnStartBitFieldNumber = 5;
  ::google::protobuf::uint32 data_log_pgn_start_bit() const;
  void set_data_log_pgn_start_bit(::google::protobuf::uint32 value);

  // uint64 data_log_pgn = 4;
  void clear_data_log_pgn();
  static const int kDataLogPgnFieldNumber = 4;
  ::google::protobuf::uint64 data_log_pgn() const;
  void set_data_log_pgn(::google::protobuf::uint64 value);

  // uint32 data_log_pgn_stop_bit = 6;
  void clear_data_log_pgn_stop_bit();
  static const int kDataLogPgnStopBitFieldNumber = 6;
  ::google::protobuf::uint32 data_log_pgn_stop_bit() const;
  void set_data_log_pgn_stop_bit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:efdi.DataLogValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::efdi::UID* device_element_id_ref_;
  ::google::protobuf::int64 process_data_value_;
  ::google::protobuf::uint32 process_data_ddi_;
  ::google::protobuf::uint32 data_log_pgn_start_bit_;
  ::google::protobuf::uint64 data_log_pgn_;
  ::google::protobuf::uint32 data_log_pgn_stop_bit_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsDataLogValueImpl();
};
// -------------------------------------------------------------------

class DataLogValueIntOnly : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.DataLogValueIntOnly) */ {
 public:
  DataLogValueIntOnly();
  virtual ~DataLogValueIntOnly();

  DataLogValueIntOnly(const DataLogValueIntOnly& from);

  inline DataLogValueIntOnly& operator=(const DataLogValueIntOnly& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataLogValueIntOnly(DataLogValueIntOnly&& from) noexcept
    : DataLogValueIntOnly() {
    *this = ::std::move(from);
  }

  inline DataLogValueIntOnly& operator=(DataLogValueIntOnly&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataLogValueIntOnly& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataLogValueIntOnly* internal_default_instance() {
    return reinterpret_cast<const DataLogValueIntOnly*>(
               &_DataLogValueIntOnly_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(DataLogValueIntOnly* other);
  friend void swap(DataLogValueIntOnly& a, DataLogValueIntOnly& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataLogValueIntOnly* New() const PROTOBUF_FINAL { return New(NULL); }

  DataLogValueIntOnly* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataLogValueIntOnly& from);
  void MergeFrom(const DataLogValueIntOnly& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataLogValueIntOnly* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // sint64 process_data_value = 2;
  void clear_process_data_value();
  static const int kProcessDataValueFieldNumber = 2;
  ::google::protobuf::int64 process_data_value() const;
  void set_process_data_value(::google::protobuf::int64 value);

  // sint64 device_element_id_ref = 3;
  void clear_device_element_id_ref();
  static const int kDeviceElementIdRefFieldNumber = 3;
  ::google::protobuf::int64 device_element_id_ref() const;
  void set_device_element_id_ref(::google::protobuf::int64 value);

  // uint32 process_data_ddi = 1;
  void clear_process_data_ddi();
  static const int kProcessDataDdiFieldNumber = 1;
  ::google::protobuf::uint32 process_data_ddi() const;
  void set_process_data_ddi(::google::protobuf::uint32 value);

  // uint32 data_log_pgn_start_bit = 5;
  void clear_data_log_pgn_start_bit();
  static const int kDataLogPgnStartBitFieldNumber = 5;
  ::google::protobuf::uint32 data_log_pgn_start_bit() const;
  void set_data_log_pgn_start_bit(::google::protobuf::uint32 value);

  // uint64 data_log_pgn = 4;
  void clear_data_log_pgn();
  static const int kDataLogPgnFieldNumber = 4;
  ::google::protobuf::uint64 data_log_pgn() const;
  void set_data_log_pgn(::google::protobuf::uint64 value);

  // uint32 data_log_pgn_stop_bit = 6;
  void clear_data_log_pgn_stop_bit();
  static const int kDataLogPgnStopBitFieldNumber = 6;
  ::google::protobuf::uint32 data_log_pgn_stop_bit() const;
  void set_data_log_pgn_stop_bit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:efdi.DataLogValueIntOnly)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::int64 process_data_value_;
  ::google::protobuf::int64 device_element_id_ref_;
  ::google::protobuf::uint32 process_data_ddi_;
  ::google::protobuf::uint32 data_log_pgn_start_bit_;
  ::google::protobuf::uint64 data_log_pgn_;
  ::google::protobuf::uint32 data_log_pgn_stop_bit_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsDataLogValueIntOnlyImpl();
};
// -------------------------------------------------------------------

class Device : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.Device) */ {
 public:
  Device();
  virtual ~Device();

  Device(const Device& from);

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(Device&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Device& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(Device* other);
  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Device* New() const PROTOBUF_FINAL { return New(NULL); }

  Device* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Device* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .efdi.DeviceElement device_element = 8;
  int device_element_size() const;
  void clear_device_element();
  static const int kDeviceElementFieldNumber = 8;
  const ::efdi::DeviceElement& device_element(int index) const;
  ::efdi::DeviceElement* mutable_device_element(int index);
  ::efdi::DeviceElement* add_device_element();
  ::google::protobuf::RepeatedPtrField< ::efdi::DeviceElement >*
      mutable_device_element();
  const ::google::protobuf::RepeatedPtrField< ::efdi::DeviceElement >&
      device_element() const;

  // repeated .efdi.DeviceProcessData device_process_data = 9;
  int device_process_data_size() const;
  void clear_device_process_data();
  static const int kDeviceProcessDataFieldNumber = 9;
  const ::efdi::DeviceProcessData& device_process_data(int index) const;
  ::efdi::DeviceProcessData* mutable_device_process_data(int index);
  ::efdi::DeviceProcessData* add_device_process_data();
  ::google::protobuf::RepeatedPtrField< ::efdi::DeviceProcessData >*
      mutable_device_process_data();
  const ::google::protobuf::RepeatedPtrField< ::efdi::DeviceProcessData >&
      device_process_data() const;

  // repeated .efdi.DeviceProperty device_property = 10;
  int device_property_size() const;
  void clear_device_property();
  static const int kDevicePropertyFieldNumber = 10;
  const ::efdi::DeviceProperty& device_property(int index) const;
  ::efdi::DeviceProperty* mutable_device_property(int index);
  ::efdi::DeviceProperty* add_device_property();
  ::google::protobuf::RepeatedPtrField< ::efdi::DeviceProperty >*
      mutable_device_property();
  const ::google::protobuf::RepeatedPtrField< ::efdi::DeviceProperty >&
      device_property() const;

  // repeated .efdi.DeviceValuePresentation device_value_presentation = 11;
  int device_value_presentation_size() const;
  void clear_device_value_presentation();
  static const int kDeviceValuePresentationFieldNumber = 11;
  const ::efdi::DeviceValuePresentation& device_value_presentation(int index) const;
  ::efdi::DeviceValuePresentation* mutable_device_value_presentation(int index);
  ::efdi::DeviceValuePresentation* add_device_value_presentation();
  ::google::protobuf::RepeatedPtrField< ::efdi::DeviceValuePresentation >*
      mutable_device_value_presentation();
  const ::google::protobuf::RepeatedPtrField< ::efdi::DeviceValuePresentation >&
      device_value_presentation() const;

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string device_designator = 2;
  void clear_device_designator();
  static const int kDeviceDesignatorFieldNumber = 2;
  const ::std::string& device_designator() const;
  void set_device_designator(const ::std::string& value);
  #if LANG_CXX11
  void set_device_designator(::std::string&& value);
  #endif
  void set_device_designator(const char* value);
  void set_device_designator(const char* value, size_t size);
  ::std::string* mutable_device_designator();
  ::std::string* release_device_designator();
  void set_allocated_device_designator(::std::string* device_designator);

  // string device_software_version = 3;
  void clear_device_software_version();
  static const int kDeviceSoftwareVersionFieldNumber = 3;
  const ::std::string& device_software_version() const;
  void set_device_software_version(const ::std::string& value);
  #if LANG_CXX11
  void set_device_software_version(::std::string&& value);
  #endif
  void set_device_software_version(const char* value);
  void set_device_software_version(const char* value, size_t size);
  ::std::string* mutable_device_software_version();
  ::std::string* release_device_software_version();
  void set_allocated_device_software_version(::std::string* device_software_version);

  // bytes client_name = 4;
  void clear_client_name();
  static const int kClientNameFieldNumber = 4;
  const ::std::string& client_name() const;
  void set_client_name(const ::std::string& value);
  #if LANG_CXX11
  void set_client_name(::std::string&& value);
  #endif
  void set_client_name(const char* value);
  void set_client_name(const void* value, size_t size);
  ::std::string* mutable_client_name();
  ::std::string* release_client_name();
  void set_allocated_client_name(::std::string* client_name);

  // string device_serial_number = 5;
  void clear_device_serial_number();
  static const int kDeviceSerialNumberFieldNumber = 5;
  const ::std::string& device_serial_number() const;
  void set_device_serial_number(const ::std::string& value);
  #if LANG_CXX11
  void set_device_serial_number(::std::string&& value);
  #endif
  void set_device_serial_number(const char* value);
  void set_device_serial_number(const char* value, size_t size);
  ::std::string* mutable_device_serial_number();
  ::std::string* release_device_serial_number();
  void set_allocated_device_serial_number(::std::string* device_serial_number);

  // bytes device_structure_label = 6;
  void clear_device_structure_label();
  static const int kDeviceStructureLabelFieldNumber = 6;
  const ::std::string& device_structure_label() const;
  void set_device_structure_label(const ::std::string& value);
  #if LANG_CXX11
  void set_device_structure_label(::std::string&& value);
  #endif
  void set_device_structure_label(const char* value);
  void set_device_structure_label(const void* value, size_t size);
  ::std::string* mutable_device_structure_label();
  ::std::string* release_device_structure_label();
  void set_allocated_device_structure_label(::std::string* device_structure_label);

  // bytes device_localization_label = 7;
  void clear_device_localization_label();
  static const int kDeviceLocalizationLabelFieldNumber = 7;
  const ::std::string& device_localization_label() const;
  void set_device_localization_label(const ::std::string& value);
  #if LANG_CXX11
  void set_device_localization_label(::std::string&& value);
  #endif
  void set_device_localization_label(const char* value);
  void set_device_localization_label(const void* value, size_t size);
  ::std::string* mutable_device_localization_label();
  ::std::string* release_device_localization_label();
  void set_allocated_device_localization_label(::std::string* device_localization_label);

  // .efdi.UID device_id = 1;
  bool has_device_id() const;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  const ::efdi::UID& device_id() const;
  ::efdi::UID* release_device_id();
  ::efdi::UID* mutable_device_id();
  void set_allocated_device_id(::efdi::UID* device_id);

  // @@protoc_insertion_point(class_scope:efdi.Device)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::efdi::DeviceElement > device_element_;
  ::google::protobuf::RepeatedPtrField< ::efdi::DeviceProcessData > device_process_data_;
  ::google::protobuf::RepeatedPtrField< ::efdi::DeviceProperty > device_property_;
  ::google::protobuf::RepeatedPtrField< ::efdi::DeviceValuePresentation > device_value_presentation_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr device_designator_;
  ::google::protobuf::internal::ArenaStringPtr device_software_version_;
  ::google::protobuf::internal::ArenaStringPtr client_name_;
  ::google::protobuf::internal::ArenaStringPtr device_serial_number_;
  ::google::protobuf::internal::ArenaStringPtr device_structure_label_;
  ::google::protobuf::internal::ArenaStringPtr device_localization_label_;
  ::efdi::UID* device_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsDeviceImpl();
};
// -------------------------------------------------------------------

class DeviceAllocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.DeviceAllocation) */ {
 public:
  DeviceAllocation();
  virtual ~DeviceAllocation();

  DeviceAllocation(const DeviceAllocation& from);

  inline DeviceAllocation& operator=(const DeviceAllocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceAllocation(DeviceAllocation&& from) noexcept
    : DeviceAllocation() {
    *this = ::std::move(from);
  }

  inline DeviceAllocation& operator=(DeviceAllocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceAllocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceAllocation* internal_default_instance() {
    return reinterpret_cast<const DeviceAllocation*>(
               &_DeviceAllocation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(DeviceAllocation* other);
  friend void swap(DeviceAllocation& a, DeviceAllocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceAllocation* New() const PROTOBUF_FINAL { return New(NULL); }

  DeviceAllocation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeviceAllocation& from);
  void MergeFrom(const DeviceAllocation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeviceAllocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // bytes client_name_value = 1;
  void clear_client_name_value();
  static const int kClientNameValueFieldNumber = 1;
  const ::std::string& client_name_value() const;
  void set_client_name_value(const ::std::string& value);
  #if LANG_CXX11
  void set_client_name_value(::std::string&& value);
  #endif
  void set_client_name_value(const char* value);
  void set_client_name_value(const void* value, size_t size);
  ::std::string* mutable_client_name_value();
  ::std::string* release_client_name_value();
  void set_allocated_client_name_value(::std::string* client_name_value);

  // bytes client_name_mask = 2;
  void clear_client_name_mask();
  static const int kClientNameMaskFieldNumber = 2;
  const ::std::string& client_name_mask() const;
  void set_client_name_mask(const ::std::string& value);
  #if LANG_CXX11
  void set_client_name_mask(::std::string&& value);
  #endif
  void set_client_name_mask(const char* value);
  void set_client_name_mask(const void* value, size_t size);
  ::std::string* mutable_client_name_mask();
  ::std::string* release_client_name_mask();
  void set_allocated_client_name_mask(::std::string* client_name_mask);

  // .efdi.UID device_id_ref = 3;
  bool has_device_id_ref() const;
  void clear_device_id_ref();
  static const int kDeviceIdRefFieldNumber = 3;
  const ::efdi::UID& device_id_ref() const;
  ::efdi::UID* release_device_id_ref();
  ::efdi::UID* mutable_device_id_ref();
  void set_allocated_device_id_ref(::efdi::UID* device_id_ref);

  // .efdi.AllocationStamp allocation_stamp = 4;
  bool has_allocation_stamp() const;
  void clear_allocation_stamp();
  static const int kAllocationStampFieldNumber = 4;
  const ::efdi::AllocationStamp& allocation_stamp() const;
  ::efdi::AllocationStamp* release_allocation_stamp();
  ::efdi::AllocationStamp* mutable_allocation_stamp();
  void set_allocated_allocation_stamp(::efdi::AllocationStamp* allocation_stamp);

  // @@protoc_insertion_point(class_scope:efdi.DeviceAllocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr client_name_value_;
  ::google::protobuf::internal::ArenaStringPtr client_name_mask_;
  ::efdi::UID* device_id_ref_;
  ::efdi::AllocationStamp* allocation_stamp_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsDeviceAllocationImpl();
};
// -------------------------------------------------------------------

class DeviceElement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.DeviceElement) */ {
 public:
  DeviceElement();
  virtual ~DeviceElement();

  DeviceElement(const DeviceElement& from);

  inline DeviceElement& operator=(const DeviceElement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceElement(DeviceElement&& from) noexcept
    : DeviceElement() {
    *this = ::std::move(from);
  }

  inline DeviceElement& operator=(DeviceElement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceElement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceElement* internal_default_instance() {
    return reinterpret_cast<const DeviceElement*>(
               &_DeviceElement_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(DeviceElement* other);
  friend void swap(DeviceElement& a, DeviceElement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceElement* New() const PROTOBUF_FINAL { return New(NULL); }

  DeviceElement* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeviceElement& from);
  void MergeFrom(const DeviceElement& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeviceElement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DeviceElement_DeviceElementType DeviceElementType;
  static const DeviceElementType C_NOTSET =
    DeviceElement_DeviceElementType_C_NOTSET;
  static const DeviceElementType C_DEVICE =
    DeviceElement_DeviceElementType_C_DEVICE;
  static const DeviceElementType C_FUNCTION =
    DeviceElement_DeviceElementType_C_FUNCTION;
  static const DeviceElementType C_BIN =
    DeviceElement_DeviceElementType_C_BIN;
  static const DeviceElementType C_SECTION =
    DeviceElement_DeviceElementType_C_SECTION;
  static const DeviceElementType C_UNIT =
    DeviceElement_DeviceElementType_C_UNIT;
  static const DeviceElementType C_CONNECTOR =
    DeviceElement_DeviceElementType_C_CONNECTOR;
  static const DeviceElementType C_NAVIGATION =
    DeviceElement_DeviceElementType_C_NAVIGATION;
  static inline bool DeviceElementType_IsValid(int value) {
    return DeviceElement_DeviceElementType_IsValid(value);
  }
  static const DeviceElementType DeviceElementType_MIN =
    DeviceElement_DeviceElementType_DeviceElementType_MIN;
  static const DeviceElementType DeviceElementType_MAX =
    DeviceElement_DeviceElementType_DeviceElementType_MAX;
  static const int DeviceElementType_ARRAYSIZE =
    DeviceElement_DeviceElementType_DeviceElementType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DeviceElementType_descriptor() {
    return DeviceElement_DeviceElementType_descriptor();
  }
  static inline const ::std::string& DeviceElementType_Name(DeviceElementType value) {
    return DeviceElement_DeviceElementType_Name(value);
  }
  static inline bool DeviceElementType_Parse(const ::std::string& name,
      DeviceElementType* value) {
    return DeviceElement_DeviceElementType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .efdi.DeviceObjectReference device_object_reference = 7;
  int device_object_reference_size() const;
  void clear_device_object_reference();
  static const int kDeviceObjectReferenceFieldNumber = 7;
  const ::efdi::DeviceObjectReference& device_object_reference(int index) const;
  ::efdi::DeviceObjectReference* mutable_device_object_reference(int index);
  ::efdi::DeviceObjectReference* add_device_object_reference();
  ::google::protobuf::RepeatedPtrField< ::efdi::DeviceObjectReference >*
      mutable_device_object_reference();
  const ::google::protobuf::RepeatedPtrField< ::efdi::DeviceObjectReference >&
      device_object_reference() const;

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string device_element_designator = 4;
  void clear_device_element_designator();
  static const int kDeviceElementDesignatorFieldNumber = 4;
  const ::std::string& device_element_designator() const;
  void set_device_element_designator(const ::std::string& value);
  #if LANG_CXX11
  void set_device_element_designator(::std::string&& value);
  #endif
  void set_device_element_designator(const char* value);
  void set_device_element_designator(const char* value, size_t size);
  ::std::string* mutable_device_element_designator();
  ::std::string* release_device_element_designator();
  void set_allocated_device_element_designator(::std::string* device_element_designator);

  // .efdi.UID device_element_id = 1;
  bool has_device_element_id() const;
  void clear_device_element_id();
  static const int kDeviceElementIdFieldNumber = 1;
  const ::efdi::UID& device_element_id() const;
  ::efdi::UID* release_device_element_id();
  ::efdi::UID* mutable_device_element_id();
  void set_allocated_device_element_id(::efdi::UID* device_element_id);

  // uint32 device_element_object_id = 2;
  void clear_device_element_object_id();
  static const int kDeviceElementObjectIdFieldNumber = 2;
  ::google::protobuf::uint32 device_element_object_id() const;
  void set_device_element_object_id(::google::protobuf::uint32 value);

  // .efdi.DeviceElement.DeviceElementType device_element_type = 3;
  void clear_device_element_type();
  static const int kDeviceElementTypeFieldNumber = 3;
  ::efdi::DeviceElement_DeviceElementType device_element_type() const;
  void set_device_element_type(::efdi::DeviceElement_DeviceElementType value);

  // uint32 device_element_number = 5;
  void clear_device_element_number();
  static const int kDeviceElementNumberFieldNumber = 5;
  ::google::protobuf::uint32 device_element_number() const;
  void set_device_element_number(::google::protobuf::uint32 value);

  // uint32 parent_object_id = 6;
  void clear_parent_object_id();
  static const int kParentObjectIdFieldNumber = 6;
  ::google::protobuf::uint32 parent_object_id() const;
  void set_parent_object_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:efdi.DeviceElement)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::efdi::DeviceObjectReference > device_object_reference_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr device_element_designator_;
  ::efdi::UID* device_element_id_;
  ::google::protobuf::uint32 device_element_object_id_;
  int device_element_type_;
  ::google::protobuf::uint32 device_element_number_;
  ::google::protobuf::uint32 parent_object_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsDeviceElementImpl();
};
// -------------------------------------------------------------------

class DeviceObjectReference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.DeviceObjectReference) */ {
 public:
  DeviceObjectReference();
  virtual ~DeviceObjectReference();

  DeviceObjectReference(const DeviceObjectReference& from);

  inline DeviceObjectReference& operator=(const DeviceObjectReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceObjectReference(DeviceObjectReference&& from) noexcept
    : DeviceObjectReference() {
    *this = ::std::move(from);
  }

  inline DeviceObjectReference& operator=(DeviceObjectReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceObjectReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceObjectReference* internal_default_instance() {
    return reinterpret_cast<const DeviceObjectReference*>(
               &_DeviceObjectReference_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(DeviceObjectReference* other);
  friend void swap(DeviceObjectReference& a, DeviceObjectReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceObjectReference* New() const PROTOBUF_FINAL { return New(NULL); }

  DeviceObjectReference* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeviceObjectReference& from);
  void MergeFrom(const DeviceObjectReference& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeviceObjectReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // uint32 device_object_id = 1;
  void clear_device_object_id();
  static const int kDeviceObjectIdFieldNumber = 1;
  ::google::protobuf::uint32 device_object_id() const;
  void set_device_object_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:efdi.DeviceObjectReference)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::uint32 device_object_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsDeviceObjectReferenceImpl();
};
// -------------------------------------------------------------------

class DeviceProcessData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.DeviceProcessData) */ {
 public:
  DeviceProcessData();
  virtual ~DeviceProcessData();

  DeviceProcessData(const DeviceProcessData& from);

  inline DeviceProcessData& operator=(const DeviceProcessData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceProcessData(DeviceProcessData&& from) noexcept
    : DeviceProcessData() {
    *this = ::std::move(from);
  }

  inline DeviceProcessData& operator=(DeviceProcessData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceProcessData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceProcessData* internal_default_instance() {
    return reinterpret_cast<const DeviceProcessData*>(
               &_DeviceProcessData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(DeviceProcessData* other);
  friend void swap(DeviceProcessData& a, DeviceProcessData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceProcessData* New() const PROTOBUF_FINAL { return New(NULL); }

  DeviceProcessData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeviceProcessData& from);
  void MergeFrom(const DeviceProcessData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeviceProcessData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string device_process_data_designator = 5;
  void clear_device_process_data_designator();
  static const int kDeviceProcessDataDesignatorFieldNumber = 5;
  const ::std::string& device_process_data_designator() const;
  void set_device_process_data_designator(const ::std::string& value);
  #if LANG_CXX11
  void set_device_process_data_designator(::std::string&& value);
  #endif
  void set_device_process_data_designator(const char* value);
  void set_device_process_data_designator(const char* value, size_t size);
  ::std::string* mutable_device_process_data_designator();
  ::std::string* release_device_process_data_designator();
  void set_allocated_device_process_data_designator(::std::string* device_process_data_designator);

  // uint32 device_process_data_object_id = 1;
  void clear_device_process_data_object_id();
  static const int kDeviceProcessDataObjectIdFieldNumber = 1;
  ::google::protobuf::uint32 device_process_data_object_id() const;
  void set_device_process_data_object_id(::google::protobuf::uint32 value);

  // uint32 device_process_data_ddi = 2;
  void clear_device_process_data_ddi();
  static const int kDeviceProcessDataDdiFieldNumber = 2;
  ::google::protobuf::uint32 device_process_data_ddi() const;
  void set_device_process_data_ddi(::google::protobuf::uint32 value);

  // uint32 device_process_data_property = 3;
  void clear_device_process_data_property();
  static const int kDeviceProcessDataPropertyFieldNumber = 3;
  ::google::protobuf::uint32 device_process_data_property() const;
  void set_device_process_data_property(::google::protobuf::uint32 value);

  // uint32 device_process_data_trigger_methods = 4;
  void clear_device_process_data_trigger_methods();
  static const int kDeviceProcessDataTriggerMethodsFieldNumber = 4;
  ::google::protobuf::uint32 device_process_data_trigger_methods() const;
  void set_device_process_data_trigger_methods(::google::protobuf::uint32 value);

  // uint32 device_value_presentation_object_id = 6;
  void clear_device_value_presentation_object_id();
  static const int kDeviceValuePresentationObjectIdFieldNumber = 6;
  ::google::protobuf::uint32 device_value_presentation_object_id() const;
  void set_device_value_presentation_object_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:efdi.DeviceProcessData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr device_process_data_designator_;
  ::google::protobuf::uint32 device_process_data_object_id_;
  ::google::protobuf::uint32 device_process_data_ddi_;
  ::google::protobuf::uint32 device_process_data_property_;
  ::google::protobuf::uint32 device_process_data_trigger_methods_;
  ::google::protobuf::uint32 device_value_presentation_object_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsDeviceProcessDataImpl();
};
// -------------------------------------------------------------------

class DeviceProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.DeviceProperty) */ {
 public:
  DeviceProperty();
  virtual ~DeviceProperty();

  DeviceProperty(const DeviceProperty& from);

  inline DeviceProperty& operator=(const DeviceProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceProperty(DeviceProperty&& from) noexcept
    : DeviceProperty() {
    *this = ::std::move(from);
  }

  inline DeviceProperty& operator=(DeviceProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceProperty* internal_default_instance() {
    return reinterpret_cast<const DeviceProperty*>(
               &_DeviceProperty_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(DeviceProperty* other);
  friend void swap(DeviceProperty& a, DeviceProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceProperty* New() const PROTOBUF_FINAL { return New(NULL); }

  DeviceProperty* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeviceProperty& from);
  void MergeFrom(const DeviceProperty& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeviceProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string device_property_designator = 4;
  void clear_device_property_designator();
  static const int kDevicePropertyDesignatorFieldNumber = 4;
  const ::std::string& device_property_designator() const;
  void set_device_property_designator(const ::std::string& value);
  #if LANG_CXX11
  void set_device_property_designator(::std::string&& value);
  #endif
  void set_device_property_designator(const char* value);
  void set_device_property_designator(const char* value, size_t size);
  ::std::string* mutable_device_property_designator();
  ::std::string* release_device_property_designator();
  void set_allocated_device_property_designator(::std::string* device_property_designator);

  // uint32 device_property_object_id = 1;
  void clear_device_property_object_id();
  static const int kDevicePropertyObjectIdFieldNumber = 1;
  ::google::protobuf::uint32 device_property_object_id() const;
  void set_device_property_object_id(::google::protobuf::uint32 value);

  // uint32 device_property_ddi = 2;
  void clear_device_property_ddi();
  static const int kDevicePropertyDdiFieldNumber = 2;
  ::google::protobuf::uint32 device_property_ddi() const;
  void set_device_property_ddi(::google::protobuf::uint32 value);

  // sint64 device_property_value = 3;
  void clear_device_property_value();
  static const int kDevicePropertyValueFieldNumber = 3;
  ::google::protobuf::int64 device_property_value() const;
  void set_device_property_value(::google::protobuf::int64 value);

  // uint32 device_value_presentation_object_id = 5;
  void clear_device_value_presentation_object_id();
  static const int kDeviceValuePresentationObjectIdFieldNumber = 5;
  ::google::protobuf::uint32 device_value_presentation_object_id() const;
  void set_device_value_presentation_object_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:efdi.DeviceProperty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr device_property_designator_;
  ::google::protobuf::uint32 device_property_object_id_;
  ::google::protobuf::uint32 device_property_ddi_;
  ::google::protobuf::int64 device_property_value_;
  ::google::protobuf::uint32 device_value_presentation_object_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsDevicePropertyImpl();
};
// -------------------------------------------------------------------

class DeviceValuePresentation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.DeviceValuePresentation) */ {
 public:
  DeviceValuePresentation();
  virtual ~DeviceValuePresentation();

  DeviceValuePresentation(const DeviceValuePresentation& from);

  inline DeviceValuePresentation& operator=(const DeviceValuePresentation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceValuePresentation(DeviceValuePresentation&& from) noexcept
    : DeviceValuePresentation() {
    *this = ::std::move(from);
  }

  inline DeviceValuePresentation& operator=(DeviceValuePresentation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceValuePresentation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceValuePresentation* internal_default_instance() {
    return reinterpret_cast<const DeviceValuePresentation*>(
               &_DeviceValuePresentation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(DeviceValuePresentation* other);
  friend void swap(DeviceValuePresentation& a, DeviceValuePresentation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceValuePresentation* New() const PROTOBUF_FINAL { return New(NULL); }

  DeviceValuePresentation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeviceValuePresentation& from);
  void MergeFrom(const DeviceValuePresentation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeviceValuePresentation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string unit_designator = 5;
  void clear_unit_designator();
  static const int kUnitDesignatorFieldNumber = 5;
  const ::std::string& unit_designator() const;
  void set_unit_designator(const ::std::string& value);
  #if LANG_CXX11
  void set_unit_designator(::std::string&& value);
  #endif
  void set_unit_designator(const char* value);
  void set_unit_designator(const char* value, size_t size);
  ::std::string* mutable_unit_designator();
  ::std::string* release_unit_designator();
  void set_allocated_unit_designator(::std::string* unit_designator);

  // sint64 offset = 2;
  void clear_offset();
  static const int kOffsetFieldNumber = 2;
  ::google::protobuf::int64 offset() const;
  void set_offset(::google::protobuf::int64 value);

  // uint32 device_value_presentation_object_id = 1;
  void clear_device_value_presentation_object_id();
  static const int kDeviceValuePresentationObjectIdFieldNumber = 1;
  ::google::protobuf::uint32 device_value_presentation_object_id() const;
  void set_device_value_presentation_object_id(::google::protobuf::uint32 value);

  // uint32 number_of_decimals = 4;
  void clear_number_of_decimals();
  static const int kNumberOfDecimalsFieldNumber = 4;
  ::google::protobuf::uint32 number_of_decimals() const;
  void set_number_of_decimals(::google::protobuf::uint32 value);

  // double scale = 3;
  void clear_scale();
  static const int kScaleFieldNumber = 3;
  double scale() const;
  void set_scale(double value);

  // @@protoc_insertion_point(class_scope:efdi.DeviceValuePresentation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr unit_designator_;
  ::google::protobuf::int64 offset_;
  ::google::protobuf::uint32 device_value_presentation_object_id_;
  ::google::protobuf::uint32 number_of_decimals_;
  double scale_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsDeviceValuePresentationImpl();
};
// -------------------------------------------------------------------

class Farm : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.Farm) */ {
 public:
  Farm();
  virtual ~Farm();

  Farm(const Farm& from);

  inline Farm& operator=(const Farm& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Farm(Farm&& from) noexcept
    : Farm() {
    *this = ::std::move(from);
  }

  inline Farm& operator=(Farm&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Farm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Farm* internal_default_instance() {
    return reinterpret_cast<const Farm*>(
               &_Farm_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(Farm* other);
  friend void swap(Farm& a, Farm& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Farm* New() const PROTOBUF_FINAL { return New(NULL); }

  Farm* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Farm& from);
  void MergeFrom(const Farm& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Farm* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string farm_designator = 2;
  void clear_farm_designator();
  static const int kFarmDesignatorFieldNumber = 2;
  const ::std::string& farm_designator() const;
  void set_farm_designator(const ::std::string& value);
  #if LANG_CXX11
  void set_farm_designator(::std::string&& value);
  #endif
  void set_farm_designator(const char* value);
  void set_farm_designator(const char* value, size_t size);
  ::std::string* mutable_farm_designator();
  ::std::string* release_farm_designator();
  void set_allocated_farm_designator(::std::string* farm_designator);

  // string farm_street = 3;
  void clear_farm_street();
  static const int kFarmStreetFieldNumber = 3;
  const ::std::string& farm_street() const;
  void set_farm_street(const ::std::string& value);
  #if LANG_CXX11
  void set_farm_street(::std::string&& value);
  #endif
  void set_farm_street(const char* value);
  void set_farm_street(const char* value, size_t size);
  ::std::string* mutable_farm_street();
  ::std::string* release_farm_street();
  void set_allocated_farm_street(::std::string* farm_street);

  // string farm_po_box = 4;
  void clear_farm_po_box();
  static const int kFarmPoBoxFieldNumber = 4;
  const ::std::string& farm_po_box() const;
  void set_farm_po_box(const ::std::string& value);
  #if LANG_CXX11
  void set_farm_po_box(::std::string&& value);
  #endif
  void set_farm_po_box(const char* value);
  void set_farm_po_box(const char* value, size_t size);
  ::std::string* mutable_farm_po_box();
  ::std::string* release_farm_po_box();
  void set_allocated_farm_po_box(::std::string* farm_po_box);

  // string farm_postal_code = 5;
  void clear_farm_postal_code();
  static const int kFarmPostalCodeFieldNumber = 5;
  const ::std::string& farm_postal_code() const;
  void set_farm_postal_code(const ::std::string& value);
  #if LANG_CXX11
  void set_farm_postal_code(::std::string&& value);
  #endif
  void set_farm_postal_code(const char* value);
  void set_farm_postal_code(const char* value, size_t size);
  ::std::string* mutable_farm_postal_code();
  ::std::string* release_farm_postal_code();
  void set_allocated_farm_postal_code(::std::string* farm_postal_code);

  // string farm_city = 6;
  void clear_farm_city();
  static const int kFarmCityFieldNumber = 6;
  const ::std::string& farm_city() const;
  void set_farm_city(const ::std::string& value);
  #if LANG_CXX11
  void set_farm_city(::std::string&& value);
  #endif
  void set_farm_city(const char* value);
  void set_farm_city(const char* value, size_t size);
  ::std::string* mutable_farm_city();
  ::std::string* release_farm_city();
  void set_allocated_farm_city(::std::string* farm_city);

  // string farm_state = 7;
  void clear_farm_state();
  static const int kFarmStateFieldNumber = 7;
  const ::std::string& farm_state() const;
  void set_farm_state(const ::std::string& value);
  #if LANG_CXX11
  void set_farm_state(::std::string&& value);
  #endif
  void set_farm_state(const char* value);
  void set_farm_state(const char* value, size_t size);
  ::std::string* mutable_farm_state();
  ::std::string* release_farm_state();
  void set_allocated_farm_state(::std::string* farm_state);

  // string farm_country = 8;
  void clear_farm_country();
  static const int kFarmCountryFieldNumber = 8;
  const ::std::string& farm_country() const;
  void set_farm_country(const ::std::string& value);
  #if LANG_CXX11
  void set_farm_country(::std::string&& value);
  #endif
  void set_farm_country(const char* value);
  void set_farm_country(const char* value, size_t size);
  ::std::string* mutable_farm_country();
  ::std::string* release_farm_country();
  void set_allocated_farm_country(::std::string* farm_country);

  // .efdi.UID farm_id = 1;
  bool has_farm_id() const;
  void clear_farm_id();
  static const int kFarmIdFieldNumber = 1;
  const ::efdi::UID& farm_id() const;
  ::efdi::UID* release_farm_id();
  ::efdi::UID* mutable_farm_id();
  void set_allocated_farm_id(::efdi::UID* farm_id);

  // .efdi.UID customer_id_ref = 9;
  bool has_customer_id_ref() const;
  void clear_customer_id_ref();
  static const int kCustomerIdRefFieldNumber = 9;
  const ::efdi::UID& customer_id_ref() const;
  ::efdi::UID* release_customer_id_ref();
  ::efdi::UID* mutable_customer_id_ref();
  void set_allocated_customer_id_ref(::efdi::UID* customer_id_ref);

  // @@protoc_insertion_point(class_scope:efdi.Farm)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr farm_designator_;
  ::google::protobuf::internal::ArenaStringPtr farm_street_;
  ::google::protobuf::internal::ArenaStringPtr farm_po_box_;
  ::google::protobuf::internal::ArenaStringPtr farm_postal_code_;
  ::google::protobuf::internal::ArenaStringPtr farm_city_;
  ::google::protobuf::internal::ArenaStringPtr farm_state_;
  ::google::protobuf::internal::ArenaStringPtr farm_country_;
  ::efdi::UID* farm_id_;
  ::efdi::UID* customer_id_ref_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsFarmImpl();
};
// -------------------------------------------------------------------

class Grid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.Grid) */ {
 public:
  Grid();
  virtual ~Grid();

  Grid(const Grid& from);

  inline Grid& operator=(const Grid& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Grid(Grid&& from) noexcept
    : Grid() {
    *this = ::std::move(from);
  }

  inline Grid& operator=(Grid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Grid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Grid* internal_default_instance() {
    return reinterpret_cast<const Grid*>(
               &_Grid_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(Grid* other);
  friend void swap(Grid& a, Grid& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Grid* New() const PROTOBUF_FINAL { return New(NULL); }

  Grid* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Grid& from);
  void MergeFrom(const Grid& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Grid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Grid_GridType GridType;
  static const GridType I_NOTSET =
    Grid_GridType_I_NOTSET;
  static const GridType I_GRID_TYPE_1 =
    Grid_GridType_I_GRID_TYPE_1;
  static const GridType I_GRID_TYPE_2 =
    Grid_GridType_I_GRID_TYPE_2;
  static inline bool GridType_IsValid(int value) {
    return Grid_GridType_IsValid(value);
  }
  static const GridType GridType_MIN =
    Grid_GridType_GridType_MIN;
  static const GridType GridType_MAX =
    Grid_GridType_GridType_MAX;
  static const int GridType_ARRAYSIZE =
    Grid_GridType_GridType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GridType_descriptor() {
    return Grid_GridType_descriptor();
  }
  static inline const ::std::string& GridType_Name(GridType value) {
    return Grid_GridType_Name(value);
  }
  static inline bool GridType_Parse(const ::std::string& name,
      GridType* value) {
    return Grid_GridType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // .efdi.UID filename = 7;
  bool has_filename() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 7;
  const ::efdi::UID& filename() const;
  ::efdi::UID* release_filename();
  ::efdi::UID* mutable_filename();
  void set_allocated_filename(::efdi::UID* filename);

  // double grid_minimum_north_position = 1;
  void clear_grid_minimum_north_position();
  static const int kGridMinimumNorthPositionFieldNumber = 1;
  double grid_minimum_north_position() const;
  void set_grid_minimum_north_position(double value);

  // double grid_minimum_east_position = 2;
  void clear_grid_minimum_east_position();
  static const int kGridMinimumEastPositionFieldNumber = 2;
  double grid_minimum_east_position() const;
  void set_grid_minimum_east_position(double value);

  // double grid_cell_north_size = 3;
  void clear_grid_cell_north_size();
  static const int kGridCellNorthSizeFieldNumber = 3;
  double grid_cell_north_size() const;
  void set_grid_cell_north_size(double value);

  // double grid_cell_east_size = 4;
  void clear_grid_cell_east_size();
  static const int kGridCellEastSizeFieldNumber = 4;
  double grid_cell_east_size() const;
  void set_grid_cell_east_size(double value);

  // uint64 grid_maximum_column = 5;
  void clear_grid_maximum_column();
  static const int kGridMaximumColumnFieldNumber = 5;
  ::google::protobuf::uint64 grid_maximum_column() const;
  void set_grid_maximum_column(::google::protobuf::uint64 value);

  // uint64 grid_maximum_row = 6;
  void clear_grid_maximum_row();
  static const int kGridMaximumRowFieldNumber = 6;
  ::google::protobuf::uint64 grid_maximum_row() const;
  void set_grid_maximum_row(::google::protobuf::uint64 value);

  // uint64 filelength = 8;
  void clear_filelength();
  static const int kFilelengthFieldNumber = 8;
  ::google::protobuf::uint64 filelength() const;
  void set_filelength(::google::protobuf::uint64 value);

  // .efdi.Grid.GridType grid_type = 9;
  void clear_grid_type();
  static const int kGridTypeFieldNumber = 9;
  ::efdi::Grid_GridType grid_type() const;
  void set_grid_type(::efdi::Grid_GridType value);

  // uint32 treatment_zone_code = 10;
  void clear_treatment_zone_code();
  static const int kTreatmentZoneCodeFieldNumber = 10;
  ::google::protobuf::uint32 treatment_zone_code() const;
  void set_treatment_zone_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:efdi.Grid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::efdi::UID* filename_;
  double grid_minimum_north_position_;
  double grid_minimum_east_position_;
  double grid_cell_north_size_;
  double grid_cell_east_size_;
  ::google::protobuf::uint64 grid_maximum_column_;
  ::google::protobuf::uint64 grid_maximum_row_;
  ::google::protobuf::uint64 filelength_;
  int grid_type_;
  ::google::protobuf::uint32 treatment_zone_code_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsGridImpl();
};
// -------------------------------------------------------------------

class GuidanceAllocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.GuidanceAllocation) */ {
 public:
  GuidanceAllocation();
  virtual ~GuidanceAllocation();

  GuidanceAllocation(const GuidanceAllocation& from);

  inline GuidanceAllocation& operator=(const GuidanceAllocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GuidanceAllocation(GuidanceAllocation&& from) noexcept
    : GuidanceAllocation() {
    *this = ::std::move(from);
  }

  inline GuidanceAllocation& operator=(GuidanceAllocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuidanceAllocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GuidanceAllocation* internal_default_instance() {
    return reinterpret_cast<const GuidanceAllocation*>(
               &_GuidanceAllocation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(GuidanceAllocation* other);
  friend void swap(GuidanceAllocation& a, GuidanceAllocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GuidanceAllocation* New() const PROTOBUF_FINAL { return New(NULL); }

  GuidanceAllocation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GuidanceAllocation& from);
  void MergeFrom(const GuidanceAllocation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GuidanceAllocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .efdi.GuidanceShift guidance_shift = 3;
  int guidance_shift_size() const;
  void clear_guidance_shift();
  static const int kGuidanceShiftFieldNumber = 3;
  const ::efdi::GuidanceShift& guidance_shift(int index) const;
  ::efdi::GuidanceShift* mutable_guidance_shift(int index);
  ::efdi::GuidanceShift* add_guidance_shift();
  ::google::protobuf::RepeatedPtrField< ::efdi::GuidanceShift >*
      mutable_guidance_shift();
  const ::google::protobuf::RepeatedPtrField< ::efdi::GuidanceShift >&
      guidance_shift() const;

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // .efdi.UID guidance_group_id_ref = 1;
  bool has_guidance_group_id_ref() const;
  void clear_guidance_group_id_ref();
  static const int kGuidanceGroupIdRefFieldNumber = 1;
  const ::efdi::UID& guidance_group_id_ref() const;
  ::efdi::UID* release_guidance_group_id_ref();
  ::efdi::UID* mutable_guidance_group_id_ref();
  void set_allocated_guidance_group_id_ref(::efdi::UID* guidance_group_id_ref);

  // .efdi.AllocationStamp allocation_stamp = 2;
  bool has_allocation_stamp() const;
  void clear_allocation_stamp();
  static const int kAllocationStampFieldNumber = 2;
  const ::efdi::AllocationStamp& allocation_stamp() const;
  ::efdi::AllocationStamp* release_allocation_stamp();
  ::efdi::AllocationStamp* mutable_allocation_stamp();
  void set_allocated_allocation_stamp(::efdi::AllocationStamp* allocation_stamp);

  // @@protoc_insertion_point(class_scope:efdi.GuidanceAllocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::efdi::GuidanceShift > guidance_shift_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::efdi::UID* guidance_group_id_ref_;
  ::efdi::AllocationStamp* allocation_stamp_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsGuidanceAllocationImpl();
};
// -------------------------------------------------------------------

class GuidanceGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.GuidanceGroup) */ {
 public:
  GuidanceGroup();
  virtual ~GuidanceGroup();

  GuidanceGroup(const GuidanceGroup& from);

  inline GuidanceGroup& operator=(const GuidanceGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GuidanceGroup(GuidanceGroup&& from) noexcept
    : GuidanceGroup() {
    *this = ::std::move(from);
  }

  inline GuidanceGroup& operator=(GuidanceGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuidanceGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GuidanceGroup* internal_default_instance() {
    return reinterpret_cast<const GuidanceGroup*>(
               &_GuidanceGroup_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(GuidanceGroup* other);
  friend void swap(GuidanceGroup& a, GuidanceGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GuidanceGroup* New() const PROTOBUF_FINAL { return New(NULL); }

  GuidanceGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GuidanceGroup& from);
  void MergeFrom(const GuidanceGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GuidanceGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .efdi.GuidancePattern guidance_pattern = 3;
  int guidance_pattern_size() const;
  void clear_guidance_pattern();
  static const int kGuidancePatternFieldNumber = 3;
  const ::efdi::GuidancePattern& guidance_pattern(int index) const;
  ::efdi::GuidancePattern* mutable_guidance_pattern(int index);
  ::efdi::GuidancePattern* add_guidance_pattern();
  ::google::protobuf::RepeatedPtrField< ::efdi::GuidancePattern >*
      mutable_guidance_pattern();
  const ::google::protobuf::RepeatedPtrField< ::efdi::GuidancePattern >&
      guidance_pattern() const;

  // repeated .efdi.Polygon boundary_polygon = 4;
  int boundary_polygon_size() const;
  void clear_boundary_polygon();
  static const int kBoundaryPolygonFieldNumber = 4;
  const ::efdi::Polygon& boundary_polygon(int index) const;
  ::efdi::Polygon* mutable_boundary_polygon(int index);
  ::efdi::Polygon* add_boundary_polygon();
  ::google::protobuf::RepeatedPtrField< ::efdi::Polygon >*
      mutable_boundary_polygon();
  const ::google::protobuf::RepeatedPtrField< ::efdi::Polygon >&
      boundary_polygon() const;

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string guidance_group_designator = 2;
  void clear_guidance_group_designator();
  static const int kGuidanceGroupDesignatorFieldNumber = 2;
  const ::std::string& guidance_group_designator() const;
  void set_guidance_group_designator(const ::std::string& value);
  #if LANG_CXX11
  void set_guidance_group_designator(::std::string&& value);
  #endif
  void set_guidance_group_designator(const char* value);
  void set_guidance_group_designator(const char* value, size_t size);
  ::std::string* mutable_guidance_group_designator();
  ::std::string* release_guidance_group_designator();
  void set_allocated_guidance_group_designator(::std::string* guidance_group_designator);

  // .efdi.UID guidance_group_id = 1;
  bool has_guidance_group_id() const;
  void clear_guidance_group_id();
  static const int kGuidanceGroupIdFieldNumber = 1;
  const ::efdi::UID& guidance_group_id() const;
  ::efdi::UID* release_guidance_group_id();
  ::efdi::UID* mutable_guidance_group_id();
  void set_allocated_guidance_group_id(::efdi::UID* guidance_group_id);

  // @@protoc_insertion_point(class_scope:efdi.GuidanceGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::efdi::GuidancePattern > guidance_pattern_;
  ::google::protobuf::RepeatedPtrField< ::efdi::Polygon > boundary_polygon_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr guidance_group_designator_;
  ::efdi::UID* guidance_group_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsGuidanceGroupImpl();
};
// -------------------------------------------------------------------

class GuidancePattern : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.GuidancePattern) */ {
 public:
  GuidancePattern();
  virtual ~GuidancePattern();

  GuidancePattern(const GuidancePattern& from);

  inline GuidancePattern& operator=(const GuidancePattern& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GuidancePattern(GuidancePattern&& from) noexcept
    : GuidancePattern() {
    *this = ::std::move(from);
  }

  inline GuidancePattern& operator=(GuidancePattern&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuidancePattern& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GuidancePattern* internal_default_instance() {
    return reinterpret_cast<const GuidancePattern*>(
               &_GuidancePattern_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(GuidancePattern* other);
  friend void swap(GuidancePattern& a, GuidancePattern& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GuidancePattern* New() const PROTOBUF_FINAL { return New(NULL); }

  GuidancePattern* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GuidancePattern& from);
  void MergeFrom(const GuidancePattern& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GuidancePattern* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GuidancePattern_GuidancePatternType GuidancePatternType;
  static const GuidancePatternType C_NOTSET =
    GuidancePattern_GuidancePatternType_C_NOTSET;
  static const GuidancePatternType C_AB =
    GuidancePattern_GuidancePatternType_C_AB;
  static const GuidancePatternType C_A_PLUS =
    GuidancePattern_GuidancePatternType_C_A_PLUS;
  static const GuidancePatternType C_CURVE =
    GuidancePattern_GuidancePatternType_C_CURVE;
  static const GuidancePatternType C_PIVOT =
    GuidancePattern_GuidancePatternType_C_PIVOT;
  static const GuidancePatternType C_SPIRAL =
    GuidancePattern_GuidancePatternType_C_SPIRAL;
  static inline bool GuidancePatternType_IsValid(int value) {
    return GuidancePattern_GuidancePatternType_IsValid(value);
  }
  static const GuidancePatternType GuidancePatternType_MIN =
    GuidancePattern_GuidancePatternType_GuidancePatternType_MIN;
  static const GuidancePatternType GuidancePatternType_MAX =
    GuidancePattern_GuidancePatternType_GuidancePatternType_MAX;
  static const int GuidancePatternType_ARRAYSIZE =
    GuidancePattern_GuidancePatternType_GuidancePatternType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GuidancePatternType_descriptor() {
    return GuidancePattern_GuidancePatternType_descriptor();
  }
  static inline const ::std::string& GuidancePatternType_Name(GuidancePatternType value) {
    return GuidancePattern_GuidancePatternType_Name(value);
  }
  static inline bool GuidancePatternType_Parse(const ::std::string& name,
      GuidancePatternType* value) {
    return GuidancePattern_GuidancePatternType_Parse(name, value);
  }

  typedef GuidancePattern_GuidancePatternOptions GuidancePatternOptions;
  static const GuidancePatternOptions D_NOTSET =
    GuidancePattern_GuidancePatternOptions_D_NOTSET;
  static const GuidancePatternOptions D_CLOCKWISE =
    GuidancePattern_GuidancePatternOptions_D_CLOCKWISE;
  static const GuidancePatternOptions D_COUNTER_CLOCKWISE =
    GuidancePattern_GuidancePatternOptions_D_COUNTER_CLOCKWISE;
  static const GuidancePatternOptions D_FULL_CIRCLE =
    GuidancePattern_GuidancePatternOptions_D_FULL_CIRCLE;
  static inline bool GuidancePatternOptions_IsValid(int value) {
    return GuidancePattern_GuidancePatternOptions_IsValid(value);
  }
  static const GuidancePatternOptions GuidancePatternOptions_MIN =
    GuidancePattern_GuidancePatternOptions_GuidancePatternOptions_MIN;
  static const GuidancePatternOptions GuidancePatternOptions_MAX =
    GuidancePattern_GuidancePatternOptions_GuidancePatternOptions_MAX;
  static const int GuidancePatternOptions_ARRAYSIZE =
    GuidancePattern_GuidancePatternOptions_GuidancePatternOptions_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GuidancePatternOptions_descriptor() {
    return GuidancePattern_GuidancePatternOptions_descriptor();
  }
  static inline const ::std::string& GuidancePatternOptions_Name(GuidancePatternOptions value) {
    return GuidancePattern_GuidancePatternOptions_Name(value);
  }
  static inline bool GuidancePatternOptions_Parse(const ::std::string& name,
      GuidancePatternOptions* value) {
    return GuidancePattern_GuidancePatternOptions_Parse(name, value);
  }

  typedef GuidancePattern_GuidancePatternPropagationDirection GuidancePatternPropagationDirection;
  static const GuidancePatternPropagationDirection E_NOTSET =
    GuidancePattern_GuidancePatternPropagationDirection_E_NOTSET;
  static const GuidancePatternPropagationDirection E_BOTH =
    GuidancePattern_GuidancePatternPropagationDirection_E_BOTH;
  static const GuidancePatternPropagationDirection E_LEFT =
    GuidancePattern_GuidancePatternPropagationDirection_E_LEFT;
  static const GuidancePatternPropagationDirection E_RIGHT =
    GuidancePattern_GuidancePatternPropagationDirection_E_RIGHT;
  static const GuidancePatternPropagationDirection E_NO_PROP =
    GuidancePattern_GuidancePatternPropagationDirection_E_NO_PROP;
  static inline bool GuidancePatternPropagationDirection_IsValid(int value) {
    return GuidancePattern_GuidancePatternPropagationDirection_IsValid(value);
  }
  static const GuidancePatternPropagationDirection GuidancePatternPropagationDirection_MIN =
    GuidancePattern_GuidancePatternPropagationDirection_GuidancePatternPropagationDirection_MIN;
  static const GuidancePatternPropagationDirection GuidancePatternPropagationDirection_MAX =
    GuidancePattern_GuidancePatternPropagationDirection_GuidancePatternPropagationDirection_MAX;
  static const int GuidancePatternPropagationDirection_ARRAYSIZE =
    GuidancePattern_GuidancePatternPropagationDirection_GuidancePatternPropagationDirection_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GuidancePatternPropagationDirection_descriptor() {
    return GuidancePattern_GuidancePatternPropagationDirection_descriptor();
  }
  static inline const ::std::string& GuidancePatternPropagationDirection_Name(GuidancePatternPropagationDirection value) {
    return GuidancePattern_GuidancePatternPropagationDirection_Name(value);
  }
  static inline bool GuidancePatternPropagationDirection_Parse(const ::std::string& name,
      GuidancePatternPropagationDirection* value) {
    return GuidancePattern_GuidancePatternPropagationDirection_Parse(name, value);
  }

  typedef GuidancePattern_GuidancePatternExtension GuidancePatternExtension;
  static const GuidancePatternExtension F_NOTSET =
    GuidancePattern_GuidancePatternExtension_F_NOTSET;
  static const GuidancePatternExtension F_BOTH =
    GuidancePattern_GuidancePatternExtension_F_BOTH;
  static const GuidancePatternExtension F_FIRST_ONLY =
    GuidancePattern_GuidancePatternExtension_F_FIRST_ONLY;
  static const GuidancePatternExtension F_LAST_ONLY =
    GuidancePattern_GuidancePatternExtension_F_LAST_ONLY;
  static const GuidancePatternExtension F_NO_EXT =
    GuidancePattern_GuidancePatternExtension_F_NO_EXT;
  static inline bool GuidancePatternExtension_IsValid(int value) {
    return GuidancePattern_GuidancePatternExtension_IsValid(value);
  }
  static const GuidancePatternExtension GuidancePatternExtension_MIN =
    GuidancePattern_GuidancePatternExtension_GuidancePatternExtension_MIN;
  static const GuidancePatternExtension GuidancePatternExtension_MAX =
    GuidancePattern_GuidancePatternExtension_GuidancePatternExtension_MAX;
  static const int GuidancePatternExtension_ARRAYSIZE =
    GuidancePattern_GuidancePatternExtension_GuidancePatternExtension_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GuidancePatternExtension_descriptor() {
    return GuidancePattern_GuidancePatternExtension_descriptor();
  }
  static inline const ::std::string& GuidancePatternExtension_Name(GuidancePatternExtension value) {
    return GuidancePattern_GuidancePatternExtension_Name(value);
  }
  static inline bool GuidancePatternExtension_Parse(const ::std::string& name,
      GuidancePatternExtension* value) {
    return GuidancePattern_GuidancePatternExtension_Parse(name, value);
  }

  typedef GuidancePattern_GuidancePatternGNSSMethod GuidancePatternGNSSMethod;
  static const GuidancePatternGNSSMethod I_NOTSET =
    GuidancePattern_GuidancePatternGNSSMethod_I_NOTSET;
  static const GuidancePatternGNSSMethod I_GNSS_FIX =
    GuidancePattern_GuidancePatternGNSSMethod_I_GNSS_FIX;
  static const GuidancePatternGNSSMethod I_DGNSS_FIX =
    GuidancePattern_GuidancePatternGNSSMethod_I_DGNSS_FIX;
  static const GuidancePatternGNSSMethod I_PRECISE_GNSS =
    GuidancePattern_GuidancePatternGNSSMethod_I_PRECISE_GNSS;
  static const GuidancePatternGNSSMethod I_RTK_FIXED_INTEGER =
    GuidancePattern_GuidancePatternGNSSMethod_I_RTK_FIXED_INTEGER;
  static const GuidancePatternGNSSMethod I_RTK_FLOAT =
    GuidancePattern_GuidancePatternGNSSMethod_I_RTK_FLOAT;
  static const GuidancePatternGNSSMethod I_ESTIMATED_DR_MODE =
    GuidancePattern_GuidancePatternGNSSMethod_I_ESTIMATED_DR_MODE;
  static const GuidancePatternGNSSMethod I_MANUAL_INPUT =
    GuidancePattern_GuidancePatternGNSSMethod_I_MANUAL_INPUT;
  static const GuidancePatternGNSSMethod I_SIMULATE_MODE =
    GuidancePattern_GuidancePatternGNSSMethod_I_SIMULATE_MODE;
  static const GuidancePatternGNSSMethod I_DESKTOP_GENERATED_DATA =
    GuidancePattern_GuidancePatternGNSSMethod_I_DESKTOP_GENERATED_DATA;
  static const GuidancePatternGNSSMethod I_OTHER =
    GuidancePattern_GuidancePatternGNSSMethod_I_OTHER;
  static inline bool GuidancePatternGNSSMethod_IsValid(int value) {
    return GuidancePattern_GuidancePatternGNSSMethod_IsValid(value);
  }
  static const GuidancePatternGNSSMethod GuidancePatternGNSSMethod_MIN =
    GuidancePattern_GuidancePatternGNSSMethod_GuidancePatternGNSSMethod_MIN;
  static const GuidancePatternGNSSMethod GuidancePatternGNSSMethod_MAX =
    GuidancePattern_GuidancePatternGNSSMethod_GuidancePatternGNSSMethod_MAX;
  static const int GuidancePatternGNSSMethod_ARRAYSIZE =
    GuidancePattern_GuidancePatternGNSSMethod_GuidancePatternGNSSMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GuidancePatternGNSSMethod_descriptor() {
    return GuidancePattern_GuidancePatternGNSSMethod_descriptor();
  }
  static inline const ::std::string& GuidancePatternGNSSMethod_Name(GuidancePatternGNSSMethod value) {
    return GuidancePattern_GuidancePatternGNSSMethod_Name(value);
  }
  static inline bool GuidancePatternGNSSMethod_Parse(const ::std::string& name,
      GuidancePatternGNSSMethod* value) {
    return GuidancePattern_GuidancePatternGNSSMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .efdi.Polygon boundary_polygon = 17;
  int boundary_polygon_size() const;
  void clear_boundary_polygon();
  static const int kBoundaryPolygonFieldNumber = 17;
  const ::efdi::Polygon& boundary_polygon(int index) const;
  ::efdi::Polygon* mutable_boundary_polygon(int index);
  ::efdi::Polygon* add_boundary_polygon();
  ::google::protobuf::RepeatedPtrField< ::efdi::Polygon >*
      mutable_boundary_polygon();
  const ::google::protobuf::RepeatedPtrField< ::efdi::Polygon >&
      boundary_polygon() const;

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string guidance_pattern_designator = 2;
  void clear_guidance_pattern_designator();
  static const int kGuidancePatternDesignatorFieldNumber = 2;
  const ::std::string& guidance_pattern_designator() const;
  void set_guidance_pattern_designator(const ::std::string& value);
  #if LANG_CXX11
  void set_guidance_pattern_designator(::std::string&& value);
  #endif
  void set_guidance_pattern_designator(const char* value);
  void set_guidance_pattern_designator(const char* value, size_t size);
  ::std::string* mutable_guidance_pattern_designator();
  ::std::string* release_guidance_pattern_designator();
  void set_allocated_guidance_pattern_designator(::std::string* guidance_pattern_designator);

  // string original_srid = 13;
  void clear_original_srid();
  static const int kOriginalSridFieldNumber = 13;
  const ::std::string& original_srid() const;
  void set_original_srid(const ::std::string& value);
  #if LANG_CXX11
  void set_original_srid(::std::string&& value);
  #endif
  void set_original_srid(const char* value);
  void set_original_srid(const char* value, size_t size);
  ::std::string* mutable_original_srid();
  ::std::string* release_original_srid();
  void set_allocated_original_srid(::std::string* original_srid);

  // .efdi.UID guidance_pattern_id = 1;
  bool has_guidance_pattern_id() const;
  void clear_guidance_pattern_id();
  static const int kGuidancePatternIdFieldNumber = 1;
  const ::efdi::UID& guidance_pattern_id() const;
  ::efdi::UID* release_guidance_pattern_id();
  ::efdi::UID* mutable_guidance_pattern_id();
  void set_allocated_guidance_pattern_id(::efdi::UID* guidance_pattern_id);

  // .efdi.UID base_station_id_ref = 12;
  bool has_base_station_id_ref() const;
  void clear_base_station_id_ref();
  static const int kBaseStationIdRefFieldNumber = 12;
  const ::efdi::UID& base_station_id_ref() const;
  ::efdi::UID* release_base_station_id_ref();
  ::efdi::UID* mutable_base_station_id_ref();
  void set_allocated_base_station_id_ref(::efdi::UID* base_station_id_ref);

  // .efdi.LineString line_string = 16;
  bool has_line_string() const;
  void clear_line_string();
  static const int kLineStringFieldNumber = 16;
  const ::efdi::LineString& line_string() const;
  ::efdi::LineString* release_line_string();
  ::efdi::LineString* mutable_line_string();
  void set_allocated_line_string(::efdi::LineString* line_string);

  // .efdi.GuidancePattern.GuidancePatternType guidance_pattern_type = 3;
  void clear_guidance_pattern_type();
  static const int kGuidancePatternTypeFieldNumber = 3;
  ::efdi::GuidancePattern_GuidancePatternType guidance_pattern_type() const;
  void set_guidance_pattern_type(::efdi::GuidancePattern_GuidancePatternType value);

  // .efdi.GuidancePattern.GuidancePatternOptions guidance_pattern_options = 4;
  void clear_guidance_pattern_options();
  static const int kGuidancePatternOptionsFieldNumber = 4;
  ::efdi::GuidancePattern_GuidancePatternOptions guidance_pattern_options() const;
  void set_guidance_pattern_options(::efdi::GuidancePattern_GuidancePatternOptions value);

  // .efdi.GuidancePattern.GuidancePatternPropagationDirection guidance_pattern_propagation_direction = 5;
  void clear_guidance_pattern_propagation_direction();
  static const int kGuidancePatternPropagationDirectionFieldNumber = 5;
  ::efdi::GuidancePattern_GuidancePatternPropagationDirection guidance_pattern_propagation_direction() const;
  void set_guidance_pattern_propagation_direction(::efdi::GuidancePattern_GuidancePatternPropagationDirection value);

  // .efdi.GuidancePattern.GuidancePatternExtension guidance_pattern_extension = 6;
  void clear_guidance_pattern_extension();
  static const int kGuidancePatternExtensionFieldNumber = 6;
  ::efdi::GuidancePattern_GuidancePatternExtension guidance_pattern_extension() const;
  void set_guidance_pattern_extension(::efdi::GuidancePattern_GuidancePatternExtension value);

  // double guidance_pattern_heading = 7;
  void clear_guidance_pattern_heading();
  static const int kGuidancePatternHeadingFieldNumber = 7;
  double guidance_pattern_heading() const;
  void set_guidance_pattern_heading(double value);

  // uint64 guidance_pattern_radius = 8;
  void clear_guidance_pattern_radius();
  static const int kGuidancePatternRadiusFieldNumber = 8;
  ::google::protobuf::uint64 guidance_pattern_radius() const;
  void set_guidance_pattern_radius(::google::protobuf::uint64 value);

  // double guidance_pattern_horizontal_accuracy = 10;
  void clear_guidance_pattern_horizontal_accuracy();
  static const int kGuidancePatternHorizontalAccuracyFieldNumber = 10;
  double guidance_pattern_horizontal_accuracy() const;
  void set_guidance_pattern_horizontal_accuracy(double value);

  // double guidance_pattern_vertical_accuracy = 11;
  void clear_guidance_pattern_vertical_accuracy();
  static const int kGuidancePatternVerticalAccuracyFieldNumber = 11;
  double guidance_pattern_vertical_accuracy() const;
  void set_guidance_pattern_vertical_accuracy(double value);

  // uint64 number_of_swaths_left = 14;
  void clear_number_of_swaths_left();
  static const int kNumberOfSwathsLeftFieldNumber = 14;
  ::google::protobuf::uint64 number_of_swaths_left() const;
  void set_number_of_swaths_left(::google::protobuf::uint64 value);

  // uint64 number_of_swaths_right = 15;
  void clear_number_of_swaths_right();
  static const int kNumberOfSwathsRightFieldNumber = 15;
  ::google::protobuf::uint64 number_of_swaths_right() const;
  void set_number_of_swaths_right(::google::protobuf::uint64 value);

  // .efdi.GuidancePattern.GuidancePatternGNSSMethod guidance_pattern_gnss_method = 9;
  void clear_guidance_pattern_gnss_method();
  static const int kGuidancePatternGnssMethodFieldNumber = 9;
  ::efdi::GuidancePattern_GuidancePatternGNSSMethod guidance_pattern_gnss_method() const;
  void set_guidance_pattern_gnss_method(::efdi::GuidancePattern_GuidancePatternGNSSMethod value);

  // @@protoc_insertion_point(class_scope:efdi.GuidancePattern)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::efdi::Polygon > boundary_polygon_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr guidance_pattern_designator_;
  ::google::protobuf::internal::ArenaStringPtr original_srid_;
  ::efdi::UID* guidance_pattern_id_;
  ::efdi::UID* base_station_id_ref_;
  ::efdi::LineString* line_string_;
  int guidance_pattern_type_;
  int guidance_pattern_options_;
  int guidance_pattern_propagation_direction_;
  int guidance_pattern_extension_;
  double guidance_pattern_heading_;
  ::google::protobuf::uint64 guidance_pattern_radius_;
  double guidance_pattern_horizontal_accuracy_;
  double guidance_pattern_vertical_accuracy_;
  ::google::protobuf::uint64 number_of_swaths_left_;
  ::google::protobuf::uint64 number_of_swaths_right_;
  int guidance_pattern_gnss_method_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsGuidancePatternImpl();
};
// -------------------------------------------------------------------

class GuidanceShift : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.GuidanceShift) */ {
 public:
  GuidanceShift();
  virtual ~GuidanceShift();

  GuidanceShift(const GuidanceShift& from);

  inline GuidanceShift& operator=(const GuidanceShift& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GuidanceShift(GuidanceShift&& from) noexcept
    : GuidanceShift() {
    *this = ::std::move(from);
  }

  inline GuidanceShift& operator=(GuidanceShift&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuidanceShift& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GuidanceShift* internal_default_instance() {
    return reinterpret_cast<const GuidanceShift*>(
               &_GuidanceShift_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(GuidanceShift* other);
  friend void swap(GuidanceShift& a, GuidanceShift& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GuidanceShift* New() const PROTOBUF_FINAL { return New(NULL); }

  GuidanceShift* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GuidanceShift& from);
  void MergeFrom(const GuidanceShift& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GuidanceShift* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // .efdi.UID guidance_group_id_ref = 1;
  bool has_guidance_group_id_ref() const;
  void clear_guidance_group_id_ref();
  static const int kGuidanceGroupIdRefFieldNumber = 1;
  const ::efdi::UID& guidance_group_id_ref() const;
  ::efdi::UID* release_guidance_group_id_ref();
  ::efdi::UID* mutable_guidance_group_id_ref();
  void set_allocated_guidance_group_id_ref(::efdi::UID* guidance_group_id_ref);

  // .efdi.UID guidance_pattern_id_ref = 2;
  bool has_guidance_pattern_id_ref() const;
  void clear_guidance_pattern_id_ref();
  static const int kGuidancePatternIdRefFieldNumber = 2;
  const ::efdi::UID& guidance_pattern_id_ref() const;
  ::efdi::UID* release_guidance_pattern_id_ref();
  ::efdi::UID* mutable_guidance_pattern_id_ref();
  void set_allocated_guidance_pattern_id_ref(::efdi::UID* guidance_pattern_id_ref);

  // .efdi.AllocationStamp allocation_stamp = 6;
  bool has_allocation_stamp() const;
  void clear_allocation_stamp();
  static const int kAllocationStampFieldNumber = 6;
  const ::efdi::AllocationStamp& allocation_stamp() const;
  ::efdi::AllocationStamp* release_allocation_stamp();
  ::efdi::AllocationStamp* mutable_allocation_stamp();
  void set_allocated_allocation_stamp(::efdi::AllocationStamp* allocation_stamp);

  // sint64 guidance_east_shift = 3;
  void clear_guidance_east_shift();
  static const int kGuidanceEastShiftFieldNumber = 3;
  ::google::protobuf::int64 guidance_east_shift() const;
  void set_guidance_east_shift(::google::protobuf::int64 value);

  // sint64 guidance_north_shift = 4;
  void clear_guidance_north_shift();
  static const int kGuidanceNorthShiftFieldNumber = 4;
  ::google::protobuf::int64 guidance_north_shift() const;
  void set_guidance_north_shift(::google::protobuf::int64 value);

  // sint64 propagation_offset = 5;
  void clear_propagation_offset();
  static const int kPropagationOffsetFieldNumber = 5;
  ::google::protobuf::int64 propagation_offset() const;
  void set_propagation_offset(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:efdi.GuidanceShift)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::efdi::UID* guidance_group_id_ref_;
  ::efdi::UID* guidance_pattern_id_ref_;
  ::efdi::AllocationStamp* allocation_stamp_;
  ::google::protobuf::int64 guidance_east_shift_;
  ::google::protobuf::int64 guidance_north_shift_;
  ::google::protobuf::int64 propagation_offset_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsGuidanceShiftImpl();
};
// -------------------------------------------------------------------

class ISO11783_TaskData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.ISO11783_TaskData) */ {
 public:
  ISO11783_TaskData();
  virtual ~ISO11783_TaskData();

  ISO11783_TaskData(const ISO11783_TaskData& from);

  inline ISO11783_TaskData& operator=(const ISO11783_TaskData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ISO11783_TaskData(ISO11783_TaskData&& from) noexcept
    : ISO11783_TaskData() {
    *this = ::std::move(from);
  }

  inline ISO11783_TaskData& operator=(ISO11783_TaskData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ISO11783_TaskData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ISO11783_TaskData* internal_default_instance() {
    return reinterpret_cast<const ISO11783_TaskData*>(
               &_ISO11783_TaskData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(ISO11783_TaskData* other);
  friend void swap(ISO11783_TaskData& a, ISO11783_TaskData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ISO11783_TaskData* New() const PROTOBUF_FINAL { return New(NULL); }

  ISO11783_TaskData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ISO11783_TaskData& from);
  void MergeFrom(const ISO11783_TaskData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ISO11783_TaskData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ISO11783_TaskData_VersionMajor VersionMajor;
  static const VersionMajor VERSION_MAJOR_DIS =
    ISO11783_TaskData_VersionMajor_VERSION_MAJOR_DIS;
  static const VersionMajor VERSION_MAJOR_FDIS_1 =
    ISO11783_TaskData_VersionMajor_VERSION_MAJOR_FDIS_1;
  static const VersionMajor VERSION_MAJOR_FDIS_2 =
    ISO11783_TaskData_VersionMajor_VERSION_MAJOR_FDIS_2;
  static const VersionMajor VERSION_MAJOR_E2_DIS =
    ISO11783_TaskData_VersionMajor_VERSION_MAJOR_E2_DIS;
  static const VersionMajor VERSION_MAJOR_E2_FDIS =
    ISO11783_TaskData_VersionMajor_VERSION_MAJOR_E2_FDIS;
  static inline bool VersionMajor_IsValid(int value) {
    return ISO11783_TaskData_VersionMajor_IsValid(value);
  }
  static const VersionMajor VersionMajor_MIN =
    ISO11783_TaskData_VersionMajor_VersionMajor_MIN;
  static const VersionMajor VersionMajor_MAX =
    ISO11783_TaskData_VersionMajor_VersionMajor_MAX;
  static const int VersionMajor_ARRAYSIZE =
    ISO11783_TaskData_VersionMajor_VersionMajor_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VersionMajor_descriptor() {
    return ISO11783_TaskData_VersionMajor_descriptor();
  }
  static inline const ::std::string& VersionMajor_Name(VersionMajor value) {
    return ISO11783_TaskData_VersionMajor_Name(value);
  }
  static inline bool VersionMajor_Parse(const ::std::string& name,
      VersionMajor* value) {
    return ISO11783_TaskData_VersionMajor_Parse(name, value);
  }

  typedef ISO11783_TaskData_DataTransferOrigin DataTransferOrigin;
  static const DataTransferOrigin DATA_TRANSFER_ORIGIN_NOTSET =
    ISO11783_TaskData_DataTransferOrigin_DATA_TRANSFER_ORIGIN_NOTSET;
  static const DataTransferOrigin DATA_TRANSFER_ORIGIN_FMIS =
    ISO11783_TaskData_DataTransferOrigin_DATA_TRANSFER_ORIGIN_FMIS;
  static const DataTransferOrigin DATA_TRANSFER_ORIGIN_MICS =
    ISO11783_TaskData_DataTransferOrigin_DATA_TRANSFER_ORIGIN_MICS;
  static inline bool DataTransferOrigin_IsValid(int value) {
    return ISO11783_TaskData_DataTransferOrigin_IsValid(value);
  }
  static const DataTransferOrigin DataTransferOrigin_MIN =
    ISO11783_TaskData_DataTransferOrigin_DataTransferOrigin_MIN;
  static const DataTransferOrigin DataTransferOrigin_MAX =
    ISO11783_TaskData_DataTransferOrigin_DataTransferOrigin_MAX;
  static const int DataTransferOrigin_ARRAYSIZE =
    ISO11783_TaskData_DataTransferOrigin_DataTransferOrigin_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataTransferOrigin_descriptor() {
    return ISO11783_TaskData_DataTransferOrigin_descriptor();
  }
  static inline const ::std::string& DataTransferOrigin_Name(DataTransferOrigin value) {
    return ISO11783_TaskData_DataTransferOrigin_Name(value);
  }
  static inline bool DataTransferOrigin_Parse(const ::std::string& name,
      DataTransferOrigin* value) {
    return ISO11783_TaskData_DataTransferOrigin_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .efdi.AttachedFile attached_file = 9;
  int attached_file_size() const;
  void clear_attached_file();
  static const int kAttachedFileFieldNumber = 9;
  const ::efdi::AttachedFile& attached_file(int index) const;
  ::efdi::AttachedFile* mutable_attached_file(int index);
  ::efdi::AttachedFile* add_attached_file();
  ::google::protobuf::RepeatedPtrField< ::efdi::AttachedFile >*
      mutable_attached_file();
  const ::google::protobuf::RepeatedPtrField< ::efdi::AttachedFile >&
      attached_file() const;

  // repeated .efdi.BaseStation base_station = 10;
  int base_station_size() const;
  void clear_base_station();
  static const int kBaseStationFieldNumber = 10;
  const ::efdi::BaseStation& base_station(int index) const;
  ::efdi::BaseStation* mutable_base_station(int index);
  ::efdi::BaseStation* add_base_station();
  ::google::protobuf::RepeatedPtrField< ::efdi::BaseStation >*
      mutable_base_station();
  const ::google::protobuf::RepeatedPtrField< ::efdi::BaseStation >&
      base_station() const;

  // repeated .efdi.CodedComment coded_comment = 11;
  int coded_comment_size() const;
  void clear_coded_comment();
  static const int kCodedCommentFieldNumber = 11;
  const ::efdi::CodedComment& coded_comment(int index) const;
  ::efdi::CodedComment* mutable_coded_comment(int index);
  ::efdi::CodedComment* add_coded_comment();
  ::google::protobuf::RepeatedPtrField< ::efdi::CodedComment >*
      mutable_coded_comment();
  const ::google::protobuf::RepeatedPtrField< ::efdi::CodedComment >&
      coded_comment() const;

  // repeated .efdi.CodedCommentGroup coded_comment_group = 12;
  int coded_comment_group_size() const;
  void clear_coded_comment_group();
  static const int kCodedCommentGroupFieldNumber = 12;
  const ::efdi::CodedCommentGroup& coded_comment_group(int index) const;
  ::efdi::CodedCommentGroup* mutable_coded_comment_group(int index);
  ::efdi::CodedCommentGroup* add_coded_comment_group();
  ::google::protobuf::RepeatedPtrField< ::efdi::CodedCommentGroup >*
      mutable_coded_comment_group();
  const ::google::protobuf::RepeatedPtrField< ::efdi::CodedCommentGroup >&
      coded_comment_group() const;

  // repeated .efdi.ColourLegend colour_legend = 13;
  int colour_legend_size() const;
  void clear_colour_legend();
  static const int kColourLegendFieldNumber = 13;
  const ::efdi::ColourLegend& colour_legend(int index) const;
  ::efdi::ColourLegend* mutable_colour_legend(int index);
  ::efdi::ColourLegend* add_colour_legend();
  ::google::protobuf::RepeatedPtrField< ::efdi::ColourLegend >*
      mutable_colour_legend();
  const ::google::protobuf::RepeatedPtrField< ::efdi::ColourLegend >&
      colour_legend() const;

  // repeated .efdi.CropType crop_type = 14;
  int crop_type_size() const;
  void clear_crop_type();
  static const int kCropTypeFieldNumber = 14;
  const ::efdi::CropType& crop_type(int index) const;
  ::efdi::CropType* mutable_crop_type(int index);
  ::efdi::CropType* add_crop_type();
  ::google::protobuf::RepeatedPtrField< ::efdi::CropType >*
      mutable_crop_type();
  const ::google::protobuf::RepeatedPtrField< ::efdi::CropType >&
      crop_type() const;

  // repeated .efdi.CulturalPractice cultural_practice = 15;
  int cultural_practice_size() const;
  void clear_cultural_practice();
  static const int kCulturalPracticeFieldNumber = 15;
  const ::efdi::CulturalPractice& cultural_practice(int index) const;
  ::efdi::CulturalPractice* mutable_cultural_practice(int index);
  ::efdi::CulturalPractice* add_cultural_practice();
  ::google::protobuf::RepeatedPtrField< ::efdi::CulturalPractice >*
      mutable_cultural_practice();
  const ::google::protobuf::RepeatedPtrField< ::efdi::CulturalPractice >&
      cultural_practice() const;

  // repeated .efdi.Customer customer = 16;
  int customer_size() const;
  void clear_customer();
  static const int kCustomerFieldNumber = 16;
  const ::efdi::Customer& customer(int index) const;
  ::efdi::Customer* mutable_customer(int index);
  ::efdi::Customer* add_customer();
  ::google::protobuf::RepeatedPtrField< ::efdi::Customer >*
      mutable_customer();
  const ::google::protobuf::RepeatedPtrField< ::efdi::Customer >&
      customer() const;

  // repeated .efdi.Device device = 17;
  int device_size() const;
  void clear_device();
  static const int kDeviceFieldNumber = 17;
  const ::efdi::Device& device(int index) const;
  ::efdi::Device* mutable_device(int index);
  ::efdi::Device* add_device();
  ::google::protobuf::RepeatedPtrField< ::efdi::Device >*
      mutable_device();
  const ::google::protobuf::RepeatedPtrField< ::efdi::Device >&
      device() const;

  // repeated .efdi.Farm farm = 18;
  int farm_size() const;
  void clear_farm();
  static const int kFarmFieldNumber = 18;
  const ::efdi::Farm& farm(int index) const;
  ::efdi::Farm* mutable_farm(int index);
  ::efdi::Farm* add_farm();
  ::google::protobuf::RepeatedPtrField< ::efdi::Farm >*
      mutable_farm();
  const ::google::protobuf::RepeatedPtrField< ::efdi::Farm >&
      farm() const;

  // repeated .efdi.OperationTechnique operation_technique = 19;
  int operation_technique_size() const;
  void clear_operation_technique();
  static const int kOperationTechniqueFieldNumber = 19;
  const ::efdi::OperationTechnique& operation_technique(int index) const;
  ::efdi::OperationTechnique* mutable_operation_technique(int index);
  ::efdi::OperationTechnique* add_operation_technique();
  ::google::protobuf::RepeatedPtrField< ::efdi::OperationTechnique >*
      mutable_operation_technique();
  const ::google::protobuf::RepeatedPtrField< ::efdi::OperationTechnique >&
      operation_technique() const;

  // repeated .efdi.Partfield partfield = 20;
  int partfield_size() const;
  void clear_partfield();
  static const int kPartfieldFieldNumber = 20;
  const ::efdi::Partfield& partfield(int index) const;
  ::efdi::Partfield* mutable_partfield(int index);
  ::efdi::Partfield* add_partfield();
  ::google::protobuf::RepeatedPtrField< ::efdi::Partfield >*
      mutable_partfield();
  const ::google::protobuf::RepeatedPtrField< ::efdi::Partfield >&
      partfield() const;

  // repeated .efdi.Product product = 21;
  int product_size() const;
  void clear_product();
  static const int kProductFieldNumber = 21;
  const ::efdi::Product& product(int index) const;
  ::efdi::Product* mutable_product(int index);
  ::efdi::Product* add_product();
  ::google::protobuf::RepeatedPtrField< ::efdi::Product >*
      mutable_product();
  const ::google::protobuf::RepeatedPtrField< ::efdi::Product >&
      product() const;

  // repeated .efdi.ProductGroup product_group = 22;
  int product_group_size() const;
  void clear_product_group();
  static const int kProductGroupFieldNumber = 22;
  const ::efdi::ProductGroup& product_group(int index) const;
  ::efdi::ProductGroup* mutable_product_group(int index);
  ::efdi::ProductGroup* add_product_group();
  ::google::protobuf::RepeatedPtrField< ::efdi::ProductGroup >*
      mutable_product_group();
  const ::google::protobuf::RepeatedPtrField< ::efdi::ProductGroup >&
      product_group() const;

  // repeated .efdi.Task task = 23;
  int task_size() const;
  void clear_task();
  static const int kTaskFieldNumber = 23;
  const ::efdi::Task& task(int index) const;
  ::efdi::Task* mutable_task(int index);
  ::efdi::Task* add_task();
  ::google::protobuf::RepeatedPtrField< ::efdi::Task >*
      mutable_task();
  const ::google::protobuf::RepeatedPtrField< ::efdi::Task >&
      task() const;

  // repeated .efdi.TaskControllerCapabilities task_controller_capabilities = 24;
  int task_controller_capabilities_size() const;
  void clear_task_controller_capabilities();
  static const int kTaskControllerCapabilitiesFieldNumber = 24;
  const ::efdi::TaskControllerCapabilities& task_controller_capabilities(int index) const;
  ::efdi::TaskControllerCapabilities* mutable_task_controller_capabilities(int index);
  ::efdi::TaskControllerCapabilities* add_task_controller_capabilities();
  ::google::protobuf::RepeatedPtrField< ::efdi::TaskControllerCapabilities >*
      mutable_task_controller_capabilities();
  const ::google::protobuf::RepeatedPtrField< ::efdi::TaskControllerCapabilities >&
      task_controller_capabilities() const;

  // repeated .efdi.ValuePresentation value_presentation = 25;
  int value_presentation_size() const;
  void clear_value_presentation();
  static const int kValuePresentationFieldNumber = 25;
  const ::efdi::ValuePresentation& value_presentation(int index) const;
  ::efdi::ValuePresentation* mutable_value_presentation(int index);
  ::efdi::ValuePresentation* add_value_presentation();
  ::google::protobuf::RepeatedPtrField< ::efdi::ValuePresentation >*
      mutable_value_presentation();
  const ::google::protobuf::RepeatedPtrField< ::efdi::ValuePresentation >&
      value_presentation() const;

  // repeated .efdi.Worker worker = 26;
  int worker_size() const;
  void clear_worker();
  static const int kWorkerFieldNumber = 26;
  const ::efdi::Worker& worker(int index) const;
  ::efdi::Worker* mutable_worker(int index);
  ::efdi::Worker* add_worker();
  ::google::protobuf::RepeatedPtrField< ::efdi::Worker >*
      mutable_worker();
  const ::google::protobuf::RepeatedPtrField< ::efdi::Worker >&
      worker() const;

  // repeated .efdi.ExternalFileReference external_file_reference = 27;
  int external_file_reference_size() const;
  void clear_external_file_reference();
  static const int kExternalFileReferenceFieldNumber = 27;
  const ::efdi::ExternalFileReference& external_file_reference(int index) const;
  ::efdi::ExternalFileReference* mutable_external_file_reference(int index);
  ::efdi::ExternalFileReference* add_external_file_reference();
  ::google::protobuf::RepeatedPtrField< ::efdi::ExternalFileReference >*
      mutable_external_file_reference();
  const ::google::protobuf::RepeatedPtrField< ::efdi::ExternalFileReference >&
      external_file_reference() const;

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string management_software_manufacturer = 3;
  void clear_management_software_manufacturer();
  static const int kManagementSoftwareManufacturerFieldNumber = 3;
  const ::std::string& management_software_manufacturer() const;
  void set_management_software_manufacturer(const ::std::string& value);
  #if LANG_CXX11
  void set_management_software_manufacturer(::std::string&& value);
  #endif
  void set_management_software_manufacturer(const char* value);
  void set_management_software_manufacturer(const char* value, size_t size);
  ::std::string* mutable_management_software_manufacturer();
  ::std::string* release_management_software_manufacturer();
  void set_allocated_management_software_manufacturer(::std::string* management_software_manufacturer);

  // string management_software_version = 4;
  void clear_management_software_version();
  static const int kManagementSoftwareVersionFieldNumber = 4;
  const ::std::string& management_software_version() const;
  void set_management_software_version(const ::std::string& value);
  #if LANG_CXX11
  void set_management_software_version(::std::string&& value);
  #endif
  void set_management_software_version(const char* value);
  void set_management_software_version(const char* value, size_t size);
  ::std::string* mutable_management_software_version();
  ::std::string* release_management_software_version();
  void set_allocated_management_software_version(::std::string* management_software_version);

  // string task_controller_manufacturer = 5;
  void clear_task_controller_manufacturer();
  static const int kTaskControllerManufacturerFieldNumber = 5;
  const ::std::string& task_controller_manufacturer() const;
  void set_task_controller_manufacturer(const ::std::string& value);
  #if LANG_CXX11
  void set_task_controller_manufacturer(::std::string&& value);
  #endif
  void set_task_controller_manufacturer(const char* value);
  void set_task_controller_manufacturer(const char* value, size_t size);
  ::std::string* mutable_task_controller_manufacturer();
  ::std::string* release_task_controller_manufacturer();
  void set_allocated_task_controller_manufacturer(::std::string* task_controller_manufacturer);

  // string task_controller_version = 6;
  void clear_task_controller_version();
  static const int kTaskControllerVersionFieldNumber = 6;
  const ::std::string& task_controller_version() const;
  void set_task_controller_version(const ::std::string& value);
  #if LANG_CXX11
  void set_task_controller_version(::std::string&& value);
  #endif
  void set_task_controller_version(const char* value);
  void set_task_controller_version(const char* value, size_t size);
  ::std::string* mutable_task_controller_version();
  ::std::string* release_task_controller_version();
  void set_allocated_task_controller_version(::std::string* task_controller_version);

  // string data_transfer_language = 8;
  void clear_data_transfer_language();
  static const int kDataTransferLanguageFieldNumber = 8;
  const ::std::string& data_transfer_language() const;
  void set_data_transfer_language(const ::std::string& value);
  #if LANG_CXX11
  void set_data_transfer_language(::std::string&& value);
  #endif
  void set_data_transfer_language(const char* value);
  void set_data_transfer_language(const char* value, size_t size);
  ::std::string* mutable_data_transfer_language();
  ::std::string* release_data_transfer_language();
  void set_allocated_data_transfer_language(::std::string* data_transfer_language);

  // .efdi.ISO11783_TaskData.VersionMajor version_major = 1;
  void clear_version_major();
  static const int kVersionMajorFieldNumber = 1;
  ::efdi::ISO11783_TaskData_VersionMajor version_major() const;
  void set_version_major(::efdi::ISO11783_TaskData_VersionMajor value);

  // uint32 version_minor = 2;
  void clear_version_minor();
  static const int kVersionMinorFieldNumber = 2;
  ::google::protobuf::uint32 version_minor() const;
  void set_version_minor(::google::protobuf::uint32 value);

  // .efdi.ISO11783_TaskData.DataTransferOrigin data_transfer_origin = 7;
  void clear_data_transfer_origin();
  static const int kDataTransferOriginFieldNumber = 7;
  ::efdi::ISO11783_TaskData_DataTransferOrigin data_transfer_origin() const;
  void set_data_transfer_origin(::efdi::ISO11783_TaskData_DataTransferOrigin value);

  // @@protoc_insertion_point(class_scope:efdi.ISO11783_TaskData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::efdi::AttachedFile > attached_file_;
  ::google::protobuf::RepeatedPtrField< ::efdi::BaseStation > base_station_;
  ::google::protobuf::RepeatedPtrField< ::efdi::CodedComment > coded_comment_;
  ::google::protobuf::RepeatedPtrField< ::efdi::CodedCommentGroup > coded_comment_group_;
  ::google::protobuf::RepeatedPtrField< ::efdi::ColourLegend > colour_legend_;
  ::google::protobuf::RepeatedPtrField< ::efdi::CropType > crop_type_;
  ::google::protobuf::RepeatedPtrField< ::efdi::CulturalPractice > cultural_practice_;
  ::google::protobuf::RepeatedPtrField< ::efdi::Customer > customer_;
  ::google::protobuf::RepeatedPtrField< ::efdi::Device > device_;
  ::google::protobuf::RepeatedPtrField< ::efdi::Farm > farm_;
  ::google::protobuf::RepeatedPtrField< ::efdi::OperationTechnique > operation_technique_;
  ::google::protobuf::RepeatedPtrField< ::efdi::Partfield > partfield_;
  ::google::protobuf::RepeatedPtrField< ::efdi::Product > product_;
  ::google::protobuf::RepeatedPtrField< ::efdi::ProductGroup > product_group_;
  ::google::protobuf::RepeatedPtrField< ::efdi::Task > task_;
  ::google::protobuf::RepeatedPtrField< ::efdi::TaskControllerCapabilities > task_controller_capabilities_;
  ::google::protobuf::RepeatedPtrField< ::efdi::ValuePresentation > value_presentation_;
  ::google::protobuf::RepeatedPtrField< ::efdi::Worker > worker_;
  ::google::protobuf::RepeatedPtrField< ::efdi::ExternalFileReference > external_file_reference_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr management_software_manufacturer_;
  ::google::protobuf::internal::ArenaStringPtr management_software_version_;
  ::google::protobuf::internal::ArenaStringPtr task_controller_manufacturer_;
  ::google::protobuf::internal::ArenaStringPtr task_controller_version_;
  ::google::protobuf::internal::ArenaStringPtr data_transfer_language_;
  int version_major_;
  ::google::protobuf::uint32 version_minor_;
  int data_transfer_origin_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsISO11783_TaskDataImpl();
};
// -------------------------------------------------------------------

class LineString : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.LineString) */ {
 public:
  LineString();
  virtual ~LineString();

  LineString(const LineString& from);

  inline LineString& operator=(const LineString& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LineString(LineString&& from) noexcept
    : LineString() {
    *this = ::std::move(from);
  }

  inline LineString& operator=(LineString&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LineString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LineString* internal_default_instance() {
    return reinterpret_cast<const LineString*>(
               &_LineString_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(LineString* other);
  friend void swap(LineString& a, LineString& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LineString* New() const PROTOBUF_FINAL { return New(NULL); }

  LineString* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LineString& from);
  void MergeFrom(const LineString& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LineString* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef LineString_LinestringType LinestringType;
  static const LinestringType A_NOTSET =
    LineString_LinestringType_A_NOTSET;
  static const LinestringType A_POLYGON_EXTERIOR =
    LineString_LinestringType_A_POLYGON_EXTERIOR;
  static const LinestringType A_POLYGON_INTERIOR =
    LineString_LinestringType_A_POLYGON_INTERIOR;
  static const LinestringType A_TRAM_LINE =
    LineString_LinestringType_A_TRAM_LINE;
  static const LinestringType A_SAMPLING_ROUTE =
    LineString_LinestringType_A_SAMPLING_ROUTE;
  static const LinestringType A_GUIDANCE_PATTERN =
    LineString_LinestringType_A_GUIDANCE_PATTERN;
  static const LinestringType A_DRAINAGE =
    LineString_LinestringType_A_DRAINAGE;
  static const LinestringType A_FENCE =
    LineString_LinestringType_A_FENCE;
  static const LinestringType A_FLAG =
    LineString_LinestringType_A_FLAG;
  static const LinestringType A_OBSTACLE =
    LineString_LinestringType_A_OBSTACLE;
  static inline bool LinestringType_IsValid(int value) {
    return LineString_LinestringType_IsValid(value);
  }
  static const LinestringType LinestringType_MIN =
    LineString_LinestringType_LinestringType_MIN;
  static const LinestringType LinestringType_MAX =
    LineString_LinestringType_LinestringType_MAX;
  static const int LinestringType_ARRAYSIZE =
    LineString_LinestringType_LinestringType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LinestringType_descriptor() {
    return LineString_LinestringType_descriptor();
  }
  static inline const ::std::string& LinestringType_Name(LinestringType value) {
    return LineString_LinestringType_Name(value);
  }
  static inline bool LinestringType_Parse(const ::std::string& name,
      LinestringType* value) {
    return LineString_LinestringType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .efdi.Point point = 7;
  int point_size() const;
  void clear_point();
  static const int kPointFieldNumber = 7;
  const ::efdi::Point& point(int index) const;
  ::efdi::Point* mutable_point(int index);
  ::efdi::Point* add_point();
  ::google::protobuf::RepeatedPtrField< ::efdi::Point >*
      mutable_point();
  const ::google::protobuf::RepeatedPtrField< ::efdi::Point >&
      point() const;

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string line_string_designator = 2;
  void clear_line_string_designator();
  static const int kLineStringDesignatorFieldNumber = 2;
  const ::std::string& line_string_designator() const;
  void set_line_string_designator(const ::std::string& value);
  #if LANG_CXX11
  void set_line_string_designator(::std::string&& value);
  #endif
  void set_line_string_designator(const char* value);
  void set_line_string_designator(const char* value, size_t size);
  ::std::string* mutable_line_string_designator();
  ::std::string* release_line_string_designator();
  void set_allocated_line_string_designator(::std::string* line_string_designator);

  // .efdi.UID line_string_id = 6;
  bool has_line_string_id() const;
  void clear_line_string_id();
  static const int kLineStringIdFieldNumber = 6;
  const ::efdi::UID& line_string_id() const;
  ::efdi::UID* release_line_string_id();
  ::efdi::UID* mutable_line_string_id();
  void set_allocated_line_string_id(::efdi::UID* line_string_id);

  // .efdi.LineString.LinestringType line_string_type = 1;
  void clear_line_string_type();
  static const int kLineStringTypeFieldNumber = 1;
  ::efdi::LineString_LinestringType line_string_type() const;
  void set_line_string_type(::efdi::LineString_LinestringType value);

  // uint32 line_string_width = 3;
  void clear_line_string_width();
  static const int kLineStringWidthFieldNumber = 3;
  ::google::protobuf::uint32 line_string_width() const;
  void set_line_string_width(::google::protobuf::uint32 value);

  // uint32 line_string_length = 4;
  void clear_line_string_length();
  static const int kLineStringLengthFieldNumber = 4;
  ::google::protobuf::uint32 line_string_length() const;
  void set_line_string_length(::google::protobuf::uint32 value);

  // uint32 line_string_colour = 5;
  void clear_line_string_colour();
  static const int kLineStringColourFieldNumber = 5;
  ::google::protobuf::uint32 line_string_colour() const;
  void set_line_string_colour(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:efdi.LineString)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::efdi::Point > point_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr line_string_designator_;
  ::efdi::UID* line_string_id_;
  int line_string_type_;
  ::google::protobuf::uint32 line_string_width_;
  ::google::protobuf::uint32 line_string_length_;
  ::google::protobuf::uint32 line_string_colour_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsLineStringImpl();
};
// -------------------------------------------------------------------

class OperationTechnique : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.OperationTechnique) */ {
 public:
  OperationTechnique();
  virtual ~OperationTechnique();

  OperationTechnique(const OperationTechnique& from);

  inline OperationTechnique& operator=(const OperationTechnique& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OperationTechnique(OperationTechnique&& from) noexcept
    : OperationTechnique() {
    *this = ::std::move(from);
  }

  inline OperationTechnique& operator=(OperationTechnique&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OperationTechnique& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperationTechnique* internal_default_instance() {
    return reinterpret_cast<const OperationTechnique*>(
               &_OperationTechnique_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(OperationTechnique* other);
  friend void swap(OperationTechnique& a, OperationTechnique& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OperationTechnique* New() const PROTOBUF_FINAL { return New(NULL); }

  OperationTechnique* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OperationTechnique& from);
  void MergeFrom(const OperationTechnique& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OperationTechnique* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string operation_technique_designator = 2;
  void clear_operation_technique_designator();
  static const int kOperationTechniqueDesignatorFieldNumber = 2;
  const ::std::string& operation_technique_designator() const;
  void set_operation_technique_designator(const ::std::string& value);
  #if LANG_CXX11
  void set_operation_technique_designator(::std::string&& value);
  #endif
  void set_operation_technique_designator(const char* value);
  void set_operation_technique_designator(const char* value, size_t size);
  ::std::string* mutable_operation_technique_designator();
  ::std::string* release_operation_technique_designator();
  void set_allocated_operation_technique_designator(::std::string* operation_technique_designator);

  // .efdi.UID operation_technique_id = 1;
  bool has_operation_technique_id() const;
  void clear_operation_technique_id();
  static const int kOperationTechniqueIdFieldNumber = 1;
  const ::efdi::UID& operation_technique_id() const;
  ::efdi::UID* release_operation_technique_id();
  ::efdi::UID* mutable_operation_technique_id();
  void set_allocated_operation_technique_id(::efdi::UID* operation_technique_id);

  // @@protoc_insertion_point(class_scope:efdi.OperationTechnique)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr operation_technique_designator_;
  ::efdi::UID* operation_technique_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsOperationTechniqueImpl();
};
// -------------------------------------------------------------------

class OperationTechniqueReference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.OperationTechniqueReference) */ {
 public:
  OperationTechniqueReference();
  virtual ~OperationTechniqueReference();

  OperationTechniqueReference(const OperationTechniqueReference& from);

  inline OperationTechniqueReference& operator=(const OperationTechniqueReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OperationTechniqueReference(OperationTechniqueReference&& from) noexcept
    : OperationTechniqueReference() {
    *this = ::std::move(from);
  }

  inline OperationTechniqueReference& operator=(OperationTechniqueReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OperationTechniqueReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperationTechniqueReference* internal_default_instance() {
    return reinterpret_cast<const OperationTechniqueReference*>(
               &_OperationTechniqueReference_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(OperationTechniqueReference* other);
  friend void swap(OperationTechniqueReference& a, OperationTechniqueReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OperationTechniqueReference* New() const PROTOBUF_FINAL { return New(NULL); }

  OperationTechniqueReference* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OperationTechniqueReference& from);
  void MergeFrom(const OperationTechniqueReference& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OperationTechniqueReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // .efdi.UID operation_technique_id_ref = 1;
  bool has_operation_technique_id_ref() const;
  void clear_operation_technique_id_ref();
  static const int kOperationTechniqueIdRefFieldNumber = 1;
  const ::efdi::UID& operation_technique_id_ref() const;
  ::efdi::UID* release_operation_technique_id_ref();
  ::efdi::UID* mutable_operation_technique_id_ref();
  void set_allocated_operation_technique_id_ref(::efdi::UID* operation_technique_id_ref);

  // @@protoc_insertion_point(class_scope:efdi.OperationTechniqueReference)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::efdi::UID* operation_technique_id_ref_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsOperationTechniqueReferenceImpl();
};
// -------------------------------------------------------------------

class OperTechPractice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.OperTechPractice) */ {
 public:
  OperTechPractice();
  virtual ~OperTechPractice();

  OperTechPractice(const OperTechPractice& from);

  inline OperTechPractice& operator=(const OperTechPractice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OperTechPractice(OperTechPractice&& from) noexcept
    : OperTechPractice() {
    *this = ::std::move(from);
  }

  inline OperTechPractice& operator=(OperTechPractice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OperTechPractice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperTechPractice* internal_default_instance() {
    return reinterpret_cast<const OperTechPractice*>(
               &_OperTechPractice_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(OperTechPractice* other);
  friend void swap(OperTechPractice& a, OperTechPractice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OperTechPractice* New() const PROTOBUF_FINAL { return New(NULL); }

  OperTechPractice* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OperTechPractice& from);
  void MergeFrom(const OperTechPractice& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OperTechPractice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // .efdi.UID cultural_practice_id_ref = 1;
  bool has_cultural_practice_id_ref() const;
  void clear_cultural_practice_id_ref();
  static const int kCulturalPracticeIdRefFieldNumber = 1;
  const ::efdi::UID& cultural_practice_id_ref() const;
  ::efdi::UID* release_cultural_practice_id_ref();
  ::efdi::UID* mutable_cultural_practice_id_ref();
  void set_allocated_cultural_practice_id_ref(::efdi::UID* cultural_practice_id_ref);

  // .efdi.UID operation_technique_id_ref = 2;
  bool has_operation_technique_id_ref() const;
  void clear_operation_technique_id_ref();
  static const int kOperationTechniqueIdRefFieldNumber = 2;
  const ::efdi::UID& operation_technique_id_ref() const;
  ::efdi::UID* release_operation_technique_id_ref();
  ::efdi::UID* mutable_operation_technique_id_ref();
  void set_allocated_operation_technique_id_ref(::efdi::UID* operation_technique_id_ref);

  // @@protoc_insertion_point(class_scope:efdi.OperTechPractice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::efdi::UID* cultural_practice_id_ref_;
  ::efdi::UID* operation_technique_id_ref_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsOperTechPracticeImpl();
};
// -------------------------------------------------------------------

class Partfield : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.Partfield) */ {
 public:
  Partfield();
  virtual ~Partfield();

  Partfield(const Partfield& from);

  inline Partfield& operator=(const Partfield& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Partfield(Partfield&& from) noexcept
    : Partfield() {
    *this = ::std::move(from);
  }

  inline Partfield& operator=(Partfield&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Partfield& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Partfield* internal_default_instance() {
    return reinterpret_cast<const Partfield*>(
               &_Partfield_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(Partfield* other);
  friend void swap(Partfield& a, Partfield& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Partfield* New() const PROTOBUF_FINAL { return New(NULL); }

  Partfield* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Partfield& from);
  void MergeFrom(const Partfield& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Partfield* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .efdi.Polygon polygon = 10;
  int polygon_size() const;
  void clear_polygon();
  static const int kPolygonFieldNumber = 10;
  const ::efdi::Polygon& polygon(int index) const;
  ::efdi::Polygon* mutable_polygon(int index);
  ::efdi::Polygon* add_polygon();
  ::google::protobuf::RepeatedPtrField< ::efdi::Polygon >*
      mutable_polygon();
  const ::google::protobuf::RepeatedPtrField< ::efdi::Polygon >&
      polygon() const;

  // repeated .efdi.LineString line_string = 11;
  int line_string_size() const;
  void clear_line_string();
  static const int kLineStringFieldNumber = 11;
  const ::efdi::LineString& line_string(int index) const;
  ::efdi::LineString* mutable_line_string(int index);
  ::efdi::LineString* add_line_string();
  ::google::protobuf::RepeatedPtrField< ::efdi::LineString >*
      mutable_line_string();
  const ::google::protobuf::RepeatedPtrField< ::efdi::LineString >&
      line_string() const;

  // repeated .efdi.Point point = 12;
  int point_size() const;
  void clear_point();
  static const int kPointFieldNumber = 12;
  const ::efdi::Point& point(int index) const;
  ::efdi::Point* mutable_point(int index);
  ::efdi::Point* add_point();
  ::google::protobuf::RepeatedPtrField< ::efdi::Point >*
      mutable_point();
  const ::google::protobuf::RepeatedPtrField< ::efdi::Point >&
      point() const;

  // repeated .efdi.GuidanceGroup guidance_group = 13;
  int guidance_group_size() const;
  void clear_guidance_group();
  static const int kGuidanceGroupFieldNumber = 13;
  const ::efdi::GuidanceGroup& guidance_group(int index) const;
  ::efdi::GuidanceGroup* mutable_guidance_group(int index);
  ::efdi::GuidanceGroup* add_guidance_group();
  ::google::protobuf::RepeatedPtrField< ::efdi::GuidanceGroup >*
      mutable_guidance_group();
  const ::google::protobuf::RepeatedPtrField< ::efdi::GuidanceGroup >&
      guidance_group() const;

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string partfield_code = 2;
  void clear_partfield_code();
  static const int kPartfieldCodeFieldNumber = 2;
  const ::std::string& partfield_code() const;
  void set_partfield_code(const ::std::string& value);
  #if LANG_CXX11
  void set_partfield_code(::std::string&& value);
  #endif
  void set_partfield_code(const char* value);
  void set_partfield_code(const char* value, size_t size);
  ::std::string* mutable_partfield_code();
  ::std::string* release_partfield_code();
  void set_allocated_partfield_code(::std::string* partfield_code);

  // string partfield_designator = 3;
  void clear_partfield_designator();
  static const int kPartfieldDesignatorFieldNumber = 3;
  const ::std::string& partfield_designator() const;
  void set_partfield_designator(const ::std::string& value);
  #if LANG_CXX11
  void set_partfield_designator(::std::string&& value);
  #endif
  void set_partfield_designator(const char* value);
  void set_partfield_designator(const char* value, size_t size);
  ::std::string* mutable_partfield_designator();
  ::std::string* release_partfield_designator();
  void set_allocated_partfield_designator(::std::string* partfield_designator);

  // .efdi.UID partfield_id = 1;
  bool has_partfield_id() const;
  void clear_partfield_id();
  static const int kPartfieldIdFieldNumber = 1;
  const ::efdi::UID& partfield_id() const;
  ::efdi::UID* release_partfield_id();
  ::efdi::UID* mutable_partfield_id();
  void set_allocated_partfield_id(::efdi::UID* partfield_id);

  // .efdi.UID customer_id_ref = 5;
  bool has_customer_id_ref() const;
  void clear_customer_id_ref();
  static const int kCustomerIdRefFieldNumber = 5;
  const ::efdi::UID& customer_id_ref() const;
  ::efdi::UID* release_customer_id_ref();
  ::efdi::UID* mutable_customer_id_ref();
  void set_allocated_customer_id_ref(::efdi::UID* customer_id_ref);

  // .efdi.UID farm_id_ref = 6;
  bool has_farm_id_ref() const;
  void clear_farm_id_ref();
  static const int kFarmIdRefFieldNumber = 6;
  const ::efdi::UID& farm_id_ref() const;
  ::efdi::UID* release_farm_id_ref();
  ::efdi::UID* mutable_farm_id_ref();
  void set_allocated_farm_id_ref(::efdi::UID* farm_id_ref);

  // .efdi.UID crop_type_id_ref = 7;
  bool has_crop_type_id_ref() const;
  void clear_crop_type_id_ref();
  static const int kCropTypeIdRefFieldNumber = 7;
  const ::efdi::UID& crop_type_id_ref() const;
  ::efdi::UID* release_crop_type_id_ref();
  ::efdi::UID* mutable_crop_type_id_ref();
  void set_allocated_crop_type_id_ref(::efdi::UID* crop_type_id_ref);

  // .efdi.UID crop_variety_id_ref = 8;
  bool has_crop_variety_id_ref() const;
  void clear_crop_variety_id_ref();
  static const int kCropVarietyIdRefFieldNumber = 8;
  const ::efdi::UID& crop_variety_id_ref() const;
  ::efdi::UID* release_crop_variety_id_ref();
  ::efdi::UID* mutable_crop_variety_id_ref();
  void set_allocated_crop_variety_id_ref(::efdi::UID* crop_variety_id_ref);

  // .efdi.UID field_id_ref = 9;
  bool has_field_id_ref() const;
  void clear_field_id_ref();
  static const int kFieldIdRefFieldNumber = 9;
  const ::efdi::UID& field_id_ref() const;
  ::efdi::UID* release_field_id_ref();
  ::efdi::UID* mutable_field_id_ref();
  void set_allocated_field_id_ref(::efdi::UID* field_id_ref);

  // uint64 partfield_area = 4;
  void clear_partfield_area();
  static const int kPartfieldAreaFieldNumber = 4;
  ::google::protobuf::uint64 partfield_area() const;
  void set_partfield_area(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:efdi.Partfield)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::efdi::Polygon > polygon_;
  ::google::protobuf::RepeatedPtrField< ::efdi::LineString > line_string_;
  ::google::protobuf::RepeatedPtrField< ::efdi::Point > point_;
  ::google::protobuf::RepeatedPtrField< ::efdi::GuidanceGroup > guidance_group_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr partfield_code_;
  ::google::protobuf::internal::ArenaStringPtr partfield_designator_;
  ::efdi::UID* partfield_id_;
  ::efdi::UID* customer_id_ref_;
  ::efdi::UID* farm_id_ref_;
  ::efdi::UID* crop_type_id_ref_;
  ::efdi::UID* crop_variety_id_ref_;
  ::efdi::UID* field_id_ref_;
  ::google::protobuf::uint64 partfield_area_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsPartfieldImpl();
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(Point* other);
  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const PROTOBUF_FINAL { return New(NULL); }

  Point* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Point_PointType PointType;
  static const PointType A_NOTSET =
    Point_PointType_A_NOTSET;
  static const PointType A_FLAG =
    Point_PointType_A_FLAG;
  static const PointType A_OTHER =
    Point_PointType_A_OTHER;
  static const PointType A_FIELD_ACCESS =
    Point_PointType_A_FIELD_ACCESS;
  static const PointType A_STORAGE =
    Point_PointType_A_STORAGE;
  static const PointType A_OBSTACLE =
    Point_PointType_A_OBSTACLE;
  static const PointType A_GUID_REF_A =
    Point_PointType_A_GUID_REF_A;
  static const PointType A_GUID_REF_B =
    Point_PointType_A_GUID_REF_B;
  static const PointType A_GUID_REF_CENTER =
    Point_PointType_A_GUID_REF_CENTER;
  static const PointType A_GUID_POINT =
    Point_PointType_A_GUID_POINT;
  static const PointType A_PARTFIELD_REF_POINT =
    Point_PointType_A_PARTFIELD_REF_POINT;
  static const PointType A_HOMEBASE =
    Point_PointType_A_HOMEBASE;
  static inline bool PointType_IsValid(int value) {
    return Point_PointType_IsValid(value);
  }
  static const PointType PointType_MIN =
    Point_PointType_PointType_MIN;
  static const PointType PointType_MAX =
    Point_PointType_PointType_MAX;
  static const int PointType_ARRAYSIZE =
    Point_PointType_PointType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PointType_descriptor() {
    return Point_PointType_descriptor();
  }
  static inline const ::std::string& PointType_Name(PointType value) {
    return Point_PointType_Name(value);
  }
  static inline bool PointType_Parse(const ::std::string& name,
      PointType* value) {
    return Point_PointType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string point_designator = 2;
  void clear_point_designator();
  static const int kPointDesignatorFieldNumber = 2;
  const ::std::string& point_designator() const;
  void set_point_designator(const ::std::string& value);
  #if LANG_CXX11
  void set_point_designator(::std::string&& value);
  #endif
  void set_point_designator(const char* value);
  void set_point_designator(const char* value, size_t size);
  ::std::string* mutable_point_designator();
  ::std::string* release_point_designator();
  void set_allocated_point_designator(::std::string* point_designator);

  // string filename = 10;
  void clear_filename();
  static const int kFilenameFieldNumber = 10;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // .efdi.UID point_id = 7;
  bool has_point_id() const;
  void clear_point_id();
  static const int kPointIdFieldNumber = 7;
  const ::efdi::UID& point_id() const;
  ::efdi::UID* release_point_id();
  ::efdi::UID* mutable_point_id();
  void set_allocated_point_id(::efdi::UID* point_id);

  // double point_north = 3;
  void clear_point_north();
  static const int kPointNorthFieldNumber = 3;
  double point_north() const;
  void set_point_north(double value);

  // .efdi.Point.PointType point_type = 1;
  void clear_point_type();
  static const int kPointTypeFieldNumber = 1;
  ::efdi::Point_PointType point_type() const;
  void set_point_type(::efdi::Point_PointType value);

  // uint32 point_colour = 6;
  void clear_point_colour();
  static const int kPointColourFieldNumber = 6;
  ::google::protobuf::uint32 point_colour() const;
  void set_point_colour(::google::protobuf::uint32 value);

  // double point_east = 4;
  void clear_point_east();
  static const int kPointEastFieldNumber = 4;
  double point_east() const;
  void set_point_east(double value);

  // sint64 point_up = 5;
  void clear_point_up();
  static const int kPointUpFieldNumber = 5;
  ::google::protobuf::int64 point_up() const;
  void set_point_up(::google::protobuf::int64 value);

  // double point_horizontal_accuracy = 8;
  void clear_point_horizontal_accuracy();
  static const int kPointHorizontalAccuracyFieldNumber = 8;
  double point_horizontal_accuracy() const;
  void set_point_horizontal_accuracy(double value);

  // double point_vertical_accuracy = 9;
  void clear_point_vertical_accuracy();
  static const int kPointVerticalAccuracyFieldNumber = 9;
  double point_vertical_accuracy() const;
  void set_point_vertical_accuracy(double value);

  // uint64 filelength = 11;
  void clear_filelength();
  static const int kFilelengthFieldNumber = 11;
  ::google::protobuf::uint64 filelength() const;
  void set_filelength(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:efdi.Point)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr point_designator_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::efdi::UID* point_id_;
  double point_north_;
  int point_type_;
  ::google::protobuf::uint32 point_colour_;
  double point_east_;
  ::google::protobuf::int64 point_up_;
  double point_horizontal_accuracy_;
  double point_vertical_accuracy_;
  ::google::protobuf::uint64 filelength_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsPointImpl();
};
// -------------------------------------------------------------------

class Polygon : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.Polygon) */ {
 public:
  Polygon();
  virtual ~Polygon();

  Polygon(const Polygon& from);

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(Polygon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Polygon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(Polygon* other);
  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Polygon* New() const PROTOBUF_FINAL { return New(NULL); }

  Polygon* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Polygon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Polygon_PolygonType PolygonType;
  static const PolygonType A_NOTSET =
    Polygon_PolygonType_A_NOTSET;
  static const PolygonType A_PARTFIELD_BOUNDARY =
    Polygon_PolygonType_A_PARTFIELD_BOUNDARY;
  static const PolygonType A_TREATMENT_ZONE =
    Polygon_PolygonType_A_TREATMENT_ZONE;
  static const PolygonType A_WATER_SURFACE =
    Polygon_PolygonType_A_WATER_SURFACE;
  static const PolygonType A_BUILDING =
    Polygon_PolygonType_A_BUILDING;
  static const PolygonType A_ROAD =
    Polygon_PolygonType_A_ROAD;
  static const PolygonType A_OBSTACLE =
    Polygon_PolygonType_A_OBSTACLE;
  static const PolygonType A_FLAG =
    Polygon_PolygonType_A_FLAG;
  static const PolygonType A_OTHER =
    Polygon_PolygonType_A_OTHER;
  static const PolygonType A_MAINFIELD =
    Polygon_PolygonType_A_MAINFIELD;
  static const PolygonType A_HEADLAND =
    Polygon_PolygonType_A_HEADLAND;
  static const PolygonType A_BUFFER_ZONE =
    Polygon_PolygonType_A_BUFFER_ZONE;
  static const PolygonType A_WINDBREAK =
    Polygon_PolygonType_A_WINDBREAK;
  static inline bool PolygonType_IsValid(int value) {
    return Polygon_PolygonType_IsValid(value);
  }
  static const PolygonType PolygonType_MIN =
    Polygon_PolygonType_PolygonType_MIN;
  static const PolygonType PolygonType_MAX =
    Polygon_PolygonType_PolygonType_MAX;
  static const int PolygonType_ARRAYSIZE =
    Polygon_PolygonType_PolygonType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PolygonType_descriptor() {
    return Polygon_PolygonType_descriptor();
  }
  static inline const ::std::string& PolygonType_Name(PolygonType value) {
    return Polygon_PolygonType_Name(value);
  }
  static inline bool PolygonType_Parse(const ::std::string& name,
      PolygonType* value) {
    return Polygon_PolygonType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .efdi.LineString line_string = 6;
  int line_string_size() const;
  void clear_line_string();
  static const int kLineStringFieldNumber = 6;
  const ::efdi::LineString& line_string(int index) const;
  ::efdi::LineString* mutable_line_string(int index);
  ::efdi::LineString* add_line_string();
  ::google::protobuf::RepeatedPtrField< ::efdi::LineString >*
      mutable_line_string();
  const ::google::protobuf::RepeatedPtrField< ::efdi::LineString >&
      line_string() const;

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string polygon_designator = 2;
  void clear_polygon_designator();
  static const int kPolygonDesignatorFieldNumber = 2;
  const ::std::string& polygon_designator() const;
  void set_polygon_designator(const ::std::string& value);
  #if LANG_CXX11
  void set_polygon_designator(::std::string&& value);
  #endif
  void set_polygon_designator(const char* value);
  void set_polygon_designator(const char* value, size_t size);
  ::std::string* mutable_polygon_designator();
  ::std::string* release_polygon_designator();
  void set_allocated_polygon_designator(::std::string* polygon_designator);

  // .efdi.UID polygon_id = 5;
  bool has_polygon_id() const;
  void clear_polygon_id();
  static const int kPolygonIdFieldNumber = 5;
  const ::efdi::UID& polygon_id() const;
  ::efdi::UID* release_polygon_id();
  ::efdi::UID* mutable_polygon_id();
  void set_allocated_polygon_id(::efdi::UID* polygon_id);

  // .efdi.Polygon.PolygonType polygon_type = 1;
  void clear_polygon_type();
  static const int kPolygonTypeFieldNumber = 1;
  ::efdi::Polygon_PolygonType polygon_type() const;
  void set_polygon_type(::efdi::Polygon_PolygonType value);

  // uint32 polygon_colour = 4;
  void clear_polygon_colour();
  static const int kPolygonColourFieldNumber = 4;
  ::google::protobuf::uint32 polygon_colour() const;
  void set_polygon_colour(::google::protobuf::uint32 value);

  // uint64 polygon_area = 3;
  void clear_polygon_area();
  static const int kPolygonAreaFieldNumber = 3;
  ::google::protobuf::uint64 polygon_area() const;
  void set_polygon_area(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:efdi.Polygon)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::efdi::LineString > line_string_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr polygon_designator_;
  ::efdi::UID* polygon_id_;
  int polygon_type_;
  ::google::protobuf::uint32 polygon_colour_;
  ::google::protobuf::uint64 polygon_area_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsPolygonImpl();
};
// -------------------------------------------------------------------

class Position : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(Position* other);
  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const PROTOBUF_FINAL { return New(NULL); }

  Position* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Position_PositionStatus PositionStatus;
  static const PositionStatus D_NO_GPS =
    Position_PositionStatus_D_NO_GPS;
  static const PositionStatus D_GNSS =
    Position_PositionStatus_D_GNSS;
  static const PositionStatus D_DGNSS =
    Position_PositionStatus_D_DGNSS;
  static const PositionStatus D_PRECISE_GNSS =
    Position_PositionStatus_D_PRECISE_GNSS;
  static const PositionStatus D_RTK_FINTEGER =
    Position_PositionStatus_D_RTK_FINTEGER;
  static const PositionStatus D_RTK_FLOAT =
    Position_PositionStatus_D_RTK_FLOAT;
  static const PositionStatus D_EST_DR_MODE =
    Position_PositionStatus_D_EST_DR_MODE;
  static const PositionStatus D_MANUAL_INPUT =
    Position_PositionStatus_D_MANUAL_INPUT;
  static const PositionStatus D_SIMULATE_MODE =
    Position_PositionStatus_D_SIMULATE_MODE;
  static const PositionStatus D_ERROR =
    Position_PositionStatus_D_ERROR;
  static const PositionStatus D_NOT_AVAILABLE =
    Position_PositionStatus_D_NOT_AVAILABLE;
  static inline bool PositionStatus_IsValid(int value) {
    return Position_PositionStatus_IsValid(value);
  }
  static const PositionStatus PositionStatus_MIN =
    Position_PositionStatus_PositionStatus_MIN;
  static const PositionStatus PositionStatus_MAX =
    Position_PositionStatus_PositionStatus_MAX;
  static const int PositionStatus_ARRAYSIZE =
    Position_PositionStatus_PositionStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PositionStatus_descriptor() {
    return Position_PositionStatus_descriptor();
  }
  static inline const ::std::string& PositionStatus_Name(PositionStatus value) {
    return Position_PositionStatus_Name(value);
  }
  static inline bool PositionStatus_Parse(const ::std::string& name,
      PositionStatus* value) {
    return Position_PositionStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // .google.protobuf.Timestamp gps_utc_timestamp = 8;
  bool has_gps_utc_timestamp() const;
  void clear_gps_utc_timestamp();
  static const int kGpsUtcTimestampFieldNumber = 8;
  const ::google::protobuf::Timestamp& gps_utc_timestamp() const;
  ::google::protobuf::Timestamp* release_gps_utc_timestamp();
  ::google::protobuf::Timestamp* mutable_gps_utc_timestamp();
  void set_allocated_gps_utc_timestamp(::google::protobuf::Timestamp* gps_utc_timestamp);

  // double position_north = 1;
  void clear_position_north();
  static const int kPositionNorthFieldNumber = 1;
  double position_north() const;
  void set_position_north(double value);

  // double position_east = 2;
  void clear_position_east();
  static const int kPositionEastFieldNumber = 2;
  double position_east() const;
  void set_position_east(double value);

  // sint64 position_up = 3;
  void clear_position_up();
  static const int kPositionUpFieldNumber = 3;
  ::google::protobuf::int64 position_up() const;
  void set_position_up(::google::protobuf::int64 value);

  // double pdop = 5;
  void clear_pdop();
  static const int kPdopFieldNumber = 5;
  double pdop() const;
  void set_pdop(double value);

  // .efdi.Position.PositionStatus position_status = 4;
  void clear_position_status();
  static const int kPositionStatusFieldNumber = 4;
  ::efdi::Position_PositionStatus position_status() const;
  void set_position_status(::efdi::Position_PositionStatus value);

  // uint32 number_of_satellites = 7;
  void clear_number_of_satellites();
  static const int kNumberOfSatellitesFieldNumber = 7;
  ::google::protobuf::uint32 number_of_satellites() const;
  void set_number_of_satellites(::google::protobuf::uint32 value);

  // double hdop = 6;
  void clear_hdop();
  static const int kHdopFieldNumber = 6;
  double hdop() const;
  void set_hdop(double value);

  // @@protoc_insertion_point(class_scope:efdi.Position)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::Timestamp* gps_utc_timestamp_;
  double position_north_;
  double position_east_;
  ::google::protobuf::int64 position_up_;
  double pdop_;
  int position_status_;
  ::google::protobuf::uint32 number_of_satellites_;
  double hdop_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsPositionImpl();
};
// -------------------------------------------------------------------

class ProcessDataVariable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.ProcessDataVariable) */ {
 public:
  ProcessDataVariable();
  virtual ~ProcessDataVariable();

  ProcessDataVariable(const ProcessDataVariable& from);

  inline ProcessDataVariable& operator=(const ProcessDataVariable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcessDataVariable(ProcessDataVariable&& from) noexcept
    : ProcessDataVariable() {
    *this = ::std::move(from);
  }

  inline ProcessDataVariable& operator=(ProcessDataVariable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessDataVariable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessDataVariable* internal_default_instance() {
    return reinterpret_cast<const ProcessDataVariable*>(
               &_ProcessDataVariable_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(ProcessDataVariable* other);
  friend void swap(ProcessDataVariable& a, ProcessDataVariable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcessDataVariable* New() const PROTOBUF_FINAL { return New(NULL); }

  ProcessDataVariable* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProcessDataVariable& from);
  void MergeFrom(const ProcessDataVariable& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProcessDataVariable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .efdi.ProcessDataVariable process_data_variable = 8;
  int process_data_variable_size() const;
  void clear_process_data_variable();
  static const int kProcessDataVariableFieldNumber = 8;
  const ::efdi::ProcessDataVariable& process_data_variable(int index) const;
  ::efdi::ProcessDataVariable* mutable_process_data_variable(int index);
  ::efdi::ProcessDataVariable* add_process_data_variable();
  ::google::protobuf::RepeatedPtrField< ::efdi::ProcessDataVariable >*
      mutable_process_data_variable();
  const ::google::protobuf::RepeatedPtrField< ::efdi::ProcessDataVariable >&
      process_data_variable() const;

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // .efdi.UID product_id_ref = 3;
  bool has_product_id_ref() const;
  void clear_product_id_ref();
  static const int kProductIdRefFieldNumber = 3;
  const ::efdi::UID& product_id_ref() const;
  ::efdi::UID* release_product_id_ref();
  ::efdi::UID* mutable_product_id_ref();
  void set_allocated_product_id_ref(::efdi::UID* product_id_ref);

  // .efdi.UID device_element_id_ref = 4;
  bool has_device_element_id_ref() const;
  void clear_device_element_id_ref();
  static const int kDeviceElementIdRefFieldNumber = 4;
  const ::efdi::UID& device_element_id_ref() const;
  ::efdi::UID* release_device_element_id_ref();
  ::efdi::UID* mutable_device_element_id_ref();
  void set_allocated_device_element_id_ref(::efdi::UID* device_element_id_ref);

  // .efdi.UID value_presentation_id_ref = 5;
  bool has_value_presentation_id_ref() const;
  void clear_value_presentation_id_ref();
  static const int kValuePresentationIdRefFieldNumber = 5;
  const ::efdi::UID& value_presentation_id_ref() const;
  ::efdi::UID* release_value_presentation_id_ref();
  ::efdi::UID* mutable_value_presentation_id_ref();
  void set_allocated_value_presentation_id_ref(::efdi::UID* value_presentation_id_ref);

  // sint64 process_data_value = 2;
  void clear_process_data_value();
  static const int kProcessDataValueFieldNumber = 2;
  ::google::protobuf::int64 process_data_value() const;
  void set_process_data_value(::google::protobuf::int64 value);

  // sint64 actual_cultural_practice_value = 6;
  void clear_actual_cultural_practice_value();
  static const int kActualCulturalPracticeValueFieldNumber = 6;
  ::google::protobuf::int64 actual_cultural_practice_value() const;
  void set_actual_cultural_practice_value(::google::protobuf::int64 value);

  // sint64 element_type_instance_value = 7;
  void clear_element_type_instance_value();
  static const int kElementTypeInstanceValueFieldNumber = 7;
  ::google::protobuf::int64 element_type_instance_value() const;
  void set_element_type_instance_value(::google::protobuf::int64 value);

  // uint32 process_data_ddi = 1;
  void clear_process_data_ddi();
  static const int kProcessDataDdiFieldNumber = 1;
  ::google::protobuf::uint32 process_data_ddi() const;
  void set_process_data_ddi(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:efdi.ProcessDataVariable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::efdi::ProcessDataVariable > process_data_variable_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::efdi::UID* product_id_ref_;
  ::efdi::UID* device_element_id_ref_;
  ::efdi::UID* value_presentation_id_ref_;
  ::google::protobuf::int64 process_data_value_;
  ::google::protobuf::int64 actual_cultural_practice_value_;
  ::google::protobuf::int64 element_type_instance_value_;
  ::google::protobuf::uint32 process_data_ddi_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsProcessDataVariableImpl();
};
// -------------------------------------------------------------------

class Product : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.Product) */ {
 public:
  Product();
  virtual ~Product();

  Product(const Product& from);

  inline Product& operator=(const Product& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Product(Product&& from) noexcept
    : Product() {
    *this = ::std::move(from);
  }

  inline Product& operator=(Product&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Product& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Product* internal_default_instance() {
    return reinterpret_cast<const Product*>(
               &_Product_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(Product* other);
  friend void swap(Product& a, Product& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Product* New() const PROTOBUF_FINAL { return New(NULL); }

  Product* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Product& from);
  void MergeFrom(const Product& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Product* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Product_ProductType ProductType;
  static const ProductType F_NOTSET =
    Product_ProductType_F_NOTSET;
  static const ProductType F_SINGLE =
    Product_ProductType_F_SINGLE;
  static const ProductType F_MIXTURE =
    Product_ProductType_F_MIXTURE;
  static const ProductType F_TEMPORARY_MIXTURE =
    Product_ProductType_F_TEMPORARY_MIXTURE;
  static inline bool ProductType_IsValid(int value) {
    return Product_ProductType_IsValid(value);
  }
  static const ProductType ProductType_MIN =
    Product_ProductType_ProductType_MIN;
  static const ProductType ProductType_MAX =
    Product_ProductType_ProductType_MAX;
  static const int ProductType_ARRAYSIZE =
    Product_ProductType_ProductType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProductType_descriptor() {
    return Product_ProductType_descriptor();
  }
  static inline const ::std::string& ProductType_Name(ProductType value) {
    return Product_ProductType_Name(value);
  }
  static inline bool ProductType_Parse(const ::std::string& name,
      ProductType* value) {
    return Product_ProductType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .efdi.ProductRelation product_relation = 11;
  int product_relation_size() const;
  void clear_product_relation();
  static const int kProductRelationFieldNumber = 11;
  const ::efdi::ProductRelation& product_relation(int index) const;
  ::efdi::ProductRelation* mutable_product_relation(int index);
  ::efdi::ProductRelation* add_product_relation();
  ::google::protobuf::RepeatedPtrField< ::efdi::ProductRelation >*
      mutable_product_relation();
  const ::google::protobuf::RepeatedPtrField< ::efdi::ProductRelation >&
      product_relation() const;

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string product_designator = 2;
  void clear_product_designator();
  static const int kProductDesignatorFieldNumber = 2;
  const ::std::string& product_designator() const;
  void set_product_designator(const ::std::string& value);
  #if LANG_CXX11
  void set_product_designator(::std::string&& value);
  #endif
  void set_product_designator(const char* value);
  void set_product_designator(const char* value, size_t size);
  ::std::string* mutable_product_designator();
  ::std::string* release_product_designator();
  void set_allocated_product_designator(::std::string* product_designator);

  // .efdi.UID product_id = 1;
  bool has_product_id() const;
  void clear_product_id();
  static const int kProductIdFieldNumber = 1;
  const ::efdi::UID& product_id() const;
  ::efdi::UID* release_product_id();
  ::efdi::UID* mutable_product_id();
  void set_allocated_product_id(::efdi::UID* product_id);

  // .efdi.UID product_group_id_ref = 3;
  bool has_product_group_id_ref() const;
  void clear_product_group_id_ref();
  static const int kProductGroupIdRefFieldNumber = 3;
  const ::efdi::UID& product_group_id_ref() const;
  ::efdi::UID* release_product_group_id_ref();
  ::efdi::UID* mutable_product_group_id_ref();
  void set_allocated_product_group_id_ref(::efdi::UID* product_group_id_ref);

  // .efdi.UID value_presention_id_ref = 4;
  bool has_value_presention_id_ref() const;
  void clear_value_presention_id_ref();
  static const int kValuePresentionIdRefFieldNumber = 4;
  const ::efdi::UID& value_presention_id_ref() const;
  ::efdi::UID* release_value_presention_id_ref();
  ::efdi::UID* mutable_value_presention_id_ref();
  void set_allocated_value_presention_id_ref(::efdi::UID* value_presention_id_ref);

  // uint32 quantity_ddi = 5;
  void clear_quantity_ddi();
  static const int kQuantityDdiFieldNumber = 5;
  ::google::protobuf::uint32 quantity_ddi() const;
  void set_quantity_ddi(::google::protobuf::uint32 value);

  // .efdi.Product.ProductType product_type = 6;
  void clear_product_type();
  static const int kProductTypeFieldNumber = 6;
  ::efdi::Product_ProductType product_type() const;
  void set_product_type(::efdi::Product_ProductType value);

  // sint64 mixture_recipe_quantity = 7;
  void clear_mixture_recipe_quantity();
  static const int kMixtureRecipeQuantityFieldNumber = 7;
  ::google::protobuf::int64 mixture_recipe_quantity() const;
  void set_mixture_recipe_quantity(::google::protobuf::int64 value);

  // sint64 density_mass_per_volume = 8;
  void clear_density_mass_per_volume();
  static const int kDensityMassPerVolumeFieldNumber = 8;
  ::google::protobuf::int64 density_mass_per_volume() const;
  void set_density_mass_per_volume(::google::protobuf::int64 value);

  // sint64 density_mass_per_count = 9;
  void clear_density_mass_per_count();
  static const int kDensityMassPerCountFieldNumber = 9;
  ::google::protobuf::int64 density_mass_per_count() const;
  void set_density_mass_per_count(::google::protobuf::int64 value);

  // sint64 density_volume_per_count = 10;
  void clear_density_volume_per_count();
  static const int kDensityVolumePerCountFieldNumber = 10;
  ::google::protobuf::int64 density_volume_per_count() const;
  void set_density_volume_per_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:efdi.Product)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::efdi::ProductRelation > product_relation_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr product_designator_;
  ::efdi::UID* product_id_;
  ::efdi::UID* product_group_id_ref_;
  ::efdi::UID* value_presention_id_ref_;
  ::google::protobuf::uint32 quantity_ddi_;
  int product_type_;
  ::google::protobuf::int64 mixture_recipe_quantity_;
  ::google::protobuf::int64 density_mass_per_volume_;
  ::google::protobuf::int64 density_mass_per_count_;
  ::google::protobuf::int64 density_volume_per_count_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsProductImpl();
};
// -------------------------------------------------------------------

class ProductAllocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.ProductAllocation) */ {
 public:
  ProductAllocation();
  virtual ~ProductAllocation();

  ProductAllocation(const ProductAllocation& from);

  inline ProductAllocation& operator=(const ProductAllocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProductAllocation(ProductAllocation&& from) noexcept
    : ProductAllocation() {
    *this = ::std::move(from);
  }

  inline ProductAllocation& operator=(ProductAllocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProductAllocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProductAllocation* internal_default_instance() {
    return reinterpret_cast<const ProductAllocation*>(
               &_ProductAllocation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(ProductAllocation* other);
  friend void swap(ProductAllocation& a, ProductAllocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProductAllocation* New() const PROTOBUF_FINAL { return New(NULL); }

  ProductAllocation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProductAllocation& from);
  void MergeFrom(const ProductAllocation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProductAllocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ProductAllocation_TransferMode TransferMode;
  static const TransferMode D_NOTSET =
    ProductAllocation_TransferMode_D_NOTSET;
  static const TransferMode D_FILLING =
    ProductAllocation_TransferMode_D_FILLING;
  static const TransferMode D_EMPTYING =
    ProductAllocation_TransferMode_D_EMPTYING;
  static const TransferMode D_REMAINDER =
    ProductAllocation_TransferMode_D_REMAINDER;
  static inline bool TransferMode_IsValid(int value) {
    return ProductAllocation_TransferMode_IsValid(value);
  }
  static const TransferMode TransferMode_MIN =
    ProductAllocation_TransferMode_TransferMode_MIN;
  static const TransferMode TransferMode_MAX =
    ProductAllocation_TransferMode_TransferMode_MAX;
  static const int TransferMode_ARRAYSIZE =
    ProductAllocation_TransferMode_TransferMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TransferMode_descriptor() {
    return ProductAllocation_TransferMode_descriptor();
  }
  static inline const ::std::string& TransferMode_Name(TransferMode value) {
    return ProductAllocation_TransferMode_Name(value);
  }
  static inline bool TransferMode_Parse(const ::std::string& name,
      TransferMode* value) {
    return ProductAllocation_TransferMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // .efdi.UID product_id_ref = 1;
  bool has_product_id_ref() const;
  void clear_product_id_ref();
  static const int kProductIdRefFieldNumber = 1;
  const ::efdi::UID& product_id_ref() const;
  ::efdi::UID* release_product_id_ref();
  ::efdi::UID* mutable_product_id_ref();
  void set_allocated_product_id_ref(::efdi::UID* product_id_ref);

  // .efdi.UID device_element_id_ref = 5;
  bool has_device_element_id_ref() const;
  void clear_device_element_id_ref();
  static const int kDeviceElementIdRefFieldNumber = 5;
  const ::efdi::UID& device_element_id_ref() const;
  ::efdi::UID* release_device_element_id_ref();
  ::efdi::UID* mutable_device_element_id_ref();
  void set_allocated_device_element_id_ref(::efdi::UID* device_element_id_ref);

  // .efdi.UID value_presentation_id_ref = 6;
  bool has_value_presentation_id_ref() const;
  void clear_value_presentation_id_ref();
  static const int kValuePresentationIdRefFieldNumber = 6;
  const ::efdi::UID& value_presentation_id_ref() const;
  ::efdi::UID* release_value_presentation_id_ref();
  ::efdi::UID* mutable_value_presentation_id_ref();
  void set_allocated_value_presentation_id_ref(::efdi::UID* value_presentation_id_ref);

  // .efdi.UID product_sub_type_id_ref = 7;
  bool has_product_sub_type_id_ref() const;
  void clear_product_sub_type_id_ref();
  static const int kProductSubTypeIdRefFieldNumber = 7;
  const ::efdi::UID& product_sub_type_id_ref() const;
  ::efdi::UID* release_product_sub_type_id_ref();
  ::efdi::UID* mutable_product_sub_type_id_ref();
  void set_allocated_product_sub_type_id_ref(::efdi::UID* product_sub_type_id_ref);

  // .efdi.AllocationStamp allocation_stamp = 8;
  bool has_allocation_stamp() const;
  void clear_allocation_stamp();
  static const int kAllocationStampFieldNumber = 8;
  const ::efdi::AllocationStamp& allocation_stamp() const;
  ::efdi::AllocationStamp* release_allocation_stamp();
  ::efdi::AllocationStamp* mutable_allocation_stamp();
  void set_allocated_allocation_stamp(::efdi::AllocationStamp* allocation_stamp);

  // sint64 quantity_value = 3;
  void clear_quantity_value();
  static const int kQuantityValueFieldNumber = 3;
  ::google::protobuf::int64 quantity_value() const;
  void set_quantity_value(::google::protobuf::int64 value);

  // uint32 quantity_ddi = 2;
  void clear_quantity_ddi();
  static const int kQuantityDdiFieldNumber = 2;
  ::google::protobuf::uint32 quantity_ddi() const;
  void set_quantity_ddi(::google::protobuf::uint32 value);

  // .efdi.ProductAllocation.TransferMode transfer_mode = 4;
  void clear_transfer_mode();
  static const int kTransferModeFieldNumber = 4;
  ::efdi::ProductAllocation_TransferMode transfer_mode() const;
  void set_transfer_mode(::efdi::ProductAllocation_TransferMode value);

  // @@protoc_insertion_point(class_scope:efdi.ProductAllocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::efdi::UID* product_id_ref_;
  ::efdi::UID* device_element_id_ref_;
  ::efdi::UID* value_presentation_id_ref_;
  ::efdi::UID* product_sub_type_id_ref_;
  ::efdi::AllocationStamp* allocation_stamp_;
  ::google::protobuf::int64 quantity_value_;
  ::google::protobuf::uint32 quantity_ddi_;
  int transfer_mode_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsProductAllocationImpl();
};
// -------------------------------------------------------------------

class ProductGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.ProductGroup) */ {
 public:
  ProductGroup();
  virtual ~ProductGroup();

  ProductGroup(const ProductGroup& from);

  inline ProductGroup& operator=(const ProductGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProductGroup(ProductGroup&& from) noexcept
    : ProductGroup() {
    *this = ::std::move(from);
  }

  inline ProductGroup& operator=(ProductGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProductGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProductGroup* internal_default_instance() {
    return reinterpret_cast<const ProductGroup*>(
               &_ProductGroup_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void Swap(ProductGroup* other);
  friend void swap(ProductGroup& a, ProductGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProductGroup* New() const PROTOBUF_FINAL { return New(NULL); }

  ProductGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProductGroup& from);
  void MergeFrom(const ProductGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProductGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ProductGroup_ProductGroupType ProductGroupType;
  static const ProductGroupType C_NOTSET =
    ProductGroup_ProductGroupType_C_NOTSET;
  static const ProductGroupType C_PRODUCT_GROUP =
    ProductGroup_ProductGroupType_C_PRODUCT_GROUP;
  static const ProductGroupType C_CROP_TYPE =
    ProductGroup_ProductGroupType_C_CROP_TYPE;
  static inline bool ProductGroupType_IsValid(int value) {
    return ProductGroup_ProductGroupType_IsValid(value);
  }
  static const ProductGroupType ProductGroupType_MIN =
    ProductGroup_ProductGroupType_ProductGroupType_MIN;
  static const ProductGroupType ProductGroupType_MAX =
    ProductGroup_ProductGroupType_ProductGroupType_MAX;
  static const int ProductGroupType_ARRAYSIZE =
    ProductGroup_ProductGroupType_ProductGroupType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProductGroupType_descriptor() {
    return ProductGroup_ProductGroupType_descriptor();
  }
  static inline const ::std::string& ProductGroupType_Name(ProductGroupType value) {
    return ProductGroup_ProductGroupType_Name(value);
  }
  static inline bool ProductGroupType_Parse(const ::std::string& name,
      ProductGroupType* value) {
    return ProductGroup_ProductGroupType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string product_group_designator = 2;
  void clear_product_group_designator();
  static const int kProductGroupDesignatorFieldNumber = 2;
  const ::std::string& product_group_designator() const;
  void set_product_group_designator(const ::std::string& value);
  #if LANG_CXX11
  void set_product_group_designator(::std::string&& value);
  #endif
  void set_product_group_designator(const char* value);
  void set_product_group_designator(const char* value, size_t size);
  ::std::string* mutable_product_group_designator();
  ::std::string* release_product_group_designator();
  void set_allocated_product_group_designator(::std::string* product_group_designator);

  // .efdi.UID product_group_id = 1;
  bool has_product_group_id() const;
  void clear_product_group_id();
  static const int kProductGroupIdFieldNumber = 1;
  const ::efdi::UID& product_group_id() const;
  ::efdi::UID* release_product_group_id();
  ::efdi::UID* mutable_product_group_id();
  void set_allocated_product_group_id(::efdi::UID* product_group_id);

  // .efdi.ProductGroup.ProductGroupType product_group_type = 3;
  void clear_product_group_type();
  static const int kProductGroupTypeFieldNumber = 3;
  ::efdi::ProductGroup_ProductGroupType product_group_type() const;
  void set_product_group_type(::efdi::ProductGroup_ProductGroupType value);

  // @@protoc_insertion_point(class_scope:efdi.ProductGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr product_group_designator_;
  ::efdi::UID* product_group_id_;
  int product_group_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsProductGroupImpl();
};
// -------------------------------------------------------------------

class ProductRelation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.ProductRelation) */ {
 public:
  ProductRelation();
  virtual ~ProductRelation();

  ProductRelation(const ProductRelation& from);

  inline ProductRelation& operator=(const ProductRelation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProductRelation(ProductRelation&& from) noexcept
    : ProductRelation() {
    *this = ::std::move(from);
  }

  inline ProductRelation& operator=(ProductRelation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProductRelation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProductRelation* internal_default_instance() {
    return reinterpret_cast<const ProductRelation*>(
               &_ProductRelation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    45;

  void Swap(ProductRelation* other);
  friend void swap(ProductRelation& a, ProductRelation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProductRelation* New() const PROTOBUF_FINAL { return New(NULL); }

  ProductRelation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProductRelation& from);
  void MergeFrom(const ProductRelation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProductRelation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // .efdi.UID product_id_ref = 1;
  bool has_product_id_ref() const;
  void clear_product_id_ref();
  static const int kProductIdRefFieldNumber = 1;
  const ::efdi::UID& product_id_ref() const;
  ::efdi::UID* release_product_id_ref();
  ::efdi::UID* mutable_product_id_ref();
  void set_allocated_product_id_ref(::efdi::UID* product_id_ref);

  // sint64 quantity_value = 2;
  void clear_quantity_value();
  static const int kQuantityValueFieldNumber = 2;
  ::google::protobuf::int64 quantity_value() const;
  void set_quantity_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:efdi.ProductRelation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::efdi::UID* product_id_ref_;
  ::google::protobuf::int64 quantity_value_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsProductRelationImpl();
};
// -------------------------------------------------------------------

class Task : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.Task) */ {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(Task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    46;

  void Swap(Task* other);
  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const PROTOBUF_FINAL { return New(NULL); }

  Task* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Task* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Task_TaskStatus TaskStatus;
  static const TaskStatus G_NOTSET =
    Task_TaskStatus_G_NOTSET;
  static const TaskStatus G_PLANNED =
    Task_TaskStatus_G_PLANNED;
  static const TaskStatus G_RUNNING =
    Task_TaskStatus_G_RUNNING;
  static const TaskStatus G_PAUSED =
    Task_TaskStatus_G_PAUSED;
  static const TaskStatus G_COMPLETED =
    Task_TaskStatus_G_COMPLETED;
  static const TaskStatus G_TEMPLATE =
    Task_TaskStatus_G_TEMPLATE;
  static const TaskStatus G_CANCELED =
    Task_TaskStatus_G_CANCELED;
  static inline bool TaskStatus_IsValid(int value) {
    return Task_TaskStatus_IsValid(value);
  }
  static const TaskStatus TaskStatus_MIN =
    Task_TaskStatus_TaskStatus_MIN;
  static const TaskStatus TaskStatus_MAX =
    Task_TaskStatus_TaskStatus_MAX;
  static const int TaskStatus_ARRAYSIZE =
    Task_TaskStatus_TaskStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TaskStatus_descriptor() {
    return Task_TaskStatus_descriptor();
  }
  static inline const ::std::string& TaskStatus_Name(TaskStatus value) {
    return Task_TaskStatus_Name(value);
  }
  static inline bool TaskStatus_Parse(const ::std::string& name,
      TaskStatus* value) {
    return Task_TaskStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .efdi.TreatmentZone treatment_zone = 11;
  int treatment_zone_size() const;
  void clear_treatment_zone();
  static const int kTreatmentZoneFieldNumber = 11;
  const ::efdi::TreatmentZone& treatment_zone(int index) const;
  ::efdi::TreatmentZone* mutable_treatment_zone(int index);
  ::efdi::TreatmentZone* add_treatment_zone();
  ::google::protobuf::RepeatedPtrField< ::efdi::TreatmentZone >*
      mutable_treatment_zone();
  const ::google::protobuf::RepeatedPtrField< ::efdi::TreatmentZone >&
      treatment_zone() const;

  // repeated .efdi.Time time = 12;
  int time_size() const;
  void clear_time();
  static const int kTimeFieldNumber = 12;
  const ::efdi::Time& time(int index) const;
  ::efdi::Time* mutable_time(int index);
  ::efdi::Time* add_time();
  ::google::protobuf::RepeatedPtrField< ::efdi::Time >*
      mutable_time();
  const ::google::protobuf::RepeatedPtrField< ::efdi::Time >&
      time() const;

  // repeated .efdi.WorkerAllocation worker_allocation = 14;
  int worker_allocation_size() const;
  void clear_worker_allocation();
  static const int kWorkerAllocationFieldNumber = 14;
  const ::efdi::WorkerAllocation& worker_allocation(int index) const;
  ::efdi::WorkerAllocation* mutable_worker_allocation(int index);
  ::efdi::WorkerAllocation* add_worker_allocation();
  ::google::protobuf::RepeatedPtrField< ::efdi::WorkerAllocation >*
      mutable_worker_allocation();
  const ::google::protobuf::RepeatedPtrField< ::efdi::WorkerAllocation >&
      worker_allocation() const;

  // repeated .efdi.DeviceAllocation device_allocation = 15;
  int device_allocation_size() const;
  void clear_device_allocation();
  static const int kDeviceAllocationFieldNumber = 15;
  const ::efdi::DeviceAllocation& device_allocation(int index) const;
  ::efdi::DeviceAllocation* mutable_device_allocation(int index);
  ::efdi::DeviceAllocation* add_device_allocation();
  ::google::protobuf::RepeatedPtrField< ::efdi::DeviceAllocation >*
      mutable_device_allocation();
  const ::google::protobuf::RepeatedPtrField< ::efdi::DeviceAllocation >&
      device_allocation() const;

  // repeated .efdi.Connection connection = 16;
  int connection_size() const;
  void clear_connection();
  static const int kConnectionFieldNumber = 16;
  const ::efdi::Connection& connection(int index) const;
  ::efdi::Connection* mutable_connection(int index);
  ::efdi::Connection* add_connection();
  ::google::protobuf::RepeatedPtrField< ::efdi::Connection >*
      mutable_connection();
  const ::google::protobuf::RepeatedPtrField< ::efdi::Connection >&
      connection() const;

  // repeated .efdi.ProductAllocation product_allocation = 17;
  int product_allocation_size() const;
  void clear_product_allocation();
  static const int kProductAllocationFieldNumber = 17;
  const ::efdi::ProductAllocation& product_allocation(int index) const;
  ::efdi::ProductAllocation* mutable_product_allocation(int index);
  ::efdi::ProductAllocation* add_product_allocation();
  ::google::protobuf::RepeatedPtrField< ::efdi::ProductAllocation >*
      mutable_product_allocation();
  const ::google::protobuf::RepeatedPtrField< ::efdi::ProductAllocation >&
      product_allocation() const;

  // repeated .efdi.DataLogTrigger data_log_trigger = 18;
  int data_log_trigger_size() const;
  void clear_data_log_trigger();
  static const int kDataLogTriggerFieldNumber = 18;
  const ::efdi::DataLogTrigger& data_log_trigger(int index) const;
  ::efdi::DataLogTrigger* mutable_data_log_trigger(int index);
  ::efdi::DataLogTrigger* add_data_log_trigger();
  ::google::protobuf::RepeatedPtrField< ::efdi::DataLogTrigger >*
      mutable_data_log_trigger();
  const ::google::protobuf::RepeatedPtrField< ::efdi::DataLogTrigger >&
      data_log_trigger() const;

  // repeated .efdi.CommentAllocation comment_allocation = 19;
  int comment_allocation_size() const;
  void clear_comment_allocation();
  static const int kCommentAllocationFieldNumber = 19;
  const ::efdi::CommentAllocation& comment_allocation(int index) const;
  ::efdi::CommentAllocation* mutable_comment_allocation(int index);
  ::efdi::CommentAllocation* add_comment_allocation();
  ::google::protobuf::RepeatedPtrField< ::efdi::CommentAllocation >*
      mutable_comment_allocation();
  const ::google::protobuf::RepeatedPtrField< ::efdi::CommentAllocation >&
      comment_allocation() const;

  // repeated .efdi.TimeLog time_log = 20;
  int time_log_size() const;
  void clear_time_log();
  static const int kTimeLogFieldNumber = 20;
  const ::efdi::TimeLog& time_log(int index) const;
  ::efdi::TimeLog* mutable_time_log(int index);
  ::efdi::TimeLog* add_time_log();
  ::google::protobuf::RepeatedPtrField< ::efdi::TimeLog >*
      mutable_time_log();
  const ::google::protobuf::RepeatedPtrField< ::efdi::TimeLog >&
      time_log() const;

  // repeated .efdi.ControlAssignment control_assignment = 22;
  int control_assignment_size() const;
  void clear_control_assignment();
  static const int kControlAssignmentFieldNumber = 22;
  const ::efdi::ControlAssignment& control_assignment(int index) const;
  ::efdi::ControlAssignment* mutable_control_assignment(int index);
  ::efdi::ControlAssignment* add_control_assignment();
  ::google::protobuf::RepeatedPtrField< ::efdi::ControlAssignment >*
      mutable_control_assignment();
  const ::google::protobuf::RepeatedPtrField< ::efdi::ControlAssignment >&
      control_assignment() const;

  // repeated .efdi.GuidanceAllocation guidance_allocation = 23;
  int guidance_allocation_size() const;
  void clear_guidance_allocation();
  static const int kGuidanceAllocationFieldNumber = 23;
  const ::efdi::GuidanceAllocation& guidance_allocation(int index) const;
  ::efdi::GuidanceAllocation* mutable_guidance_allocation(int index);
  ::efdi::GuidanceAllocation* add_guidance_allocation();
  ::google::protobuf::RepeatedPtrField< ::efdi::GuidanceAllocation >*
      mutable_guidance_allocation();
  const ::google::protobuf::RepeatedPtrField< ::efdi::GuidanceAllocation >&
      guidance_allocation() const;

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string task_designator = 2;
  void clear_task_designator();
  static const int kTaskDesignatorFieldNumber = 2;
  const ::std::string& task_designator() const;
  void set_task_designator(const ::std::string& value);
  #if LANG_CXX11
  void set_task_designator(::std::string&& value);
  #endif
  void set_task_designator(const char* value);
  void set_task_designator(const char* value, size_t size);
  ::std::string* mutable_task_designator();
  ::std::string* release_task_designator();
  void set_allocated_task_designator(::std::string* task_designator);

  // .efdi.UID task_id = 1;
  bool has_task_id() const;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  const ::efdi::UID& task_id() const;
  ::efdi::UID* release_task_id();
  ::efdi::UID* mutable_task_id();
  void set_allocated_task_id(::efdi::UID* task_id);

  // .efdi.UID customer_id_ref = 3;
  bool has_customer_id_ref() const;
  void clear_customer_id_ref();
  static const int kCustomerIdRefFieldNumber = 3;
  const ::efdi::UID& customer_id_ref() const;
  ::efdi::UID* release_customer_id_ref();
  ::efdi::UID* mutable_customer_id_ref();
  void set_allocated_customer_id_ref(::efdi::UID* customer_id_ref);

  // .efdi.UID farm_id_ref = 4;
  bool has_farm_id_ref() const;
  void clear_farm_id_ref();
  static const int kFarmIdRefFieldNumber = 4;
  const ::efdi::UID& farm_id_ref() const;
  ::efdi::UID* release_farm_id_ref();
  ::efdi::UID* mutable_farm_id_ref();
  void set_allocated_farm_id_ref(::efdi::UID* farm_id_ref);

  // .efdi.UID partfield_id_ref = 5;
  bool has_partfield_id_ref() const;
  void clear_partfield_id_ref();
  static const int kPartfieldIdRefFieldNumber = 5;
  const ::efdi::UID& partfield_id_ref() const;
  ::efdi::UID* release_partfield_id_ref();
  ::efdi::UID* mutable_partfield_id_ref();
  void set_allocated_partfield_id_ref(::efdi::UID* partfield_id_ref);

  // .efdi.UID responsible_worker_id_ref = 6;
  bool has_responsible_worker_id_ref() const;
  void clear_responsible_worker_id_ref();
  static const int kResponsibleWorkerIdRefFieldNumber = 6;
  const ::efdi::UID& responsible_worker_id_ref() const;
  ::efdi::UID* release_responsible_worker_id_ref();
  ::efdi::UID* mutable_responsible_worker_id_ref();
  void set_allocated_responsible_worker_id_ref(::efdi::UID* responsible_worker_id_ref);

  // .efdi.OperTechPractice oper_tech_practice = 13;
  bool has_oper_tech_practice() const;
  void clear_oper_tech_practice();
  static const int kOperTechPracticeFieldNumber = 13;
  const ::efdi::OperTechPractice& oper_tech_practice() const;
  ::efdi::OperTechPractice* release_oper_tech_practice();
  ::efdi::OperTechPractice* mutable_oper_tech_practice();
  void set_allocated_oper_tech_practice(::efdi::OperTechPractice* oper_tech_practice);

  // .efdi.Grid grid = 21;
  bool has_grid() const;
  void clear_grid();
  static const int kGridFieldNumber = 21;
  const ::efdi::Grid& grid() const;
  ::efdi::Grid* release_grid();
  ::efdi::Grid* mutable_grid();
  void set_allocated_grid(::efdi::Grid* grid);

  // .efdi.Task.TaskStatus task_status = 7;
  void clear_task_status();
  static const int kTaskStatusFieldNumber = 7;
  ::efdi::Task_TaskStatus task_status() const;
  void set_task_status(::efdi::Task_TaskStatus value);

  // uint32 default_treatment_zone_code = 8;
  void clear_default_treatment_zone_code();
  static const int kDefaultTreatmentZoneCodeFieldNumber = 8;
  ::google::protobuf::uint32 default_treatment_zone_code() const;
  void set_default_treatment_zone_code(::google::protobuf::uint32 value);

  // uint32 position_lost_treatment_zone_code = 9;
  void clear_position_lost_treatment_zone_code();
  static const int kPositionLostTreatmentZoneCodeFieldNumber = 9;
  ::google::protobuf::uint32 position_lost_treatment_zone_code() const;
  void set_position_lost_treatment_zone_code(::google::protobuf::uint32 value);

  // uint32 out_of_field_treatment_zone_code = 10;
  void clear_out_of_field_treatment_zone_code();
  static const int kOutOfFieldTreatmentZoneCodeFieldNumber = 10;
  ::google::protobuf::uint32 out_of_field_treatment_zone_code() const;
  void set_out_of_field_treatment_zone_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:efdi.Task)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::efdi::TreatmentZone > treatment_zone_;
  ::google::protobuf::RepeatedPtrField< ::efdi::Time > time_;
  ::google::protobuf::RepeatedPtrField< ::efdi::WorkerAllocation > worker_allocation_;
  ::google::protobuf::RepeatedPtrField< ::efdi::DeviceAllocation > device_allocation_;
  ::google::protobuf::RepeatedPtrField< ::efdi::Connection > connection_;
  ::google::protobuf::RepeatedPtrField< ::efdi::ProductAllocation > product_allocation_;
  ::google::protobuf::RepeatedPtrField< ::efdi::DataLogTrigger > data_log_trigger_;
  ::google::protobuf::RepeatedPtrField< ::efdi::CommentAllocation > comment_allocation_;
  ::google::protobuf::RepeatedPtrField< ::efdi::TimeLog > time_log_;
  ::google::protobuf::RepeatedPtrField< ::efdi::ControlAssignment > control_assignment_;
  ::google::protobuf::RepeatedPtrField< ::efdi::GuidanceAllocation > guidance_allocation_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr task_designator_;
  ::efdi::UID* task_id_;
  ::efdi::UID* customer_id_ref_;
  ::efdi::UID* farm_id_ref_;
  ::efdi::UID* partfield_id_ref_;
  ::efdi::UID* responsible_worker_id_ref_;
  ::efdi::OperTechPractice* oper_tech_practice_;
  ::efdi::Grid* grid_;
  int task_status_;
  ::google::protobuf::uint32 default_treatment_zone_code_;
  ::google::protobuf::uint32 position_lost_treatment_zone_code_;
  ::google::protobuf::uint32 out_of_field_treatment_zone_code_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsTaskImpl();
};
// -------------------------------------------------------------------

class TaskControllerCapabilities : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.TaskControllerCapabilities) */ {
 public:
  TaskControllerCapabilities();
  virtual ~TaskControllerCapabilities();

  TaskControllerCapabilities(const TaskControllerCapabilities& from);

  inline TaskControllerCapabilities& operator=(const TaskControllerCapabilities& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskControllerCapabilities(TaskControllerCapabilities&& from) noexcept
    : TaskControllerCapabilities() {
    *this = ::std::move(from);
  }

  inline TaskControllerCapabilities& operator=(TaskControllerCapabilities&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskControllerCapabilities& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskControllerCapabilities* internal_default_instance() {
    return reinterpret_cast<const TaskControllerCapabilities*>(
               &_TaskControllerCapabilities_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    47;

  void Swap(TaskControllerCapabilities* other);
  friend void swap(TaskControllerCapabilities& a, TaskControllerCapabilities& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskControllerCapabilities* New() const PROTOBUF_FINAL { return New(NULL); }

  TaskControllerCapabilities* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TaskControllerCapabilities& from);
  void MergeFrom(const TaskControllerCapabilities& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TaskControllerCapabilities* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TaskControllerCapabilities_VersionNumber VersionNumber;
  static const VersionNumber C_DIS =
    TaskControllerCapabilities_VersionNumber_C_DIS;
  static const VersionNumber C_FDIS_1 =
    TaskControllerCapabilities_VersionNumber_C_FDIS_1;
  static const VersionNumber C_FDIS_2 =
    TaskControllerCapabilities_VersionNumber_C_FDIS_2;
  static const VersionNumber C_E2_DIS =
    TaskControllerCapabilities_VersionNumber_C_E2_DIS;
  static const VersionNumber C_E2_FDIS =
    TaskControllerCapabilities_VersionNumber_C_E2_FDIS;
  static inline bool VersionNumber_IsValid(int value) {
    return TaskControllerCapabilities_VersionNumber_IsValid(value);
  }
  static const VersionNumber VersionNumber_MIN =
    TaskControllerCapabilities_VersionNumber_VersionNumber_MIN;
  static const VersionNumber VersionNumber_MAX =
    TaskControllerCapabilities_VersionNumber_VersionNumber_MAX;
  static const int VersionNumber_ARRAYSIZE =
    TaskControllerCapabilities_VersionNumber_VersionNumber_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VersionNumber_descriptor() {
    return TaskControllerCapabilities_VersionNumber_descriptor();
  }
  static inline const ::std::string& VersionNumber_Name(VersionNumber value) {
    return TaskControllerCapabilities_VersionNumber_Name(value);
  }
  static inline bool VersionNumber_Parse(const ::std::string& name,
      VersionNumber* value) {
    return TaskControllerCapabilities_VersionNumber_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // bytes task_controller_control_function_name = 1;
  void clear_task_controller_control_function_name();
  static const int kTaskControllerControlFunctionNameFieldNumber = 1;
  const ::std::string& task_controller_control_function_name() const;
  void set_task_controller_control_function_name(const ::std::string& value);
  #if LANG_CXX11
  void set_task_controller_control_function_name(::std::string&& value);
  #endif
  void set_task_controller_control_function_name(const char* value);
  void set_task_controller_control_function_name(const void* value, size_t size);
  ::std::string* mutable_task_controller_control_function_name();
  ::std::string* release_task_controller_control_function_name();
  void set_allocated_task_controller_control_function_name(::std::string* task_controller_control_function_name);

  // string task_controller_designator = 2;
  void clear_task_controller_designator();
  static const int kTaskControllerDesignatorFieldNumber = 2;
  const ::std::string& task_controller_designator() const;
  void set_task_controller_designator(const ::std::string& value);
  #if LANG_CXX11
  void set_task_controller_designator(::std::string&& value);
  #endif
  void set_task_controller_designator(const char* value);
  void set_task_controller_designator(const char* value, size_t size);
  ::std::string* mutable_task_controller_designator();
  ::std::string* release_task_controller_designator();
  void set_allocated_task_controller_designator(::std::string* task_controller_designator);

  // .efdi.TaskControllerCapabilities.VersionNumber version_number = 3;
  void clear_version_number();
  static const int kVersionNumberFieldNumber = 3;
  ::efdi::TaskControllerCapabilities_VersionNumber version_number() const;
  void set_version_number(::efdi::TaskControllerCapabilities_VersionNumber value);

  // uint32 provided_capabilities = 4;
  void clear_provided_capabilities();
  static const int kProvidedCapabilitiesFieldNumber = 4;
  ::google::protobuf::uint32 provided_capabilities() const;
  void set_provided_capabilities(::google::protobuf::uint32 value);

  // uint32 number_of_booms_section_control = 5;
  void clear_number_of_booms_section_control();
  static const int kNumberOfBoomsSectionControlFieldNumber = 5;
  ::google::protobuf::uint32 number_of_booms_section_control() const;
  void set_number_of_booms_section_control(::google::protobuf::uint32 value);

  // uint32 number_of_sections_section_control = 6;
  void clear_number_of_sections_section_control();
  static const int kNumberOfSectionsSectionControlFieldNumber = 6;
  ::google::protobuf::uint32 number_of_sections_section_control() const;
  void set_number_of_sections_section_control(::google::protobuf::uint32 value);

  // uint32 number_of_control_channels = 7;
  void clear_number_of_control_channels();
  static const int kNumberOfControlChannelsFieldNumber = 7;
  ::google::protobuf::uint32 number_of_control_channels() const;
  void set_number_of_control_channels(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:efdi.TaskControllerCapabilities)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr task_controller_control_function_name_;
  ::google::protobuf::internal::ArenaStringPtr task_controller_designator_;
  int version_number_;
  ::google::protobuf::uint32 provided_capabilities_;
  ::google::protobuf::uint32 number_of_booms_section_control_;
  ::google::protobuf::uint32 number_of_sections_section_control_;
  ::google::protobuf::uint32 number_of_control_channels_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsTaskControllerCapabilitiesImpl();
};
// -------------------------------------------------------------------

class Time : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.Time) */ {
 public:
  Time();
  virtual ~Time();

  Time(const Time& from);

  inline Time& operator=(const Time& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Time(Time&& from) noexcept
    : Time() {
    *this = ::std::move(from);
  }

  inline Time& operator=(Time&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Time& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Time* internal_default_instance() {
    return reinterpret_cast<const Time*>(
               &_Time_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    48;

  void Swap(Time* other);
  friend void swap(Time& a, Time& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Time* New() const PROTOBUF_FINAL { return New(NULL); }

  Time* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Time& from);
  void MergeFrom(const Time& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Time* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Time_TimeType TimeType;
  static const TimeType D_NOTSET =
    Time_TimeType_D_NOTSET;
  static const TimeType D_PLANNED =
    Time_TimeType_D_PLANNED;
  static const TimeType D_PRELIMINARY =
    Time_TimeType_D_PRELIMINARY;
  static const TimeType D_EFFECTIVE =
    Time_TimeType_D_EFFECTIVE;
  static const TimeType D_INEFFECTIVE =
    Time_TimeType_D_INEFFECTIVE;
  static const TimeType D_REPAIR =
    Time_TimeType_D_REPAIR;
  static const TimeType D_CLEARING =
    Time_TimeType_D_CLEARING;
  static const TimeType D_POWERED_DOWN =
    Time_TimeType_D_POWERED_DOWN;
  static inline bool TimeType_IsValid(int value) {
    return Time_TimeType_IsValid(value);
  }
  static const TimeType TimeType_MIN =
    Time_TimeType_TimeType_MIN;
  static const TimeType TimeType_MAX =
    Time_TimeType_TimeType_MAX;
  static const int TimeType_ARRAYSIZE =
    Time_TimeType_TimeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TimeType_descriptor() {
    return Time_TimeType_descriptor();
  }
  static inline const ::std::string& TimeType_Name(TimeType value) {
    return Time_TimeType_Name(value);
  }
  static inline bool TimeType_Parse(const ::std::string& name,
      TimeType* value) {
    return Time_TimeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .efdi.DataLogValue data_log_value = 7;
  int data_log_value_size() const;
  void clear_data_log_value();
  static const int kDataLogValueFieldNumber = 7;
  const ::efdi::DataLogValue& data_log_value(int index) const;
  ::efdi::DataLogValue* mutable_data_log_value(int index);
  ::efdi::DataLogValue* add_data_log_value();
  ::google::protobuf::RepeatedPtrField< ::efdi::DataLogValue >*
      mutable_data_log_value();
  const ::google::protobuf::RepeatedPtrField< ::efdi::DataLogValue >&
      data_log_value() const;

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // .google.protobuf.Timestamp start = 1;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 1;
  const ::google::protobuf::Timestamp& start() const;
  ::google::protobuf::Timestamp* release_start();
  ::google::protobuf::Timestamp* mutable_start();
  void set_allocated_start(::google::protobuf::Timestamp* start);

  // .google.protobuf.Timestamp stop = 2;
  bool has_stop() const;
  void clear_stop();
  static const int kStopFieldNumber = 2;
  const ::google::protobuf::Timestamp& stop() const;
  ::google::protobuf::Timestamp* release_stop();
  ::google::protobuf::Timestamp* mutable_stop();
  void set_allocated_stop(::google::protobuf::Timestamp* stop);

  // .efdi.Position position_start = 5;
  bool has_position_start() const;
  void clear_position_start();
  static const int kPositionStartFieldNumber = 5;
  const ::efdi::Position& position_start() const;
  ::efdi::Position* release_position_start();
  ::efdi::Position* mutable_position_start();
  void set_allocated_position_start(::efdi::Position* position_start);

  // .efdi.Position position_stop = 6;
  bool has_position_stop() const;
  void clear_position_stop();
  static const int kPositionStopFieldNumber = 6;
  const ::efdi::Position& position_stop() const;
  ::efdi::Position* release_position_stop();
  ::efdi::Position* mutable_position_stop();
  void set_allocated_position_stop(::efdi::Position* position_stop);

  // uint64 duration = 3;
  void clear_duration();
  static const int kDurationFieldNumber = 3;
  ::google::protobuf::uint64 duration() const;
  void set_duration(::google::protobuf::uint64 value);

  // .efdi.Time.TimeType type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::efdi::Time_TimeType type() const;
  void set_type(::efdi::Time_TimeType value);

  // @@protoc_insertion_point(class_scope:efdi.Time)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::efdi::DataLogValue > data_log_value_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::Timestamp* start_;
  ::google::protobuf::Timestamp* stop_;
  ::efdi::Position* position_start_;
  ::efdi::Position* position_stop_;
  ::google::protobuf::uint64 duration_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsTimeImpl();
};
// -------------------------------------------------------------------

class TimeIntOnly : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.TimeIntOnly) */ {
 public:
  TimeIntOnly();
  virtual ~TimeIntOnly();

  TimeIntOnly(const TimeIntOnly& from);

  inline TimeIntOnly& operator=(const TimeIntOnly& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimeIntOnly(TimeIntOnly&& from) noexcept
    : TimeIntOnly() {
    *this = ::std::move(from);
  }

  inline TimeIntOnly& operator=(TimeIntOnly&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeIntOnly& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeIntOnly* internal_default_instance() {
    return reinterpret_cast<const TimeIntOnly*>(
               &_TimeIntOnly_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    49;

  void Swap(TimeIntOnly* other);
  friend void swap(TimeIntOnly& a, TimeIntOnly& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimeIntOnly* New() const PROTOBUF_FINAL { return New(NULL); }

  TimeIntOnly* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TimeIntOnly& from);
  void MergeFrom(const TimeIntOnly& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TimeIntOnly* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TimeIntOnly_TimeType TimeType;
  static const TimeType D_NOTSET =
    TimeIntOnly_TimeType_D_NOTSET;
  static const TimeType D_PLANNED =
    TimeIntOnly_TimeType_D_PLANNED;
  static const TimeType D_PRELIMINARY =
    TimeIntOnly_TimeType_D_PRELIMINARY;
  static const TimeType D_PREPARATION =
    TimeIntOnly_TimeType_D_PREPARATION;
  static const TimeType D_EFFECTIVE =
    TimeIntOnly_TimeType_D_EFFECTIVE;
  static const TimeType D_INEFFECTIVE =
    TimeIntOnly_TimeType_D_INEFFECTIVE;
  static const TimeType D_REPAIR =
    TimeIntOnly_TimeType_D_REPAIR;
  static const TimeType D_CLEARING =
    TimeIntOnly_TimeType_D_CLEARING;
  static const TimeType D_POWERED_DOWN =
    TimeIntOnly_TimeType_D_POWERED_DOWN;
  static inline bool TimeType_IsValid(int value) {
    return TimeIntOnly_TimeType_IsValid(value);
  }
  static const TimeType TimeType_MIN =
    TimeIntOnly_TimeType_TimeType_MIN;
  static const TimeType TimeType_MAX =
    TimeIntOnly_TimeType_TimeType_MAX;
  static const int TimeType_ARRAYSIZE =
    TimeIntOnly_TimeType_TimeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TimeType_descriptor() {
    return TimeIntOnly_TimeType_descriptor();
  }
  static inline const ::std::string& TimeType_Name(TimeType value) {
    return TimeIntOnly_TimeType_Name(value);
  }
  static inline bool TimeType_Parse(const ::std::string& name,
      TimeType* value) {
    return TimeIntOnly_TimeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .efdi.DataLogValueIntOnly data_log_value = 7;
  int data_log_value_size() const;
  void clear_data_log_value();
  static const int kDataLogValueFieldNumber = 7;
  const ::efdi::DataLogValueIntOnly& data_log_value(int index) const;
  ::efdi::DataLogValueIntOnly* mutable_data_log_value(int index);
  ::efdi::DataLogValueIntOnly* add_data_log_value();
  ::google::protobuf::RepeatedPtrField< ::efdi::DataLogValueIntOnly >*
      mutable_data_log_value();
  const ::google::protobuf::RepeatedPtrField< ::efdi::DataLogValueIntOnly >&
      data_log_value() const;

  // .google.protobuf.Timestamp start = 1;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 1;
  const ::google::protobuf::Timestamp& start() const;
  ::google::protobuf::Timestamp* release_start();
  ::google::protobuf::Timestamp* mutable_start();
  void set_allocated_start(::google::protobuf::Timestamp* start);

  // .google.protobuf.Timestamp stop = 2;
  bool has_stop() const;
  void clear_stop();
  static const int kStopFieldNumber = 2;
  const ::google::protobuf::Timestamp& stop() const;
  ::google::protobuf::Timestamp* release_stop();
  ::google::protobuf::Timestamp* mutable_stop();
  void set_allocated_stop(::google::protobuf::Timestamp* stop);

  // .efdi.Position position_start = 5;
  bool has_position_start() const;
  void clear_position_start();
  static const int kPositionStartFieldNumber = 5;
  const ::efdi::Position& position_start() const;
  ::efdi::Position* release_position_start();
  ::efdi::Position* mutable_position_start();
  void set_allocated_position_start(::efdi::Position* position_start);

  // .efdi.Position position_stop = 6;
  bool has_position_stop() const;
  void clear_position_stop();
  static const int kPositionStopFieldNumber = 6;
  const ::efdi::Position& position_stop() const;
  ::efdi::Position* release_position_stop();
  ::efdi::Position* mutable_position_stop();
  void set_allocated_position_stop(::efdi::Position* position_stop);

  // .google.protobuf.Any extension = 2048;
  bool has_extension() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension() const;
  ::google::protobuf::Any* release_extension();
  ::google::protobuf::Any* mutable_extension();
  void set_allocated_extension(::google::protobuf::Any* extension);

  // uint64 duration = 3;
  void clear_duration();
  static const int kDurationFieldNumber = 3;
  ::google::protobuf::uint64 duration() const;
  void set_duration(::google::protobuf::uint64 value);

  // .efdi.TimeIntOnly.TimeType type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::efdi::TimeIntOnly_TimeType type() const;
  void set_type(::efdi::TimeIntOnly_TimeType value);

  // @@protoc_insertion_point(class_scope:efdi.TimeIntOnly)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::efdi::DataLogValueIntOnly > data_log_value_;
  ::google::protobuf::Timestamp* start_;
  ::google::protobuf::Timestamp* stop_;
  ::efdi::Position* position_start_;
  ::efdi::Position* position_stop_;
  ::google::protobuf::Any* extension_;
  ::google::protobuf::uint64 duration_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsTimeIntOnlyImpl();
};
// -------------------------------------------------------------------

class TimeDetHier : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.TimeDetHier) */ {
 public:
  TimeDetHier();
  virtual ~TimeDetHier();

  TimeDetHier(const TimeDetHier& from);

  inline TimeDetHier& operator=(const TimeDetHier& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimeDetHier(TimeDetHier&& from) noexcept
    : TimeDetHier() {
    *this = ::std::move(from);
  }

  inline TimeDetHier& operator=(TimeDetHier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeDetHier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeDetHier* internal_default_instance() {
    return reinterpret_cast<const TimeDetHier*>(
               &_TimeDetHier_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    50;

  void Swap(TimeDetHier* other);
  friend void swap(TimeDetHier& a, TimeDetHier& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimeDetHier* New() const PROTOBUF_FINAL { return New(NULL); }

  TimeDetHier* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TimeDetHier& from);
  void MergeFrom(const TimeDetHier& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TimeDetHier* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TimeDetHier_TimeType TimeType;
  static const TimeType D_NOTSET =
    TimeDetHier_TimeType_D_NOTSET;
  static const TimeType D_PLANNED =
    TimeDetHier_TimeType_D_PLANNED;
  static const TimeType D_PRELIMINARY =
    TimeDetHier_TimeType_D_PRELIMINARY;
  static const TimeType D_PREPARATION =
    TimeDetHier_TimeType_D_PREPARATION;
  static const TimeType D_EFFECTIVE =
    TimeDetHier_TimeType_D_EFFECTIVE;
  static const TimeType D_INEFFECTIVE =
    TimeDetHier_TimeType_D_INEFFECTIVE;
  static const TimeType D_REPAIR =
    TimeDetHier_TimeType_D_REPAIR;
  static const TimeType D_CLEARING =
    TimeDetHier_TimeType_D_CLEARING;
  static const TimeType D_POWERED_DOWN =
    TimeDetHier_TimeType_D_POWERED_DOWN;
  static inline bool TimeType_IsValid(int value) {
    return TimeDetHier_TimeType_IsValid(value);
  }
  static const TimeType TimeType_MIN =
    TimeDetHier_TimeType_TimeType_MIN;
  static const TimeType TimeType_MAX =
    TimeDetHier_TimeType_TimeType_MAX;
  static const int TimeType_ARRAYSIZE =
    TimeDetHier_TimeType_TimeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TimeType_descriptor() {
    return TimeDetHier_TimeType_descriptor();
  }
  static inline const ::std::string& TimeType_Name(TimeType value) {
    return TimeDetHier_TimeType_Name(value);
  }
  static inline bool TimeType_Parse(const ::std::string& name,
      TimeType* value) {
    return TimeDetHier_TimeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .efdi.DeviceElementData device_element_data = 7;
  int device_element_data_size() const;
  void clear_device_element_data();
  static const int kDeviceElementDataFieldNumber = 7;
  const ::efdi::DeviceElementData& device_element_data(int index) const;
  ::efdi::DeviceElementData* mutable_device_element_data(int index);
  ::efdi::DeviceElementData* add_device_element_data();
  ::google::protobuf::RepeatedPtrField< ::efdi::DeviceElementData >*
      mutable_device_element_data();
  const ::google::protobuf::RepeatedPtrField< ::efdi::DeviceElementData >&
      device_element_data() const;

  // .google.protobuf.Timestamp start = 1;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 1;
  const ::google::protobuf::Timestamp& start() const;
  ::google::protobuf::Timestamp* release_start();
  ::google::protobuf::Timestamp* mutable_start();
  void set_allocated_start(::google::protobuf::Timestamp* start);

  // .google.protobuf.Timestamp stop = 2;
  bool has_stop() const;
  void clear_stop();
  static const int kStopFieldNumber = 2;
  const ::google::protobuf::Timestamp& stop() const;
  ::google::protobuf::Timestamp* release_stop();
  ::google::protobuf::Timestamp* mutable_stop();
  void set_allocated_stop(::google::protobuf::Timestamp* stop);

  // .efdi.Position position_start = 5;
  bool has_position_start() const;
  void clear_position_start();
  static const int kPositionStartFieldNumber = 5;
  const ::efdi::Position& position_start() const;
  ::efdi::Position* release_position_start();
  ::efdi::Position* mutable_position_start();
  void set_allocated_position_start(::efdi::Position* position_start);

  // .efdi.Position position_stop = 6;
  bool has_position_stop() const;
  void clear_position_stop();
  static const int kPositionStopFieldNumber = 6;
  const ::efdi::Position& position_stop() const;
  ::efdi::Position* release_position_stop();
  ::efdi::Position* mutable_position_stop();
  void set_allocated_position_stop(::efdi::Position* position_stop);

  // .google.protobuf.Any extension = 2048;
  bool has_extension() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension() const;
  ::google::protobuf::Any* release_extension();
  ::google::protobuf::Any* mutable_extension();
  void set_allocated_extension(::google::protobuf::Any* extension);

  // uint64 duration = 3;
  void clear_duration();
  static const int kDurationFieldNumber = 3;
  ::google::protobuf::uint64 duration() const;
  void set_duration(::google::protobuf::uint64 value);

  // .efdi.TimeDetHier.TimeType type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::efdi::TimeDetHier_TimeType type() const;
  void set_type(::efdi::TimeDetHier_TimeType value);

  // @@protoc_insertion_point(class_scope:efdi.TimeDetHier)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::efdi::DeviceElementData > device_element_data_;
  ::google::protobuf::Timestamp* start_;
  ::google::protobuf::Timestamp* stop_;
  ::efdi::Position* position_start_;
  ::efdi::Position* position_stop_;
  ::google::protobuf::Any* extension_;
  ::google::protobuf::uint64 duration_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsTimeDetHierImpl();
};
// -------------------------------------------------------------------

class DeviceElementData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.DeviceElementData) */ {
 public:
  DeviceElementData();
  virtual ~DeviceElementData();

  DeviceElementData(const DeviceElementData& from);

  inline DeviceElementData& operator=(const DeviceElementData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceElementData(DeviceElementData&& from) noexcept
    : DeviceElementData() {
    *this = ::std::move(from);
  }

  inline DeviceElementData& operator=(DeviceElementData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceElementData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceElementData* internal_default_instance() {
    return reinterpret_cast<const DeviceElementData*>(
               &_DeviceElementData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    51;

  void Swap(DeviceElementData* other);
  friend void swap(DeviceElementData& a, DeviceElementData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceElementData* New() const PROTOBUF_FINAL { return New(NULL); }

  DeviceElementData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeviceElementData& from);
  void MergeFrom(const DeviceElementData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeviceElementData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .efdi.DataLogValueIntOnly data_log_value = 2;
  int data_log_value_size() const;
  void clear_data_log_value();
  static const int kDataLogValueFieldNumber = 2;
  const ::efdi::DataLogValueIntOnly& data_log_value(int index) const;
  ::efdi::DataLogValueIntOnly* mutable_data_log_value(int index);
  ::efdi::DataLogValueIntOnly* add_data_log_value();
  ::google::protobuf::RepeatedPtrField< ::efdi::DataLogValueIntOnly >*
      mutable_data_log_value();
  const ::google::protobuf::RepeatedPtrField< ::efdi::DataLogValueIntOnly >&
      data_log_value() const;

  // sint64 device_element_id_ref = 1;
  void clear_device_element_id_ref();
  static const int kDeviceElementIdRefFieldNumber = 1;
  ::google::protobuf::int64 device_element_id_ref() const;
  void set_device_element_id_ref(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:efdi.DeviceElementData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::efdi::DataLogValueIntOnly > data_log_value_;
  ::google::protobuf::int64 device_element_id_ref_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsDeviceElementDataImpl();
};
// -------------------------------------------------------------------

class TimeLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.TimeLog) */ {
 public:
  TimeLog();
  virtual ~TimeLog();

  TimeLog(const TimeLog& from);

  inline TimeLog& operator=(const TimeLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimeLog(TimeLog&& from) noexcept
    : TimeLog() {
    *this = ::std::move(from);
  }

  inline TimeLog& operator=(TimeLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeLog* internal_default_instance() {
    return reinterpret_cast<const TimeLog*>(
               &_TimeLog_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    52;

  void Swap(TimeLog* other);
  friend void swap(TimeLog& a, TimeLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimeLog* New() const PROTOBUF_FINAL { return New(NULL); }

  TimeLog* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TimeLog& from);
  void MergeFrom(const TimeLog& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TimeLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TimeLog_TimeLogType TimeLogType;
  static const TimeLogType C_NOTSET =
    TimeLog_TimeLogType_C_NOTSET;
  static const TimeLogType C_BINARY_TIMELOG =
    TimeLog_TimeLogType_C_BINARY_TIMELOG;
  static inline bool TimeLogType_IsValid(int value) {
    return TimeLog_TimeLogType_IsValid(value);
  }
  static const TimeLogType TimeLogType_MIN =
    TimeLog_TimeLogType_TimeLogType_MIN;
  static const TimeLogType TimeLogType_MAX =
    TimeLog_TimeLogType_TimeLogType_MAX;
  static const int TimeLogType_ARRAYSIZE =
    TimeLog_TimeLogType_TimeLogType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TimeLogType_descriptor() {
    return TimeLog_TimeLogType_descriptor();
  }
  static inline const ::std::string& TimeLogType_Name(TimeLogType value) {
    return TimeLog_TimeLogType_Name(value);
  }
  static inline bool TimeLogType_Parse(const ::std::string& name,
      TimeLogType* value) {
    return TimeLog_TimeLogType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .efdi.Time time = 4;
  int time_size() const;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  const ::efdi::Time& time(int index) const;
  ::efdi::Time* mutable_time(int index);
  ::efdi::Time* add_time();
  ::google::protobuf::RepeatedPtrField< ::efdi::Time >*
      mutable_time();
  const ::google::protobuf::RepeatedPtrField< ::efdi::Time >&
      time() const;

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string filename = 2;
  void clear_filename();
  static const int kFilenameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // uint64 filelength = 3;
  void clear_filelength();
  static const int kFilelengthFieldNumber = 3;
  ::google::protobuf::uint64 filelength() const;
  void set_filelength(::google::protobuf::uint64 value);

  // .efdi.TimeLog.TimeLogType time_log_type = 1;
  void clear_time_log_type();
  static const int kTimeLogTypeFieldNumber = 1;
  ::efdi::TimeLog_TimeLogType time_log_type() const;
  void set_time_log_type(::efdi::TimeLog_TimeLogType value);

  // @@protoc_insertion_point(class_scope:efdi.TimeLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::efdi::Time > time_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::uint64 filelength_;
  int time_log_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsTimeLogImpl();
};
// -------------------------------------------------------------------

class TreatmentZone : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.TreatmentZone) */ {
 public:
  TreatmentZone();
  virtual ~TreatmentZone();

  TreatmentZone(const TreatmentZone& from);

  inline TreatmentZone& operator=(const TreatmentZone& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TreatmentZone(TreatmentZone&& from) noexcept
    : TreatmentZone() {
    *this = ::std::move(from);
  }

  inline TreatmentZone& operator=(TreatmentZone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TreatmentZone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TreatmentZone* internal_default_instance() {
    return reinterpret_cast<const TreatmentZone*>(
               &_TreatmentZone_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    53;

  void Swap(TreatmentZone* other);
  friend void swap(TreatmentZone& a, TreatmentZone& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TreatmentZone* New() const PROTOBUF_FINAL { return New(NULL); }

  TreatmentZone* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TreatmentZone& from);
  void MergeFrom(const TreatmentZone& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TreatmentZone* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .efdi.Polygon polygon = 4;
  int polygon_size() const;
  void clear_polygon();
  static const int kPolygonFieldNumber = 4;
  const ::efdi::Polygon& polygon(int index) const;
  ::efdi::Polygon* mutable_polygon(int index);
  ::efdi::Polygon* add_polygon();
  ::google::protobuf::RepeatedPtrField< ::efdi::Polygon >*
      mutable_polygon();
  const ::google::protobuf::RepeatedPtrField< ::efdi::Polygon >&
      polygon() const;

  // repeated .efdi.ProcessDataVariable process_data_variable = 5;
  int process_data_variable_size() const;
  void clear_process_data_variable();
  static const int kProcessDataVariableFieldNumber = 5;
  const ::efdi::ProcessDataVariable& process_data_variable(int index) const;
  ::efdi::ProcessDataVariable* mutable_process_data_variable(int index);
  ::efdi::ProcessDataVariable* add_process_data_variable();
  ::google::protobuf::RepeatedPtrField< ::efdi::ProcessDataVariable >*
      mutable_process_data_variable();
  const ::google::protobuf::RepeatedPtrField< ::efdi::ProcessDataVariable >&
      process_data_variable() const;

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string treatment_zone_designator = 2;
  void clear_treatment_zone_designator();
  static const int kTreatmentZoneDesignatorFieldNumber = 2;
  const ::std::string& treatment_zone_designator() const;
  void set_treatment_zone_designator(const ::std::string& value);
  #if LANG_CXX11
  void set_treatment_zone_designator(::std::string&& value);
  #endif
  void set_treatment_zone_designator(const char* value);
  void set_treatment_zone_designator(const char* value, size_t size);
  ::std::string* mutable_treatment_zone_designator();
  ::std::string* release_treatment_zone_designator();
  void set_allocated_treatment_zone_designator(::std::string* treatment_zone_designator);

  // uint32 treatment_zone_code = 1;
  void clear_treatment_zone_code();
  static const int kTreatmentZoneCodeFieldNumber = 1;
  ::google::protobuf::uint32 treatment_zone_code() const;
  void set_treatment_zone_code(::google::protobuf::uint32 value);

  // uint32 treatment_zone_colour = 3;
  void clear_treatment_zone_colour();
  static const int kTreatmentZoneColourFieldNumber = 3;
  ::google::protobuf::uint32 treatment_zone_colour() const;
  void set_treatment_zone_colour(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:efdi.TreatmentZone)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::efdi::Polygon > polygon_;
  ::google::protobuf::RepeatedPtrField< ::efdi::ProcessDataVariable > process_data_variable_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr treatment_zone_designator_;
  ::google::protobuf::uint32 treatment_zone_code_;
  ::google::protobuf::uint32 treatment_zone_colour_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsTreatmentZoneImpl();
};
// -------------------------------------------------------------------

class ValuePresentation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.ValuePresentation) */ {
 public:
  ValuePresentation();
  virtual ~ValuePresentation();

  ValuePresentation(const ValuePresentation& from);

  inline ValuePresentation& operator=(const ValuePresentation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValuePresentation(ValuePresentation&& from) noexcept
    : ValuePresentation() {
    *this = ::std::move(from);
  }

  inline ValuePresentation& operator=(ValuePresentation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValuePresentation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValuePresentation* internal_default_instance() {
    return reinterpret_cast<const ValuePresentation*>(
               &_ValuePresentation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    54;

  void Swap(ValuePresentation* other);
  friend void swap(ValuePresentation& a, ValuePresentation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValuePresentation* New() const PROTOBUF_FINAL { return New(NULL); }

  ValuePresentation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ValuePresentation& from);
  void MergeFrom(const ValuePresentation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ValuePresentation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string unit_designator = 5;
  void clear_unit_designator();
  static const int kUnitDesignatorFieldNumber = 5;
  const ::std::string& unit_designator() const;
  void set_unit_designator(const ::std::string& value);
  #if LANG_CXX11
  void set_unit_designator(::std::string&& value);
  #endif
  void set_unit_designator(const char* value);
  void set_unit_designator(const char* value, size_t size);
  ::std::string* mutable_unit_designator();
  ::std::string* release_unit_designator();
  void set_allocated_unit_designator(::std::string* unit_designator);

  // .efdi.UID value_presentation_id = 1;
  bool has_value_presentation_id() const;
  void clear_value_presentation_id();
  static const int kValuePresentationIdFieldNumber = 1;
  const ::efdi::UID& value_presentation_id() const;
  ::efdi::UID* release_value_presentation_id();
  ::efdi::UID* mutable_value_presentation_id();
  void set_allocated_value_presentation_id(::efdi::UID* value_presentation_id);

  // .efdi.UID colour_legend_id_ref = 6;
  bool has_colour_legend_id_ref() const;
  void clear_colour_legend_id_ref();
  static const int kColourLegendIdRefFieldNumber = 6;
  const ::efdi::UID& colour_legend_id_ref() const;
  ::efdi::UID* release_colour_legend_id_ref();
  ::efdi::UID* mutable_colour_legend_id_ref();
  void set_allocated_colour_legend_id_ref(::efdi::UID* colour_legend_id_ref);

  // sint64 offset = 2;
  void clear_offset();
  static const int kOffsetFieldNumber = 2;
  ::google::protobuf::int64 offset() const;
  void set_offset(::google::protobuf::int64 value);

  // double scale = 3;
  void clear_scale();
  static const int kScaleFieldNumber = 3;
  double scale() const;
  void set_scale(double value);

  // uint32 number_of_decimals = 4;
  void clear_number_of_decimals();
  static const int kNumberOfDecimalsFieldNumber = 4;
  ::google::protobuf::uint32 number_of_decimals() const;
  void set_number_of_decimals(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:efdi.ValuePresentation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr unit_designator_;
  ::efdi::UID* value_presentation_id_;
  ::efdi::UID* colour_legend_id_ref_;
  ::google::protobuf::int64 offset_;
  double scale_;
  ::google::protobuf::uint32 number_of_decimals_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsValuePresentationImpl();
};
// -------------------------------------------------------------------

class Worker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.Worker) */ {
 public:
  Worker();
  virtual ~Worker();

  Worker(const Worker& from);

  inline Worker& operator=(const Worker& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Worker(Worker&& from) noexcept
    : Worker() {
    *this = ::std::move(from);
  }

  inline Worker& operator=(Worker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Worker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Worker* internal_default_instance() {
    return reinterpret_cast<const Worker*>(
               &_Worker_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    55;

  void Swap(Worker* other);
  friend void swap(Worker& a, Worker& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Worker* New() const PROTOBUF_FINAL { return New(NULL); }

  Worker* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Worker& from);
  void MergeFrom(const Worker& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Worker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // string worker_last_name = 2;
  void clear_worker_last_name();
  static const int kWorkerLastNameFieldNumber = 2;
  const ::std::string& worker_last_name() const;
  void set_worker_last_name(const ::std::string& value);
  #if LANG_CXX11
  void set_worker_last_name(::std::string&& value);
  #endif
  void set_worker_last_name(const char* value);
  void set_worker_last_name(const char* value, size_t size);
  ::std::string* mutable_worker_last_name();
  ::std::string* release_worker_last_name();
  void set_allocated_worker_last_name(::std::string* worker_last_name);

  // string worker_first_name = 3;
  void clear_worker_first_name();
  static const int kWorkerFirstNameFieldNumber = 3;
  const ::std::string& worker_first_name() const;
  void set_worker_first_name(const ::std::string& value);
  #if LANG_CXX11
  void set_worker_first_name(::std::string&& value);
  #endif
  void set_worker_first_name(const char* value);
  void set_worker_first_name(const char* value, size_t size);
  ::std::string* mutable_worker_first_name();
  ::std::string* release_worker_first_name();
  void set_allocated_worker_first_name(::std::string* worker_first_name);

  // string worker_street = 4;
  void clear_worker_street();
  static const int kWorkerStreetFieldNumber = 4;
  const ::std::string& worker_street() const;
  void set_worker_street(const ::std::string& value);
  #if LANG_CXX11
  void set_worker_street(::std::string&& value);
  #endif
  void set_worker_street(const char* value);
  void set_worker_street(const char* value, size_t size);
  ::std::string* mutable_worker_street();
  ::std::string* release_worker_street();
  void set_allocated_worker_street(::std::string* worker_street);

  // string worker_po_box = 5;
  void clear_worker_po_box();
  static const int kWorkerPoBoxFieldNumber = 5;
  const ::std::string& worker_po_box() const;
  void set_worker_po_box(const ::std::string& value);
  #if LANG_CXX11
  void set_worker_po_box(::std::string&& value);
  #endif
  void set_worker_po_box(const char* value);
  void set_worker_po_box(const char* value, size_t size);
  ::std::string* mutable_worker_po_box();
  ::std::string* release_worker_po_box();
  void set_allocated_worker_po_box(::std::string* worker_po_box);

  // string worker_postal_code = 6;
  void clear_worker_postal_code();
  static const int kWorkerPostalCodeFieldNumber = 6;
  const ::std::string& worker_postal_code() const;
  void set_worker_postal_code(const ::std::string& value);
  #if LANG_CXX11
  void set_worker_postal_code(::std::string&& value);
  #endif
  void set_worker_postal_code(const char* value);
  void set_worker_postal_code(const char* value, size_t size);
  ::std::string* mutable_worker_postal_code();
  ::std::string* release_worker_postal_code();
  void set_allocated_worker_postal_code(::std::string* worker_postal_code);

  // string worker_city = 7;
  void clear_worker_city();
  static const int kWorkerCityFieldNumber = 7;
  const ::std::string& worker_city() const;
  void set_worker_city(const ::std::string& value);
  #if LANG_CXX11
  void set_worker_city(::std::string&& value);
  #endif
  void set_worker_city(const char* value);
  void set_worker_city(const char* value, size_t size);
  ::std::string* mutable_worker_city();
  ::std::string* release_worker_city();
  void set_allocated_worker_city(::std::string* worker_city);

  // string worker_state = 8;
  void clear_worker_state();
  static const int kWorkerStateFieldNumber = 8;
  const ::std::string& worker_state() const;
  void set_worker_state(const ::std::string& value);
  #if LANG_CXX11
  void set_worker_state(::std::string&& value);
  #endif
  void set_worker_state(const char* value);
  void set_worker_state(const char* value, size_t size);
  ::std::string* mutable_worker_state();
  ::std::string* release_worker_state();
  void set_allocated_worker_state(::std::string* worker_state);

  // string worker_country = 9;
  void clear_worker_country();
  static const int kWorkerCountryFieldNumber = 9;
  const ::std::string& worker_country() const;
  void set_worker_country(const ::std::string& value);
  #if LANG_CXX11
  void set_worker_country(::std::string&& value);
  #endif
  void set_worker_country(const char* value);
  void set_worker_country(const char* value, size_t size);
  ::std::string* mutable_worker_country();
  ::std::string* release_worker_country();
  void set_allocated_worker_country(::std::string* worker_country);

  // string worker_phone = 10;
  void clear_worker_phone();
  static const int kWorkerPhoneFieldNumber = 10;
  const ::std::string& worker_phone() const;
  void set_worker_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_worker_phone(::std::string&& value);
  #endif
  void set_worker_phone(const char* value);
  void set_worker_phone(const char* value, size_t size);
  ::std::string* mutable_worker_phone();
  ::std::string* release_worker_phone();
  void set_allocated_worker_phone(::std::string* worker_phone);

  // string worker_mobile = 11;
  void clear_worker_mobile();
  static const int kWorkerMobileFieldNumber = 11;
  const ::std::string& worker_mobile() const;
  void set_worker_mobile(const ::std::string& value);
  #if LANG_CXX11
  void set_worker_mobile(::std::string&& value);
  #endif
  void set_worker_mobile(const char* value);
  void set_worker_mobile(const char* value, size_t size);
  ::std::string* mutable_worker_mobile();
  ::std::string* release_worker_mobile();
  void set_allocated_worker_mobile(::std::string* worker_mobile);

  // string worker_license_number = 12;
  void clear_worker_license_number();
  static const int kWorkerLicenseNumberFieldNumber = 12;
  const ::std::string& worker_license_number() const;
  void set_worker_license_number(const ::std::string& value);
  #if LANG_CXX11
  void set_worker_license_number(::std::string&& value);
  #endif
  void set_worker_license_number(const char* value);
  void set_worker_license_number(const char* value, size_t size);
  ::std::string* mutable_worker_license_number();
  ::std::string* release_worker_license_number();
  void set_allocated_worker_license_number(::std::string* worker_license_number);

  // string worker_email = 13;
  void clear_worker_email();
  static const int kWorkerEmailFieldNumber = 13;
  const ::std::string& worker_email() const;
  void set_worker_email(const ::std::string& value);
  #if LANG_CXX11
  void set_worker_email(::std::string&& value);
  #endif
  void set_worker_email(const char* value);
  void set_worker_email(const char* value, size_t size);
  ::std::string* mutable_worker_email();
  ::std::string* release_worker_email();
  void set_allocated_worker_email(::std::string* worker_email);

  // .efdi.UID worker_id = 1;
  bool has_worker_id() const;
  void clear_worker_id();
  static const int kWorkerIdFieldNumber = 1;
  const ::efdi::UID& worker_id() const;
  ::efdi::UID* release_worker_id();
  ::efdi::UID* mutable_worker_id();
  void set_allocated_worker_id(::efdi::UID* worker_id);

  // @@protoc_insertion_point(class_scope:efdi.Worker)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::internal::ArenaStringPtr worker_last_name_;
  ::google::protobuf::internal::ArenaStringPtr worker_first_name_;
  ::google::protobuf::internal::ArenaStringPtr worker_street_;
  ::google::protobuf::internal::ArenaStringPtr worker_po_box_;
  ::google::protobuf::internal::ArenaStringPtr worker_postal_code_;
  ::google::protobuf::internal::ArenaStringPtr worker_city_;
  ::google::protobuf::internal::ArenaStringPtr worker_state_;
  ::google::protobuf::internal::ArenaStringPtr worker_country_;
  ::google::protobuf::internal::ArenaStringPtr worker_phone_;
  ::google::protobuf::internal::ArenaStringPtr worker_mobile_;
  ::google::protobuf::internal::ArenaStringPtr worker_license_number_;
  ::google::protobuf::internal::ArenaStringPtr worker_email_;
  ::efdi::UID* worker_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsWorkerImpl();
};
// -------------------------------------------------------------------

class WorkerAllocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.WorkerAllocation) */ {
 public:
  WorkerAllocation();
  virtual ~WorkerAllocation();

  WorkerAllocation(const WorkerAllocation& from);

  inline WorkerAllocation& operator=(const WorkerAllocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkerAllocation(WorkerAllocation&& from) noexcept
    : WorkerAllocation() {
    *this = ::std::move(from);
  }

  inline WorkerAllocation& operator=(WorkerAllocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerAllocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkerAllocation* internal_default_instance() {
    return reinterpret_cast<const WorkerAllocation*>(
               &_WorkerAllocation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    56;

  void Swap(WorkerAllocation* other);
  friend void swap(WorkerAllocation& a, WorkerAllocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkerAllocation* New() const PROTOBUF_FINAL { return New(NULL); }

  WorkerAllocation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WorkerAllocation& from);
  void MergeFrom(const WorkerAllocation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WorkerAllocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // .efdi.UID worker_id_ref = 1;
  bool has_worker_id_ref() const;
  void clear_worker_id_ref();
  static const int kWorkerIdRefFieldNumber = 1;
  const ::efdi::UID& worker_id_ref() const;
  ::efdi::UID* release_worker_id_ref();
  ::efdi::UID* mutable_worker_id_ref();
  void set_allocated_worker_id_ref(::efdi::UID* worker_id_ref);

  // .efdi.AllocationStamp allocation_stamp = 2;
  bool has_allocation_stamp() const;
  void clear_allocation_stamp();
  static const int kAllocationStampFieldNumber = 2;
  const ::efdi::AllocationStamp& allocation_stamp() const;
  ::efdi::AllocationStamp* release_allocation_stamp();
  ::efdi::AllocationStamp* mutable_allocation_stamp();
  void set_allocated_allocation_stamp(::efdi::AllocationStamp* allocation_stamp);

  // @@protoc_insertion_point(class_scope:efdi.WorkerAllocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::efdi::UID* worker_id_ref_;
  ::efdi::AllocationStamp* allocation_stamp_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsWorkerAllocationImpl();
};
// -------------------------------------------------------------------

class ExternalFileReference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:efdi.ExternalFileReference) */ {
 public:
  ExternalFileReference();
  virtual ~ExternalFileReference();

  ExternalFileReference(const ExternalFileReference& from);

  inline ExternalFileReference& operator=(const ExternalFileReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExternalFileReference(ExternalFileReference&& from) noexcept
    : ExternalFileReference() {
    *this = ::std::move(from);
  }

  inline ExternalFileReference& operator=(ExternalFileReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExternalFileReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExternalFileReference* internal_default_instance() {
    return reinterpret_cast<const ExternalFileReference*>(
               &_ExternalFileReference_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    57;

  void Swap(ExternalFileReference* other);
  friend void swap(ExternalFileReference& a, ExternalFileReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExternalFileReference* New() const PROTOBUF_FINAL { return New(NULL); }

  ExternalFileReference* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExternalFileReference& from);
  void MergeFrom(const ExternalFileReference& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExternalFileReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ExternalFileReference_FileType FileType;
  static const FileType B_NOTSET =
    ExternalFileReference_FileType_B_NOTSET;
  static const FileType B_XML =
    ExternalFileReference_FileType_B_XML;
  static inline bool FileType_IsValid(int value) {
    return ExternalFileReference_FileType_IsValid(value);
  }
  static const FileType FileType_MIN =
    ExternalFileReference_FileType_FileType_MIN;
  static const FileType FileType_MAX =
    ExternalFileReference_FileType_FileType_MAX;
  static const int FileType_ARRAYSIZE =
    ExternalFileReference_FileType_FileType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FileType_descriptor() {
    return ExternalFileReference_FileType_descriptor();
  }
  static inline const ::std::string& FileType_Name(FileType value) {
    return ExternalFileReference_FileType_Name(value);
  }
  static inline bool FileType_Parse(const ::std::string& name,
      FileType* value) {
    return ExternalFileReference_FileType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 2048;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2048;
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::Any* add_extension();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // .efdi.UID filename = 1;
  bool has_filename() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 1;
  const ::efdi::UID& filename() const;
  ::efdi::UID* release_filename();
  ::efdi::UID* mutable_filename();
  void set_allocated_filename(::efdi::UID* filename);

  // .efdi.ExternalFileReference.FileType file_type = 2;
  void clear_file_type();
  static const int kFileTypeFieldNumber = 2;
  ::efdi::ExternalFileReference_FileType file_type() const;
  void set_file_type(::efdi::ExternalFileReference_FileType value);

  // @@protoc_insertion_point(class_scope:efdi.ExternalFileReference)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::efdi::UID* filename_;
  int file_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::TableStruct;
  friend void ::protobuf_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto::InitDefaultsExternalFileReferenceImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UID

// .efdi.UIDHead head = 1;
inline void UID::clear_head() {
  head_ = 0;
}
inline ::efdi::UIDHead UID::head() const {
  // @@protoc_insertion_point(field_get:efdi.UID.head)
  return static_cast< ::efdi::UIDHead >(head_);
}
inline void UID::set_head(::efdi::UIDHead value) {
  
  head_ = value;
  // @@protoc_insertion_point(field_set:efdi.UID.head)
}

// sint64 number = 2;
inline void UID::clear_number() {
  number_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 UID::number() const {
  // @@protoc_insertion_point(field_get:efdi.UID.number)
  return number_;
}
inline void UID::set_number(::google::protobuf::int64 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:efdi.UID.number)
}

// -------------------------------------------------------------------

// AllocationStamp

// .google.protobuf.Timestamp start = 1;
inline bool AllocationStamp::has_start() const {
  return this != internal_default_instance() && start_ != NULL;
}
inline const ::google::protobuf::Timestamp& AllocationStamp::start() const {
  const ::google::protobuf::Timestamp* p = start_;
  // @@protoc_insertion_point(field_get:efdi.AllocationStamp.start)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* AllocationStamp::release_start() {
  // @@protoc_insertion_point(field_release:efdi.AllocationStamp.start)
  
  ::google::protobuf::Timestamp* temp = start_;
  start_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* AllocationStamp::mutable_start() {
  
  if (start_ == NULL) {
    start_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:efdi.AllocationStamp.start)
  return start_;
}
inline void AllocationStamp::set_allocated_start(::google::protobuf::Timestamp* start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_);
  }
  if (start) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(start)->GetArena();
    if (message_arena != submessage_arena) {
      start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:efdi.AllocationStamp.start)
}

// .google.protobuf.Timestamp stop = 2;
inline bool AllocationStamp::has_stop() const {
  return this != internal_default_instance() && stop_ != NULL;
}
inline const ::google::protobuf::Timestamp& AllocationStamp::stop() const {
  const ::google::protobuf::Timestamp* p = stop_;
  // @@protoc_insertion_point(field_get:efdi.AllocationStamp.stop)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* AllocationStamp::release_stop() {
  // @@protoc_insertion_point(field_release:efdi.AllocationStamp.stop)
  
  ::google::protobuf::Timestamp* temp = stop_;
  stop_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* AllocationStamp::mutable_stop() {
  
  if (stop_ == NULL) {
    stop_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:efdi.AllocationStamp.stop)
  return stop_;
}
inline void AllocationStamp::set_allocated_stop(::google::protobuf::Timestamp* stop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(stop_);
  }
  if (stop) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(stop)->GetArena();
    if (message_arena != submessage_arena) {
      stop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stop, submessage_arena);
    }
    
  } else {
    
  }
  stop_ = stop;
  // @@protoc_insertion_point(field_set_allocated:efdi.AllocationStamp.stop)
}

// uint64 duration = 3;
inline void AllocationStamp::clear_duration() {
  duration_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AllocationStamp::duration() const {
  // @@protoc_insertion_point(field_get:efdi.AllocationStamp.duration)
  return duration_;
}
inline void AllocationStamp::set_duration(::google::protobuf::uint64 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:efdi.AllocationStamp.duration)
}

// .efdi.AllocationStamp.AllocationStampType type = 4;
inline void AllocationStamp::clear_type() {
  type_ = 0;
}
inline ::efdi::AllocationStamp_AllocationStampType AllocationStamp::type() const {
  // @@protoc_insertion_point(field_get:efdi.AllocationStamp.type)
  return static_cast< ::efdi::AllocationStamp_AllocationStampType >(type_);
}
inline void AllocationStamp::set_type(::efdi::AllocationStamp_AllocationStampType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:efdi.AllocationStamp.type)
}

// repeated .efdi.Position position = 5;
inline int AllocationStamp::position_size() const {
  return position_.size();
}
inline void AllocationStamp::clear_position() {
  position_.Clear();
}
inline const ::efdi::Position& AllocationStamp::position(int index) const {
  // @@protoc_insertion_point(field_get:efdi.AllocationStamp.position)
  return position_.Get(index);
}
inline ::efdi::Position* AllocationStamp::mutable_position(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.AllocationStamp.position)
  return position_.Mutable(index);
}
inline ::efdi::Position* AllocationStamp::add_position() {
  // @@protoc_insertion_point(field_add:efdi.AllocationStamp.position)
  return position_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::Position >*
AllocationStamp::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:efdi.AllocationStamp.position)
  return &position_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::Position >&
AllocationStamp::position() const {
  // @@protoc_insertion_point(field_list:efdi.AllocationStamp.position)
  return position_;
}

// repeated .google.protobuf.Any extension = 2048;
inline int AllocationStamp::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& AllocationStamp::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.AllocationStamp.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* AllocationStamp::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.AllocationStamp.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* AllocationStamp::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.AllocationStamp.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
AllocationStamp::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.AllocationStamp.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
AllocationStamp::extension() const {
  // @@protoc_insertion_point(field_list:efdi.AllocationStamp.extension)
  return extension_;
}

// -------------------------------------------------------------------

// AttachedFile

// .efdi.UID filename_with_extension = 1;
inline bool AttachedFile::has_filename_with_extension() const {
  return this != internal_default_instance() && filename_with_extension_ != NULL;
}
inline void AttachedFile::clear_filename_with_extension() {
  if (GetArenaNoVirtual() == NULL && filename_with_extension_ != NULL) {
    delete filename_with_extension_;
  }
  filename_with_extension_ = NULL;
}
inline const ::efdi::UID& AttachedFile::filename_with_extension() const {
  const ::efdi::UID* p = filename_with_extension_;
  // @@protoc_insertion_point(field_get:efdi.AttachedFile.filename_with_extension)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* AttachedFile::release_filename_with_extension() {
  // @@protoc_insertion_point(field_release:efdi.AttachedFile.filename_with_extension)
  
  ::efdi::UID* temp = filename_with_extension_;
  filename_with_extension_ = NULL;
  return temp;
}
inline ::efdi::UID* AttachedFile::mutable_filename_with_extension() {
  
  if (filename_with_extension_ == NULL) {
    filename_with_extension_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.AttachedFile.filename_with_extension)
  return filename_with_extension_;
}
inline void AttachedFile::set_allocated_filename_with_extension(::efdi::UID* filename_with_extension) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete filename_with_extension_;
  }
  if (filename_with_extension) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      filename_with_extension = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, filename_with_extension, submessage_arena);
    }
    
  } else {
    
  }
  filename_with_extension_ = filename_with_extension;
  // @@protoc_insertion_point(field_set_allocated:efdi.AttachedFile.filename_with_extension)
}

// .efdi.AttachedFile.Preserve preserve = 2;
inline void AttachedFile::clear_preserve() {
  preserve_ = 0;
}
inline ::efdi::AttachedFile_Preserve AttachedFile::preserve() const {
  // @@protoc_insertion_point(field_get:efdi.AttachedFile.preserve)
  return static_cast< ::efdi::AttachedFile_Preserve >(preserve_);
}
inline void AttachedFile::set_preserve(::efdi::AttachedFile_Preserve value) {
  
  preserve_ = value;
  // @@protoc_insertion_point(field_set:efdi.AttachedFile.preserve)
}

// string manufacturer_gln = 3;
inline void AttachedFile::clear_manufacturer_gln() {
  manufacturer_gln_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttachedFile::manufacturer_gln() const {
  // @@protoc_insertion_point(field_get:efdi.AttachedFile.manufacturer_gln)
  return manufacturer_gln_.GetNoArena();
}
inline void AttachedFile::set_manufacturer_gln(const ::std::string& value) {
  
  manufacturer_gln_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.AttachedFile.manufacturer_gln)
}
#if LANG_CXX11
inline void AttachedFile::set_manufacturer_gln(::std::string&& value) {
  
  manufacturer_gln_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.AttachedFile.manufacturer_gln)
}
#endif
inline void AttachedFile::set_manufacturer_gln(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  manufacturer_gln_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.AttachedFile.manufacturer_gln)
}
inline void AttachedFile::set_manufacturer_gln(const char* value, size_t size) {
  
  manufacturer_gln_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.AttachedFile.manufacturer_gln)
}
inline ::std::string* AttachedFile::mutable_manufacturer_gln() {
  
  // @@protoc_insertion_point(field_mutable:efdi.AttachedFile.manufacturer_gln)
  return manufacturer_gln_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttachedFile::release_manufacturer_gln() {
  // @@protoc_insertion_point(field_release:efdi.AttachedFile.manufacturer_gln)
  
  return manufacturer_gln_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachedFile::set_allocated_manufacturer_gln(::std::string* manufacturer_gln) {
  if (manufacturer_gln != NULL) {
    
  } else {
    
  }
  manufacturer_gln_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturer_gln);
  // @@protoc_insertion_point(field_set_allocated:efdi.AttachedFile.manufacturer_gln)
}

// uint32 file_type = 4;
inline void AttachedFile::clear_file_type() {
  file_type_ = 0u;
}
inline ::google::protobuf::uint32 AttachedFile::file_type() const {
  // @@protoc_insertion_point(field_get:efdi.AttachedFile.file_type)
  return file_type_;
}
inline void AttachedFile::set_file_type(::google::protobuf::uint32 value) {
  
  file_type_ = value;
  // @@protoc_insertion_point(field_set:efdi.AttachedFile.file_type)
}

// string file_version = 5;
inline void AttachedFile::clear_file_version() {
  file_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttachedFile::file_version() const {
  // @@protoc_insertion_point(field_get:efdi.AttachedFile.file_version)
  return file_version_.GetNoArena();
}
inline void AttachedFile::set_file_version(const ::std::string& value) {
  
  file_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.AttachedFile.file_version)
}
#if LANG_CXX11
inline void AttachedFile::set_file_version(::std::string&& value) {
  
  file_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.AttachedFile.file_version)
}
#endif
inline void AttachedFile::set_file_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.AttachedFile.file_version)
}
inline void AttachedFile::set_file_version(const char* value, size_t size) {
  
  file_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.AttachedFile.file_version)
}
inline ::std::string* AttachedFile::mutable_file_version() {
  
  // @@protoc_insertion_point(field_mutable:efdi.AttachedFile.file_version)
  return file_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttachedFile::release_file_version() {
  // @@protoc_insertion_point(field_release:efdi.AttachedFile.file_version)
  
  return file_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachedFile::set_allocated_file_version(::std::string* file_version) {
  if (file_version != NULL) {
    
  } else {
    
  }
  file_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_version);
  // @@protoc_insertion_point(field_set_allocated:efdi.AttachedFile.file_version)
}

// uint64 file_length = 6;
inline void AttachedFile::clear_file_length() {
  file_length_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AttachedFile::file_length() const {
  // @@protoc_insertion_point(field_get:efdi.AttachedFile.file_length)
  return file_length_;
}
inline void AttachedFile::set_file_length(::google::protobuf::uint64 value) {
  
  file_length_ = value;
  // @@protoc_insertion_point(field_set:efdi.AttachedFile.file_length)
}

// repeated .google.protobuf.Any extension = 2048;
inline int AttachedFile::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& AttachedFile::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.AttachedFile.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* AttachedFile::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.AttachedFile.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* AttachedFile::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.AttachedFile.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
AttachedFile::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.AttachedFile.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
AttachedFile::extension() const {
  // @@protoc_insertion_point(field_list:efdi.AttachedFile.extension)
  return extension_;
}

// -------------------------------------------------------------------

// BaseStation

// .efdi.UID base_station_id = 1;
inline bool BaseStation::has_base_station_id() const {
  return this != internal_default_instance() && base_station_id_ != NULL;
}
inline void BaseStation::clear_base_station_id() {
  if (GetArenaNoVirtual() == NULL && base_station_id_ != NULL) {
    delete base_station_id_;
  }
  base_station_id_ = NULL;
}
inline const ::efdi::UID& BaseStation::base_station_id() const {
  const ::efdi::UID* p = base_station_id_;
  // @@protoc_insertion_point(field_get:efdi.BaseStation.base_station_id)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* BaseStation::release_base_station_id() {
  // @@protoc_insertion_point(field_release:efdi.BaseStation.base_station_id)
  
  ::efdi::UID* temp = base_station_id_;
  base_station_id_ = NULL;
  return temp;
}
inline ::efdi::UID* BaseStation::mutable_base_station_id() {
  
  if (base_station_id_ == NULL) {
    base_station_id_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.BaseStation.base_station_id)
  return base_station_id_;
}
inline void BaseStation::set_allocated_base_station_id(::efdi::UID* base_station_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete base_station_id_;
  }
  if (base_station_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base_station_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base_station_id, submessage_arena);
    }
    
  } else {
    
  }
  base_station_id_ = base_station_id;
  // @@protoc_insertion_point(field_set_allocated:efdi.BaseStation.base_station_id)
}

// string base_station_designator = 2;
inline void BaseStation::clear_base_station_designator() {
  base_station_designator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BaseStation::base_station_designator() const {
  // @@protoc_insertion_point(field_get:efdi.BaseStation.base_station_designator)
  return base_station_designator_.GetNoArena();
}
inline void BaseStation::set_base_station_designator(const ::std::string& value) {
  
  base_station_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.BaseStation.base_station_designator)
}
#if LANG_CXX11
inline void BaseStation::set_base_station_designator(::std::string&& value) {
  
  base_station_designator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.BaseStation.base_station_designator)
}
#endif
inline void BaseStation::set_base_station_designator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  base_station_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.BaseStation.base_station_designator)
}
inline void BaseStation::set_base_station_designator(const char* value, size_t size) {
  
  base_station_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.BaseStation.base_station_designator)
}
inline ::std::string* BaseStation::mutable_base_station_designator() {
  
  // @@protoc_insertion_point(field_mutable:efdi.BaseStation.base_station_designator)
  return base_station_designator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BaseStation::release_base_station_designator() {
  // @@protoc_insertion_point(field_release:efdi.BaseStation.base_station_designator)
  
  return base_station_designator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseStation::set_allocated_base_station_designator(::std::string* base_station_designator) {
  if (base_station_designator != NULL) {
    
  } else {
    
  }
  base_station_designator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_station_designator);
  // @@protoc_insertion_point(field_set_allocated:efdi.BaseStation.base_station_designator)
}

// double base_station_north = 3;
inline void BaseStation::clear_base_station_north() {
  base_station_north_ = 0;
}
inline double BaseStation::base_station_north() const {
  // @@protoc_insertion_point(field_get:efdi.BaseStation.base_station_north)
  return base_station_north_;
}
inline void BaseStation::set_base_station_north(double value) {
  
  base_station_north_ = value;
  // @@protoc_insertion_point(field_set:efdi.BaseStation.base_station_north)
}

// double base_station_east = 4;
inline void BaseStation::clear_base_station_east() {
  base_station_east_ = 0;
}
inline double BaseStation::base_station_east() const {
  // @@protoc_insertion_point(field_get:efdi.BaseStation.base_station_east)
  return base_station_east_;
}
inline void BaseStation::set_base_station_east(double value) {
  
  base_station_east_ = value;
  // @@protoc_insertion_point(field_set:efdi.BaseStation.base_station_east)
}

// sint64 base_station_up = 5;
inline void BaseStation::clear_base_station_up() {
  base_station_up_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BaseStation::base_station_up() const {
  // @@protoc_insertion_point(field_get:efdi.BaseStation.base_station_up)
  return base_station_up_;
}
inline void BaseStation::set_base_station_up(::google::protobuf::int64 value) {
  
  base_station_up_ = value;
  // @@protoc_insertion_point(field_set:efdi.BaseStation.base_station_up)
}

// repeated .google.protobuf.Any extension = 2048;
inline int BaseStation::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& BaseStation::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.BaseStation.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* BaseStation::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.BaseStation.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* BaseStation::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.BaseStation.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
BaseStation::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.BaseStation.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
BaseStation::extension() const {
  // @@protoc_insertion_point(field_list:efdi.BaseStation.extension)
  return extension_;
}

// -------------------------------------------------------------------

// CodedComment

// .efdi.UID coded_comment_id = 1;
inline bool CodedComment::has_coded_comment_id() const {
  return this != internal_default_instance() && coded_comment_id_ != NULL;
}
inline void CodedComment::clear_coded_comment_id() {
  if (GetArenaNoVirtual() == NULL && coded_comment_id_ != NULL) {
    delete coded_comment_id_;
  }
  coded_comment_id_ = NULL;
}
inline const ::efdi::UID& CodedComment::coded_comment_id() const {
  const ::efdi::UID* p = coded_comment_id_;
  // @@protoc_insertion_point(field_get:efdi.CodedComment.coded_comment_id)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* CodedComment::release_coded_comment_id() {
  // @@protoc_insertion_point(field_release:efdi.CodedComment.coded_comment_id)
  
  ::efdi::UID* temp = coded_comment_id_;
  coded_comment_id_ = NULL;
  return temp;
}
inline ::efdi::UID* CodedComment::mutable_coded_comment_id() {
  
  if (coded_comment_id_ == NULL) {
    coded_comment_id_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.CodedComment.coded_comment_id)
  return coded_comment_id_;
}
inline void CodedComment::set_allocated_coded_comment_id(::efdi::UID* coded_comment_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete coded_comment_id_;
  }
  if (coded_comment_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      coded_comment_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coded_comment_id, submessage_arena);
    }
    
  } else {
    
  }
  coded_comment_id_ = coded_comment_id;
  // @@protoc_insertion_point(field_set_allocated:efdi.CodedComment.coded_comment_id)
}

// string coded_comment_designator = 2;
inline void CodedComment::clear_coded_comment_designator() {
  coded_comment_designator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CodedComment::coded_comment_designator() const {
  // @@protoc_insertion_point(field_get:efdi.CodedComment.coded_comment_designator)
  return coded_comment_designator_.GetNoArena();
}
inline void CodedComment::set_coded_comment_designator(const ::std::string& value) {
  
  coded_comment_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.CodedComment.coded_comment_designator)
}
#if LANG_CXX11
inline void CodedComment::set_coded_comment_designator(::std::string&& value) {
  
  coded_comment_designator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.CodedComment.coded_comment_designator)
}
#endif
inline void CodedComment::set_coded_comment_designator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  coded_comment_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.CodedComment.coded_comment_designator)
}
inline void CodedComment::set_coded_comment_designator(const char* value, size_t size) {
  
  coded_comment_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.CodedComment.coded_comment_designator)
}
inline ::std::string* CodedComment::mutable_coded_comment_designator() {
  
  // @@protoc_insertion_point(field_mutable:efdi.CodedComment.coded_comment_designator)
  return coded_comment_designator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CodedComment::release_coded_comment_designator() {
  // @@protoc_insertion_point(field_release:efdi.CodedComment.coded_comment_designator)
  
  return coded_comment_designator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CodedComment::set_allocated_coded_comment_designator(::std::string* coded_comment_designator) {
  if (coded_comment_designator != NULL) {
    
  } else {
    
  }
  coded_comment_designator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), coded_comment_designator);
  // @@protoc_insertion_point(field_set_allocated:efdi.CodedComment.coded_comment_designator)
}

// .efdi.CodedComment.CodedCommentScope coded_comment_scope = 3;
inline void CodedComment::clear_coded_comment_scope() {
  coded_comment_scope_ = 0;
}
inline ::efdi::CodedComment_CodedCommentScope CodedComment::coded_comment_scope() const {
  // @@protoc_insertion_point(field_get:efdi.CodedComment.coded_comment_scope)
  return static_cast< ::efdi::CodedComment_CodedCommentScope >(coded_comment_scope_);
}
inline void CodedComment::set_coded_comment_scope(::efdi::CodedComment_CodedCommentScope value) {
  
  coded_comment_scope_ = value;
  // @@protoc_insertion_point(field_set:efdi.CodedComment.coded_comment_scope)
}

// .efdi.UID coded_comment_group_id_ref = 4;
inline bool CodedComment::has_coded_comment_group_id_ref() const {
  return this != internal_default_instance() && coded_comment_group_id_ref_ != NULL;
}
inline void CodedComment::clear_coded_comment_group_id_ref() {
  if (GetArenaNoVirtual() == NULL && coded_comment_group_id_ref_ != NULL) {
    delete coded_comment_group_id_ref_;
  }
  coded_comment_group_id_ref_ = NULL;
}
inline const ::efdi::UID& CodedComment::coded_comment_group_id_ref() const {
  const ::efdi::UID* p = coded_comment_group_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.CodedComment.coded_comment_group_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* CodedComment::release_coded_comment_group_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.CodedComment.coded_comment_group_id_ref)
  
  ::efdi::UID* temp = coded_comment_group_id_ref_;
  coded_comment_group_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* CodedComment::mutable_coded_comment_group_id_ref() {
  
  if (coded_comment_group_id_ref_ == NULL) {
    coded_comment_group_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.CodedComment.coded_comment_group_id_ref)
  return coded_comment_group_id_ref_;
}
inline void CodedComment::set_allocated_coded_comment_group_id_ref(::efdi::UID* coded_comment_group_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete coded_comment_group_id_ref_;
  }
  if (coded_comment_group_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      coded_comment_group_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coded_comment_group_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  coded_comment_group_id_ref_ = coded_comment_group_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.CodedComment.coded_comment_group_id_ref)
}

// repeated .efdi.CodedCommentListValue coded_comment_list_value = 5;
inline int CodedComment::coded_comment_list_value_size() const {
  return coded_comment_list_value_.size();
}
inline void CodedComment::clear_coded_comment_list_value() {
  coded_comment_list_value_.Clear();
}
inline const ::efdi::CodedCommentListValue& CodedComment::coded_comment_list_value(int index) const {
  // @@protoc_insertion_point(field_get:efdi.CodedComment.coded_comment_list_value)
  return coded_comment_list_value_.Get(index);
}
inline ::efdi::CodedCommentListValue* CodedComment::mutable_coded_comment_list_value(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.CodedComment.coded_comment_list_value)
  return coded_comment_list_value_.Mutable(index);
}
inline ::efdi::CodedCommentListValue* CodedComment::add_coded_comment_list_value() {
  // @@protoc_insertion_point(field_add:efdi.CodedComment.coded_comment_list_value)
  return coded_comment_list_value_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::CodedCommentListValue >*
CodedComment::mutable_coded_comment_list_value() {
  // @@protoc_insertion_point(field_mutable_list:efdi.CodedComment.coded_comment_list_value)
  return &coded_comment_list_value_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::CodedCommentListValue >&
CodedComment::coded_comment_list_value() const {
  // @@protoc_insertion_point(field_list:efdi.CodedComment.coded_comment_list_value)
  return coded_comment_list_value_;
}

// repeated .google.protobuf.Any extension = 2048;
inline int CodedComment::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& CodedComment::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.CodedComment.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* CodedComment::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.CodedComment.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* CodedComment::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.CodedComment.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
CodedComment::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.CodedComment.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
CodedComment::extension() const {
  // @@protoc_insertion_point(field_list:efdi.CodedComment.extension)
  return extension_;
}

// -------------------------------------------------------------------

// CodedCommentGroup

// .efdi.UID coded_comment_group_id = 1;
inline bool CodedCommentGroup::has_coded_comment_group_id() const {
  return this != internal_default_instance() && coded_comment_group_id_ != NULL;
}
inline void CodedCommentGroup::clear_coded_comment_group_id() {
  if (GetArenaNoVirtual() == NULL && coded_comment_group_id_ != NULL) {
    delete coded_comment_group_id_;
  }
  coded_comment_group_id_ = NULL;
}
inline const ::efdi::UID& CodedCommentGroup::coded_comment_group_id() const {
  const ::efdi::UID* p = coded_comment_group_id_;
  // @@protoc_insertion_point(field_get:efdi.CodedCommentGroup.coded_comment_group_id)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* CodedCommentGroup::release_coded_comment_group_id() {
  // @@protoc_insertion_point(field_release:efdi.CodedCommentGroup.coded_comment_group_id)
  
  ::efdi::UID* temp = coded_comment_group_id_;
  coded_comment_group_id_ = NULL;
  return temp;
}
inline ::efdi::UID* CodedCommentGroup::mutable_coded_comment_group_id() {
  
  if (coded_comment_group_id_ == NULL) {
    coded_comment_group_id_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.CodedCommentGroup.coded_comment_group_id)
  return coded_comment_group_id_;
}
inline void CodedCommentGroup::set_allocated_coded_comment_group_id(::efdi::UID* coded_comment_group_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete coded_comment_group_id_;
  }
  if (coded_comment_group_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      coded_comment_group_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coded_comment_group_id, submessage_arena);
    }
    
  } else {
    
  }
  coded_comment_group_id_ = coded_comment_group_id;
  // @@protoc_insertion_point(field_set_allocated:efdi.CodedCommentGroup.coded_comment_group_id)
}

// string coded_comment_group_designator = 2;
inline void CodedCommentGroup::clear_coded_comment_group_designator() {
  coded_comment_group_designator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CodedCommentGroup::coded_comment_group_designator() const {
  // @@protoc_insertion_point(field_get:efdi.CodedCommentGroup.coded_comment_group_designator)
  return coded_comment_group_designator_.GetNoArena();
}
inline void CodedCommentGroup::set_coded_comment_group_designator(const ::std::string& value) {
  
  coded_comment_group_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.CodedCommentGroup.coded_comment_group_designator)
}
#if LANG_CXX11
inline void CodedCommentGroup::set_coded_comment_group_designator(::std::string&& value) {
  
  coded_comment_group_designator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.CodedCommentGroup.coded_comment_group_designator)
}
#endif
inline void CodedCommentGroup::set_coded_comment_group_designator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  coded_comment_group_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.CodedCommentGroup.coded_comment_group_designator)
}
inline void CodedCommentGroup::set_coded_comment_group_designator(const char* value, size_t size) {
  
  coded_comment_group_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.CodedCommentGroup.coded_comment_group_designator)
}
inline ::std::string* CodedCommentGroup::mutable_coded_comment_group_designator() {
  
  // @@protoc_insertion_point(field_mutable:efdi.CodedCommentGroup.coded_comment_group_designator)
  return coded_comment_group_designator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CodedCommentGroup::release_coded_comment_group_designator() {
  // @@protoc_insertion_point(field_release:efdi.CodedCommentGroup.coded_comment_group_designator)
  
  return coded_comment_group_designator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CodedCommentGroup::set_allocated_coded_comment_group_designator(::std::string* coded_comment_group_designator) {
  if (coded_comment_group_designator != NULL) {
    
  } else {
    
  }
  coded_comment_group_designator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), coded_comment_group_designator);
  // @@protoc_insertion_point(field_set_allocated:efdi.CodedCommentGroup.coded_comment_group_designator)
}

// repeated .google.protobuf.Any extension = 2048;
inline int CodedCommentGroup::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& CodedCommentGroup::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.CodedCommentGroup.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* CodedCommentGroup::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.CodedCommentGroup.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* CodedCommentGroup::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.CodedCommentGroup.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
CodedCommentGroup::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.CodedCommentGroup.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
CodedCommentGroup::extension() const {
  // @@protoc_insertion_point(field_list:efdi.CodedCommentGroup.extension)
  return extension_;
}

// -------------------------------------------------------------------

// CodedCommentListValue

// .efdi.UID coded_comment_list_value_id = 1;
inline bool CodedCommentListValue::has_coded_comment_list_value_id() const {
  return this != internal_default_instance() && coded_comment_list_value_id_ != NULL;
}
inline void CodedCommentListValue::clear_coded_comment_list_value_id() {
  if (GetArenaNoVirtual() == NULL && coded_comment_list_value_id_ != NULL) {
    delete coded_comment_list_value_id_;
  }
  coded_comment_list_value_id_ = NULL;
}
inline const ::efdi::UID& CodedCommentListValue::coded_comment_list_value_id() const {
  const ::efdi::UID* p = coded_comment_list_value_id_;
  // @@protoc_insertion_point(field_get:efdi.CodedCommentListValue.coded_comment_list_value_id)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* CodedCommentListValue::release_coded_comment_list_value_id() {
  // @@protoc_insertion_point(field_release:efdi.CodedCommentListValue.coded_comment_list_value_id)
  
  ::efdi::UID* temp = coded_comment_list_value_id_;
  coded_comment_list_value_id_ = NULL;
  return temp;
}
inline ::efdi::UID* CodedCommentListValue::mutable_coded_comment_list_value_id() {
  
  if (coded_comment_list_value_id_ == NULL) {
    coded_comment_list_value_id_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.CodedCommentListValue.coded_comment_list_value_id)
  return coded_comment_list_value_id_;
}
inline void CodedCommentListValue::set_allocated_coded_comment_list_value_id(::efdi::UID* coded_comment_list_value_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete coded_comment_list_value_id_;
  }
  if (coded_comment_list_value_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      coded_comment_list_value_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coded_comment_list_value_id, submessage_arena);
    }
    
  } else {
    
  }
  coded_comment_list_value_id_ = coded_comment_list_value_id;
  // @@protoc_insertion_point(field_set_allocated:efdi.CodedCommentListValue.coded_comment_list_value_id)
}

// string coded_comment_list_value_designator = 2;
inline void CodedCommentListValue::clear_coded_comment_list_value_designator() {
  coded_comment_list_value_designator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CodedCommentListValue::coded_comment_list_value_designator() const {
  // @@protoc_insertion_point(field_get:efdi.CodedCommentListValue.coded_comment_list_value_designator)
  return coded_comment_list_value_designator_.GetNoArena();
}
inline void CodedCommentListValue::set_coded_comment_list_value_designator(const ::std::string& value) {
  
  coded_comment_list_value_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.CodedCommentListValue.coded_comment_list_value_designator)
}
#if LANG_CXX11
inline void CodedCommentListValue::set_coded_comment_list_value_designator(::std::string&& value) {
  
  coded_comment_list_value_designator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.CodedCommentListValue.coded_comment_list_value_designator)
}
#endif
inline void CodedCommentListValue::set_coded_comment_list_value_designator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  coded_comment_list_value_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.CodedCommentListValue.coded_comment_list_value_designator)
}
inline void CodedCommentListValue::set_coded_comment_list_value_designator(const char* value, size_t size) {
  
  coded_comment_list_value_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.CodedCommentListValue.coded_comment_list_value_designator)
}
inline ::std::string* CodedCommentListValue::mutable_coded_comment_list_value_designator() {
  
  // @@protoc_insertion_point(field_mutable:efdi.CodedCommentListValue.coded_comment_list_value_designator)
  return coded_comment_list_value_designator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CodedCommentListValue::release_coded_comment_list_value_designator() {
  // @@protoc_insertion_point(field_release:efdi.CodedCommentListValue.coded_comment_list_value_designator)
  
  return coded_comment_list_value_designator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CodedCommentListValue::set_allocated_coded_comment_list_value_designator(::std::string* coded_comment_list_value_designator) {
  if (coded_comment_list_value_designator != NULL) {
    
  } else {
    
  }
  coded_comment_list_value_designator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), coded_comment_list_value_designator);
  // @@protoc_insertion_point(field_set_allocated:efdi.CodedCommentListValue.coded_comment_list_value_designator)
}

// repeated .google.protobuf.Any extension = 2048;
inline int CodedCommentListValue::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& CodedCommentListValue::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.CodedCommentListValue.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* CodedCommentListValue::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.CodedCommentListValue.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* CodedCommentListValue::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.CodedCommentListValue.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
CodedCommentListValue::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.CodedCommentListValue.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
CodedCommentListValue::extension() const {
  // @@protoc_insertion_point(field_list:efdi.CodedCommentListValue.extension)
  return extension_;
}

// -------------------------------------------------------------------

// ColourLegend

// .efdi.UID colour_legend_id = 1;
inline bool ColourLegend::has_colour_legend_id() const {
  return this != internal_default_instance() && colour_legend_id_ != NULL;
}
inline void ColourLegend::clear_colour_legend_id() {
  if (GetArenaNoVirtual() == NULL && colour_legend_id_ != NULL) {
    delete colour_legend_id_;
  }
  colour_legend_id_ = NULL;
}
inline const ::efdi::UID& ColourLegend::colour_legend_id() const {
  const ::efdi::UID* p = colour_legend_id_;
  // @@protoc_insertion_point(field_get:efdi.ColourLegend.colour_legend_id)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* ColourLegend::release_colour_legend_id() {
  // @@protoc_insertion_point(field_release:efdi.ColourLegend.colour_legend_id)
  
  ::efdi::UID* temp = colour_legend_id_;
  colour_legend_id_ = NULL;
  return temp;
}
inline ::efdi::UID* ColourLegend::mutable_colour_legend_id() {
  
  if (colour_legend_id_ == NULL) {
    colour_legend_id_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.ColourLegend.colour_legend_id)
  return colour_legend_id_;
}
inline void ColourLegend::set_allocated_colour_legend_id(::efdi::UID* colour_legend_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete colour_legend_id_;
  }
  if (colour_legend_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      colour_legend_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, colour_legend_id, submessage_arena);
    }
    
  } else {
    
  }
  colour_legend_id_ = colour_legend_id;
  // @@protoc_insertion_point(field_set_allocated:efdi.ColourLegend.colour_legend_id)
}

// uint32 default_colour = 2;
inline void ColourLegend::clear_default_colour() {
  default_colour_ = 0u;
}
inline ::google::protobuf::uint32 ColourLegend::default_colour() const {
  // @@protoc_insertion_point(field_get:efdi.ColourLegend.default_colour)
  return default_colour_;
}
inline void ColourLegend::set_default_colour(::google::protobuf::uint32 value) {
  
  default_colour_ = value;
  // @@protoc_insertion_point(field_set:efdi.ColourLegend.default_colour)
}

// repeated .efdi.ColourRange colour_range = 3;
inline int ColourLegend::colour_range_size() const {
  return colour_range_.size();
}
inline void ColourLegend::clear_colour_range() {
  colour_range_.Clear();
}
inline const ::efdi::ColourRange& ColourLegend::colour_range(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ColourLegend.colour_range)
  return colour_range_.Get(index);
}
inline ::efdi::ColourRange* ColourLegend::mutable_colour_range(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ColourLegend.colour_range)
  return colour_range_.Mutable(index);
}
inline ::efdi::ColourRange* ColourLegend::add_colour_range() {
  // @@protoc_insertion_point(field_add:efdi.ColourLegend.colour_range)
  return colour_range_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::ColourRange >*
ColourLegend::mutable_colour_range() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ColourLegend.colour_range)
  return &colour_range_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::ColourRange >&
ColourLegend::colour_range() const {
  // @@protoc_insertion_point(field_list:efdi.ColourLegend.colour_range)
  return colour_range_;
}

// repeated .google.protobuf.Any extension = 2048;
inline int ColourLegend::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& ColourLegend::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ColourLegend.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* ColourLegend::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ColourLegend.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* ColourLegend::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.ColourLegend.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
ColourLegend::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ColourLegend.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
ColourLegend::extension() const {
  // @@protoc_insertion_point(field_list:efdi.ColourLegend.extension)
  return extension_;
}

// -------------------------------------------------------------------

// ColourRange

// sint64 minimum_value = 1;
inline void ColourRange::clear_minimum_value() {
  minimum_value_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ColourRange::minimum_value() const {
  // @@protoc_insertion_point(field_get:efdi.ColourRange.minimum_value)
  return minimum_value_;
}
inline void ColourRange::set_minimum_value(::google::protobuf::int64 value) {
  
  minimum_value_ = value;
  // @@protoc_insertion_point(field_set:efdi.ColourRange.minimum_value)
}

// sint64 maximum_value = 2;
inline void ColourRange::clear_maximum_value() {
  maximum_value_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ColourRange::maximum_value() const {
  // @@protoc_insertion_point(field_get:efdi.ColourRange.maximum_value)
  return maximum_value_;
}
inline void ColourRange::set_maximum_value(::google::protobuf::int64 value) {
  
  maximum_value_ = value;
  // @@protoc_insertion_point(field_set:efdi.ColourRange.maximum_value)
}

// uint32 colour = 3;
inline void ColourRange::clear_colour() {
  colour_ = 0u;
}
inline ::google::protobuf::uint32 ColourRange::colour() const {
  // @@protoc_insertion_point(field_get:efdi.ColourRange.colour)
  return colour_;
}
inline void ColourRange::set_colour(::google::protobuf::uint32 value) {
  
  colour_ = value;
  // @@protoc_insertion_point(field_set:efdi.ColourRange.colour)
}

// repeated .google.protobuf.Any extension = 2048;
inline int ColourRange::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& ColourRange::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ColourRange.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* ColourRange::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ColourRange.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* ColourRange::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.ColourRange.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
ColourRange::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ColourRange.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
ColourRange::extension() const {
  // @@protoc_insertion_point(field_list:efdi.ColourRange.extension)
  return extension_;
}

// -------------------------------------------------------------------

// CommentAllocation

// .efdi.UID coded_comment_id_ref = 1;
inline bool CommentAllocation::has_coded_comment_id_ref() const {
  return this != internal_default_instance() && coded_comment_id_ref_ != NULL;
}
inline void CommentAllocation::clear_coded_comment_id_ref() {
  if (GetArenaNoVirtual() == NULL && coded_comment_id_ref_ != NULL) {
    delete coded_comment_id_ref_;
  }
  coded_comment_id_ref_ = NULL;
}
inline const ::efdi::UID& CommentAllocation::coded_comment_id_ref() const {
  const ::efdi::UID* p = coded_comment_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.CommentAllocation.coded_comment_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* CommentAllocation::release_coded_comment_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.CommentAllocation.coded_comment_id_ref)
  
  ::efdi::UID* temp = coded_comment_id_ref_;
  coded_comment_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* CommentAllocation::mutable_coded_comment_id_ref() {
  
  if (coded_comment_id_ref_ == NULL) {
    coded_comment_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.CommentAllocation.coded_comment_id_ref)
  return coded_comment_id_ref_;
}
inline void CommentAllocation::set_allocated_coded_comment_id_ref(::efdi::UID* coded_comment_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete coded_comment_id_ref_;
  }
  if (coded_comment_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      coded_comment_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coded_comment_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  coded_comment_id_ref_ = coded_comment_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.CommentAllocation.coded_comment_id_ref)
}

// .efdi.UID coded_comment_list_value = 2;
inline bool CommentAllocation::has_coded_comment_list_value() const {
  return this != internal_default_instance() && coded_comment_list_value_ != NULL;
}
inline void CommentAllocation::clear_coded_comment_list_value() {
  if (GetArenaNoVirtual() == NULL && coded_comment_list_value_ != NULL) {
    delete coded_comment_list_value_;
  }
  coded_comment_list_value_ = NULL;
}
inline const ::efdi::UID& CommentAllocation::coded_comment_list_value() const {
  const ::efdi::UID* p = coded_comment_list_value_;
  // @@protoc_insertion_point(field_get:efdi.CommentAllocation.coded_comment_list_value)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* CommentAllocation::release_coded_comment_list_value() {
  // @@protoc_insertion_point(field_release:efdi.CommentAllocation.coded_comment_list_value)
  
  ::efdi::UID* temp = coded_comment_list_value_;
  coded_comment_list_value_ = NULL;
  return temp;
}
inline ::efdi::UID* CommentAllocation::mutable_coded_comment_list_value() {
  
  if (coded_comment_list_value_ == NULL) {
    coded_comment_list_value_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.CommentAllocation.coded_comment_list_value)
  return coded_comment_list_value_;
}
inline void CommentAllocation::set_allocated_coded_comment_list_value(::efdi::UID* coded_comment_list_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete coded_comment_list_value_;
  }
  if (coded_comment_list_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      coded_comment_list_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coded_comment_list_value, submessage_arena);
    }
    
  } else {
    
  }
  coded_comment_list_value_ = coded_comment_list_value;
  // @@protoc_insertion_point(field_set_allocated:efdi.CommentAllocation.coded_comment_list_value)
}

// string free_comment_text = 3;
inline void CommentAllocation::clear_free_comment_text() {
  free_comment_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommentAllocation::free_comment_text() const {
  // @@protoc_insertion_point(field_get:efdi.CommentAllocation.free_comment_text)
  return free_comment_text_.GetNoArena();
}
inline void CommentAllocation::set_free_comment_text(const ::std::string& value) {
  
  free_comment_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.CommentAllocation.free_comment_text)
}
#if LANG_CXX11
inline void CommentAllocation::set_free_comment_text(::std::string&& value) {
  
  free_comment_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.CommentAllocation.free_comment_text)
}
#endif
inline void CommentAllocation::set_free_comment_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  free_comment_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.CommentAllocation.free_comment_text)
}
inline void CommentAllocation::set_free_comment_text(const char* value, size_t size) {
  
  free_comment_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.CommentAllocation.free_comment_text)
}
inline ::std::string* CommentAllocation::mutable_free_comment_text() {
  
  // @@protoc_insertion_point(field_mutable:efdi.CommentAllocation.free_comment_text)
  return free_comment_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommentAllocation::release_free_comment_text() {
  // @@protoc_insertion_point(field_release:efdi.CommentAllocation.free_comment_text)
  
  return free_comment_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommentAllocation::set_allocated_free_comment_text(::std::string* free_comment_text) {
  if (free_comment_text != NULL) {
    
  } else {
    
  }
  free_comment_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), free_comment_text);
  // @@protoc_insertion_point(field_set_allocated:efdi.CommentAllocation.free_comment_text)
}

// .efdi.AllocationStamp allocation_stamp = 4;
inline bool CommentAllocation::has_allocation_stamp() const {
  return this != internal_default_instance() && allocation_stamp_ != NULL;
}
inline void CommentAllocation::clear_allocation_stamp() {
  if (GetArenaNoVirtual() == NULL && allocation_stamp_ != NULL) {
    delete allocation_stamp_;
  }
  allocation_stamp_ = NULL;
}
inline const ::efdi::AllocationStamp& CommentAllocation::allocation_stamp() const {
  const ::efdi::AllocationStamp* p = allocation_stamp_;
  // @@protoc_insertion_point(field_get:efdi.CommentAllocation.allocation_stamp)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::AllocationStamp*>(
      &::efdi::_AllocationStamp_default_instance_);
}
inline ::efdi::AllocationStamp* CommentAllocation::release_allocation_stamp() {
  // @@protoc_insertion_point(field_release:efdi.CommentAllocation.allocation_stamp)
  
  ::efdi::AllocationStamp* temp = allocation_stamp_;
  allocation_stamp_ = NULL;
  return temp;
}
inline ::efdi::AllocationStamp* CommentAllocation::mutable_allocation_stamp() {
  
  if (allocation_stamp_ == NULL) {
    allocation_stamp_ = new ::efdi::AllocationStamp;
  }
  // @@protoc_insertion_point(field_mutable:efdi.CommentAllocation.allocation_stamp)
  return allocation_stamp_;
}
inline void CommentAllocation::set_allocated_allocation_stamp(::efdi::AllocationStamp* allocation_stamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete allocation_stamp_;
  }
  if (allocation_stamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      allocation_stamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, allocation_stamp, submessage_arena);
    }
    
  } else {
    
  }
  allocation_stamp_ = allocation_stamp;
  // @@protoc_insertion_point(field_set_allocated:efdi.CommentAllocation.allocation_stamp)
}

// repeated .google.protobuf.Any extension = 2048;
inline int CommentAllocation::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& CommentAllocation::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.CommentAllocation.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* CommentAllocation::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.CommentAllocation.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* CommentAllocation::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.CommentAllocation.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
CommentAllocation::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.CommentAllocation.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
CommentAllocation::extension() const {
  // @@protoc_insertion_point(field_list:efdi.CommentAllocation.extension)
  return extension_;
}

// -------------------------------------------------------------------

// Connection

// .efdi.UID device_id_ref_0 = 1;
inline bool Connection::has_device_id_ref_0() const {
  return this != internal_default_instance() && device_id_ref_0_ != NULL;
}
inline void Connection::clear_device_id_ref_0() {
  if (GetArenaNoVirtual() == NULL && device_id_ref_0_ != NULL) {
    delete device_id_ref_0_;
  }
  device_id_ref_0_ = NULL;
}
inline const ::efdi::UID& Connection::device_id_ref_0() const {
  const ::efdi::UID* p = device_id_ref_0_;
  // @@protoc_insertion_point(field_get:efdi.Connection.device_id_ref_0)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* Connection::release_device_id_ref_0() {
  // @@protoc_insertion_point(field_release:efdi.Connection.device_id_ref_0)
  
  ::efdi::UID* temp = device_id_ref_0_;
  device_id_ref_0_ = NULL;
  return temp;
}
inline ::efdi::UID* Connection::mutable_device_id_ref_0() {
  
  if (device_id_ref_0_ == NULL) {
    device_id_ref_0_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Connection.device_id_ref_0)
  return device_id_ref_0_;
}
inline void Connection::set_allocated_device_id_ref_0(::efdi::UID* device_id_ref_0) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete device_id_ref_0_;
  }
  if (device_id_ref_0) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_id_ref_0 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_id_ref_0, submessage_arena);
    }
    
  } else {
    
  }
  device_id_ref_0_ = device_id_ref_0;
  // @@protoc_insertion_point(field_set_allocated:efdi.Connection.device_id_ref_0)
}

// .efdi.UID device_element_id_ref_0 = 2;
inline bool Connection::has_device_element_id_ref_0() const {
  return this != internal_default_instance() && device_element_id_ref_0_ != NULL;
}
inline void Connection::clear_device_element_id_ref_0() {
  if (GetArenaNoVirtual() == NULL && device_element_id_ref_0_ != NULL) {
    delete device_element_id_ref_0_;
  }
  device_element_id_ref_0_ = NULL;
}
inline const ::efdi::UID& Connection::device_element_id_ref_0() const {
  const ::efdi::UID* p = device_element_id_ref_0_;
  // @@protoc_insertion_point(field_get:efdi.Connection.device_element_id_ref_0)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* Connection::release_device_element_id_ref_0() {
  // @@protoc_insertion_point(field_release:efdi.Connection.device_element_id_ref_0)
  
  ::efdi::UID* temp = device_element_id_ref_0_;
  device_element_id_ref_0_ = NULL;
  return temp;
}
inline ::efdi::UID* Connection::mutable_device_element_id_ref_0() {
  
  if (device_element_id_ref_0_ == NULL) {
    device_element_id_ref_0_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Connection.device_element_id_ref_0)
  return device_element_id_ref_0_;
}
inline void Connection::set_allocated_device_element_id_ref_0(::efdi::UID* device_element_id_ref_0) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete device_element_id_ref_0_;
  }
  if (device_element_id_ref_0) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_element_id_ref_0 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_element_id_ref_0, submessage_arena);
    }
    
  } else {
    
  }
  device_element_id_ref_0_ = device_element_id_ref_0;
  // @@protoc_insertion_point(field_set_allocated:efdi.Connection.device_element_id_ref_0)
}

// .efdi.UID device_id_ref_1 = 3;
inline bool Connection::has_device_id_ref_1() const {
  return this != internal_default_instance() && device_id_ref_1_ != NULL;
}
inline void Connection::clear_device_id_ref_1() {
  if (GetArenaNoVirtual() == NULL && device_id_ref_1_ != NULL) {
    delete device_id_ref_1_;
  }
  device_id_ref_1_ = NULL;
}
inline const ::efdi::UID& Connection::device_id_ref_1() const {
  const ::efdi::UID* p = device_id_ref_1_;
  // @@protoc_insertion_point(field_get:efdi.Connection.device_id_ref_1)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* Connection::release_device_id_ref_1() {
  // @@protoc_insertion_point(field_release:efdi.Connection.device_id_ref_1)
  
  ::efdi::UID* temp = device_id_ref_1_;
  device_id_ref_1_ = NULL;
  return temp;
}
inline ::efdi::UID* Connection::mutable_device_id_ref_1() {
  
  if (device_id_ref_1_ == NULL) {
    device_id_ref_1_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Connection.device_id_ref_1)
  return device_id_ref_1_;
}
inline void Connection::set_allocated_device_id_ref_1(::efdi::UID* device_id_ref_1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete device_id_ref_1_;
  }
  if (device_id_ref_1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_id_ref_1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_id_ref_1, submessage_arena);
    }
    
  } else {
    
  }
  device_id_ref_1_ = device_id_ref_1;
  // @@protoc_insertion_point(field_set_allocated:efdi.Connection.device_id_ref_1)
}

// .efdi.UID device_element_id_ref_1 = 4;
inline bool Connection::has_device_element_id_ref_1() const {
  return this != internal_default_instance() && device_element_id_ref_1_ != NULL;
}
inline void Connection::clear_device_element_id_ref_1() {
  if (GetArenaNoVirtual() == NULL && device_element_id_ref_1_ != NULL) {
    delete device_element_id_ref_1_;
  }
  device_element_id_ref_1_ = NULL;
}
inline const ::efdi::UID& Connection::device_element_id_ref_1() const {
  const ::efdi::UID* p = device_element_id_ref_1_;
  // @@protoc_insertion_point(field_get:efdi.Connection.device_element_id_ref_1)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* Connection::release_device_element_id_ref_1() {
  // @@protoc_insertion_point(field_release:efdi.Connection.device_element_id_ref_1)
  
  ::efdi::UID* temp = device_element_id_ref_1_;
  device_element_id_ref_1_ = NULL;
  return temp;
}
inline ::efdi::UID* Connection::mutable_device_element_id_ref_1() {
  
  if (device_element_id_ref_1_ == NULL) {
    device_element_id_ref_1_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Connection.device_element_id_ref_1)
  return device_element_id_ref_1_;
}
inline void Connection::set_allocated_device_element_id_ref_1(::efdi::UID* device_element_id_ref_1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete device_element_id_ref_1_;
  }
  if (device_element_id_ref_1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_element_id_ref_1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_element_id_ref_1, submessage_arena);
    }
    
  } else {
    
  }
  device_element_id_ref_1_ = device_element_id_ref_1;
  // @@protoc_insertion_point(field_set_allocated:efdi.Connection.device_element_id_ref_1)
}

// repeated .google.protobuf.Any extension = 2048;
inline int Connection::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& Connection::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Connection.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* Connection::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Connection.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* Connection::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.Connection.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
Connection::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Connection.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
Connection::extension() const {
  // @@protoc_insertion_point(field_list:efdi.Connection.extension)
  return extension_;
}

// -------------------------------------------------------------------

// ControlAssignment

// bytes source_client_name = 1;
inline void ControlAssignment::clear_source_client_name() {
  source_client_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ControlAssignment::source_client_name() const {
  // @@protoc_insertion_point(field_get:efdi.ControlAssignment.source_client_name)
  return source_client_name_.GetNoArena();
}
inline void ControlAssignment::set_source_client_name(const ::std::string& value) {
  
  source_client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.ControlAssignment.source_client_name)
}
#if LANG_CXX11
inline void ControlAssignment::set_source_client_name(::std::string&& value) {
  
  source_client_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.ControlAssignment.source_client_name)
}
#endif
inline void ControlAssignment::set_source_client_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.ControlAssignment.source_client_name)
}
inline void ControlAssignment::set_source_client_name(const void* value, size_t size) {
  
  source_client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.ControlAssignment.source_client_name)
}
inline ::std::string* ControlAssignment::mutable_source_client_name() {
  
  // @@protoc_insertion_point(field_mutable:efdi.ControlAssignment.source_client_name)
  return source_client_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ControlAssignment::release_source_client_name() {
  // @@protoc_insertion_point(field_release:efdi.ControlAssignment.source_client_name)
  
  return source_client_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ControlAssignment::set_allocated_source_client_name(::std::string* source_client_name) {
  if (source_client_name != NULL) {
    
  } else {
    
  }
  source_client_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_client_name);
  // @@protoc_insertion_point(field_set_allocated:efdi.ControlAssignment.source_client_name)
}

// bytes user_client_name = 2;
inline void ControlAssignment::clear_user_client_name() {
  user_client_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ControlAssignment::user_client_name() const {
  // @@protoc_insertion_point(field_get:efdi.ControlAssignment.user_client_name)
  return user_client_name_.GetNoArena();
}
inline void ControlAssignment::set_user_client_name(const ::std::string& value) {
  
  user_client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.ControlAssignment.user_client_name)
}
#if LANG_CXX11
inline void ControlAssignment::set_user_client_name(::std::string&& value) {
  
  user_client_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.ControlAssignment.user_client_name)
}
#endif
inline void ControlAssignment::set_user_client_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.ControlAssignment.user_client_name)
}
inline void ControlAssignment::set_user_client_name(const void* value, size_t size) {
  
  user_client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.ControlAssignment.user_client_name)
}
inline ::std::string* ControlAssignment::mutable_user_client_name() {
  
  // @@protoc_insertion_point(field_mutable:efdi.ControlAssignment.user_client_name)
  return user_client_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ControlAssignment::release_user_client_name() {
  // @@protoc_insertion_point(field_release:efdi.ControlAssignment.user_client_name)
  
  return user_client_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ControlAssignment::set_allocated_user_client_name(::std::string* user_client_name) {
  if (user_client_name != NULL) {
    
  } else {
    
  }
  user_client_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_client_name);
  // @@protoc_insertion_point(field_set_allocated:efdi.ControlAssignment.user_client_name)
}

// bytes source_device_structure_label = 3;
inline void ControlAssignment::clear_source_device_structure_label() {
  source_device_structure_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ControlAssignment::source_device_structure_label() const {
  // @@protoc_insertion_point(field_get:efdi.ControlAssignment.source_device_structure_label)
  return source_device_structure_label_.GetNoArena();
}
inline void ControlAssignment::set_source_device_structure_label(const ::std::string& value) {
  
  source_device_structure_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.ControlAssignment.source_device_structure_label)
}
#if LANG_CXX11
inline void ControlAssignment::set_source_device_structure_label(::std::string&& value) {
  
  source_device_structure_label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.ControlAssignment.source_device_structure_label)
}
#endif
inline void ControlAssignment::set_source_device_structure_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_device_structure_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.ControlAssignment.source_device_structure_label)
}
inline void ControlAssignment::set_source_device_structure_label(const void* value, size_t size) {
  
  source_device_structure_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.ControlAssignment.source_device_structure_label)
}
inline ::std::string* ControlAssignment::mutable_source_device_structure_label() {
  
  // @@protoc_insertion_point(field_mutable:efdi.ControlAssignment.source_device_structure_label)
  return source_device_structure_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ControlAssignment::release_source_device_structure_label() {
  // @@protoc_insertion_point(field_release:efdi.ControlAssignment.source_device_structure_label)
  
  return source_device_structure_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ControlAssignment::set_allocated_source_device_structure_label(::std::string* source_device_structure_label) {
  if (source_device_structure_label != NULL) {
    
  } else {
    
  }
  source_device_structure_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_device_structure_label);
  // @@protoc_insertion_point(field_set_allocated:efdi.ControlAssignment.source_device_structure_label)
}

// bytes user_device_structure_label = 4;
inline void ControlAssignment::clear_user_device_structure_label() {
  user_device_structure_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ControlAssignment::user_device_structure_label() const {
  // @@protoc_insertion_point(field_get:efdi.ControlAssignment.user_device_structure_label)
  return user_device_structure_label_.GetNoArena();
}
inline void ControlAssignment::set_user_device_structure_label(const ::std::string& value) {
  
  user_device_structure_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.ControlAssignment.user_device_structure_label)
}
#if LANG_CXX11
inline void ControlAssignment::set_user_device_structure_label(::std::string&& value) {
  
  user_device_structure_label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.ControlAssignment.user_device_structure_label)
}
#endif
inline void ControlAssignment::set_user_device_structure_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_device_structure_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.ControlAssignment.user_device_structure_label)
}
inline void ControlAssignment::set_user_device_structure_label(const void* value, size_t size) {
  
  user_device_structure_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.ControlAssignment.user_device_structure_label)
}
inline ::std::string* ControlAssignment::mutable_user_device_structure_label() {
  
  // @@protoc_insertion_point(field_mutable:efdi.ControlAssignment.user_device_structure_label)
  return user_device_structure_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ControlAssignment::release_user_device_structure_label() {
  // @@protoc_insertion_point(field_release:efdi.ControlAssignment.user_device_structure_label)
  
  return user_device_structure_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ControlAssignment::set_allocated_user_device_structure_label(::std::string* user_device_structure_label) {
  if (user_device_structure_label != NULL) {
    
  } else {
    
  }
  user_device_structure_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_device_structure_label);
  // @@protoc_insertion_point(field_set_allocated:efdi.ControlAssignment.user_device_structure_label)
}

// uint32 source_device_element_number = 5;
inline void ControlAssignment::clear_source_device_element_number() {
  source_device_element_number_ = 0u;
}
inline ::google::protobuf::uint32 ControlAssignment::source_device_element_number() const {
  // @@protoc_insertion_point(field_get:efdi.ControlAssignment.source_device_element_number)
  return source_device_element_number_;
}
inline void ControlAssignment::set_source_device_element_number(::google::protobuf::uint32 value) {
  
  source_device_element_number_ = value;
  // @@protoc_insertion_point(field_set:efdi.ControlAssignment.source_device_element_number)
}

// uint32 user_device_element_number = 6;
inline void ControlAssignment::clear_user_device_element_number() {
  user_device_element_number_ = 0u;
}
inline ::google::protobuf::uint32 ControlAssignment::user_device_element_number() const {
  // @@protoc_insertion_point(field_get:efdi.ControlAssignment.user_device_element_number)
  return user_device_element_number_;
}
inline void ControlAssignment::set_user_device_element_number(::google::protobuf::uint32 value) {
  
  user_device_element_number_ = value;
  // @@protoc_insertion_point(field_set:efdi.ControlAssignment.user_device_element_number)
}

// uint32 process_data_ddi = 7;
inline void ControlAssignment::clear_process_data_ddi() {
  process_data_ddi_ = 0u;
}
inline ::google::protobuf::uint32 ControlAssignment::process_data_ddi() const {
  // @@protoc_insertion_point(field_get:efdi.ControlAssignment.process_data_ddi)
  return process_data_ddi_;
}
inline void ControlAssignment::set_process_data_ddi(::google::protobuf::uint32 value) {
  
  process_data_ddi_ = value;
  // @@protoc_insertion_point(field_set:efdi.ControlAssignment.process_data_ddi)
}

// .efdi.AllocationStamp allocation_stamp = 8;
inline bool ControlAssignment::has_allocation_stamp() const {
  return this != internal_default_instance() && allocation_stamp_ != NULL;
}
inline void ControlAssignment::clear_allocation_stamp() {
  if (GetArenaNoVirtual() == NULL && allocation_stamp_ != NULL) {
    delete allocation_stamp_;
  }
  allocation_stamp_ = NULL;
}
inline const ::efdi::AllocationStamp& ControlAssignment::allocation_stamp() const {
  const ::efdi::AllocationStamp* p = allocation_stamp_;
  // @@protoc_insertion_point(field_get:efdi.ControlAssignment.allocation_stamp)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::AllocationStamp*>(
      &::efdi::_AllocationStamp_default_instance_);
}
inline ::efdi::AllocationStamp* ControlAssignment::release_allocation_stamp() {
  // @@protoc_insertion_point(field_release:efdi.ControlAssignment.allocation_stamp)
  
  ::efdi::AllocationStamp* temp = allocation_stamp_;
  allocation_stamp_ = NULL;
  return temp;
}
inline ::efdi::AllocationStamp* ControlAssignment::mutable_allocation_stamp() {
  
  if (allocation_stamp_ == NULL) {
    allocation_stamp_ = new ::efdi::AllocationStamp;
  }
  // @@protoc_insertion_point(field_mutable:efdi.ControlAssignment.allocation_stamp)
  return allocation_stamp_;
}
inline void ControlAssignment::set_allocated_allocation_stamp(::efdi::AllocationStamp* allocation_stamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete allocation_stamp_;
  }
  if (allocation_stamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      allocation_stamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, allocation_stamp, submessage_arena);
    }
    
  } else {
    
  }
  allocation_stamp_ = allocation_stamp;
  // @@protoc_insertion_point(field_set_allocated:efdi.ControlAssignment.allocation_stamp)
}

// repeated .google.protobuf.Any extension = 2048;
inline int ControlAssignment::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& ControlAssignment::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ControlAssignment.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* ControlAssignment::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ControlAssignment.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* ControlAssignment::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.ControlAssignment.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
ControlAssignment::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ControlAssignment.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
ControlAssignment::extension() const {
  // @@protoc_insertion_point(field_list:efdi.ControlAssignment.extension)
  return extension_;
}

// -------------------------------------------------------------------

// CropType

// .efdi.UID crop_type_id = 1;
inline bool CropType::has_crop_type_id() const {
  return this != internal_default_instance() && crop_type_id_ != NULL;
}
inline void CropType::clear_crop_type_id() {
  if (GetArenaNoVirtual() == NULL && crop_type_id_ != NULL) {
    delete crop_type_id_;
  }
  crop_type_id_ = NULL;
}
inline const ::efdi::UID& CropType::crop_type_id() const {
  const ::efdi::UID* p = crop_type_id_;
  // @@protoc_insertion_point(field_get:efdi.CropType.crop_type_id)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* CropType::release_crop_type_id() {
  // @@protoc_insertion_point(field_release:efdi.CropType.crop_type_id)
  
  ::efdi::UID* temp = crop_type_id_;
  crop_type_id_ = NULL;
  return temp;
}
inline ::efdi::UID* CropType::mutable_crop_type_id() {
  
  if (crop_type_id_ == NULL) {
    crop_type_id_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.CropType.crop_type_id)
  return crop_type_id_;
}
inline void CropType::set_allocated_crop_type_id(::efdi::UID* crop_type_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete crop_type_id_;
  }
  if (crop_type_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      crop_type_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, crop_type_id, submessage_arena);
    }
    
  } else {
    
  }
  crop_type_id_ = crop_type_id;
  // @@protoc_insertion_point(field_set_allocated:efdi.CropType.crop_type_id)
}

// string crop_type_designator = 2;
inline void CropType::clear_crop_type_designator() {
  crop_type_designator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CropType::crop_type_designator() const {
  // @@protoc_insertion_point(field_get:efdi.CropType.crop_type_designator)
  return crop_type_designator_.GetNoArena();
}
inline void CropType::set_crop_type_designator(const ::std::string& value) {
  
  crop_type_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.CropType.crop_type_designator)
}
#if LANG_CXX11
inline void CropType::set_crop_type_designator(::std::string&& value) {
  
  crop_type_designator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.CropType.crop_type_designator)
}
#endif
inline void CropType::set_crop_type_designator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  crop_type_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.CropType.crop_type_designator)
}
inline void CropType::set_crop_type_designator(const char* value, size_t size) {
  
  crop_type_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.CropType.crop_type_designator)
}
inline ::std::string* CropType::mutable_crop_type_designator() {
  
  // @@protoc_insertion_point(field_mutable:efdi.CropType.crop_type_designator)
  return crop_type_designator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CropType::release_crop_type_designator() {
  // @@protoc_insertion_point(field_release:efdi.CropType.crop_type_designator)
  
  return crop_type_designator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CropType::set_allocated_crop_type_designator(::std::string* crop_type_designator) {
  if (crop_type_designator != NULL) {
    
  } else {
    
  }
  crop_type_designator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), crop_type_designator);
  // @@protoc_insertion_point(field_set_allocated:efdi.CropType.crop_type_designator)
}

// .efdi.UID product_group_id_ref = 3;
inline bool CropType::has_product_group_id_ref() const {
  return this != internal_default_instance() && product_group_id_ref_ != NULL;
}
inline void CropType::clear_product_group_id_ref() {
  if (GetArenaNoVirtual() == NULL && product_group_id_ref_ != NULL) {
    delete product_group_id_ref_;
  }
  product_group_id_ref_ = NULL;
}
inline const ::efdi::UID& CropType::product_group_id_ref() const {
  const ::efdi::UID* p = product_group_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.CropType.product_group_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* CropType::release_product_group_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.CropType.product_group_id_ref)
  
  ::efdi::UID* temp = product_group_id_ref_;
  product_group_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* CropType::mutable_product_group_id_ref() {
  
  if (product_group_id_ref_ == NULL) {
    product_group_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.CropType.product_group_id_ref)
  return product_group_id_ref_;
}
inline void CropType::set_allocated_product_group_id_ref(::efdi::UID* product_group_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete product_group_id_ref_;
  }
  if (product_group_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      product_group_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, product_group_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  product_group_id_ref_ = product_group_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.CropType.product_group_id_ref)
}

// repeated .efdi.CropVariety crop_variety = 4;
inline int CropType::crop_variety_size() const {
  return crop_variety_.size();
}
inline void CropType::clear_crop_variety() {
  crop_variety_.Clear();
}
inline const ::efdi::CropVariety& CropType::crop_variety(int index) const {
  // @@protoc_insertion_point(field_get:efdi.CropType.crop_variety)
  return crop_variety_.Get(index);
}
inline ::efdi::CropVariety* CropType::mutable_crop_variety(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.CropType.crop_variety)
  return crop_variety_.Mutable(index);
}
inline ::efdi::CropVariety* CropType::add_crop_variety() {
  // @@protoc_insertion_point(field_add:efdi.CropType.crop_variety)
  return crop_variety_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::CropVariety >*
CropType::mutable_crop_variety() {
  // @@protoc_insertion_point(field_mutable_list:efdi.CropType.crop_variety)
  return &crop_variety_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::CropVariety >&
CropType::crop_variety() const {
  // @@protoc_insertion_point(field_list:efdi.CropType.crop_variety)
  return crop_variety_;
}

// repeated .google.protobuf.Any extension = 2048;
inline int CropType::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& CropType::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.CropType.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* CropType::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.CropType.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* CropType::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.CropType.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
CropType::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.CropType.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
CropType::extension() const {
  // @@protoc_insertion_point(field_list:efdi.CropType.extension)
  return extension_;
}

// -------------------------------------------------------------------

// CropVariety

// .efdi.UID crop_variety_id = 1;
inline bool CropVariety::has_crop_variety_id() const {
  return this != internal_default_instance() && crop_variety_id_ != NULL;
}
inline void CropVariety::clear_crop_variety_id() {
  if (GetArenaNoVirtual() == NULL && crop_variety_id_ != NULL) {
    delete crop_variety_id_;
  }
  crop_variety_id_ = NULL;
}
inline const ::efdi::UID& CropVariety::crop_variety_id() const {
  const ::efdi::UID* p = crop_variety_id_;
  // @@protoc_insertion_point(field_get:efdi.CropVariety.crop_variety_id)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* CropVariety::release_crop_variety_id() {
  // @@protoc_insertion_point(field_release:efdi.CropVariety.crop_variety_id)
  
  ::efdi::UID* temp = crop_variety_id_;
  crop_variety_id_ = NULL;
  return temp;
}
inline ::efdi::UID* CropVariety::mutable_crop_variety_id() {
  
  if (crop_variety_id_ == NULL) {
    crop_variety_id_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.CropVariety.crop_variety_id)
  return crop_variety_id_;
}
inline void CropVariety::set_allocated_crop_variety_id(::efdi::UID* crop_variety_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete crop_variety_id_;
  }
  if (crop_variety_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      crop_variety_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, crop_variety_id, submessage_arena);
    }
    
  } else {
    
  }
  crop_variety_id_ = crop_variety_id;
  // @@protoc_insertion_point(field_set_allocated:efdi.CropVariety.crop_variety_id)
}

// string crop_variety_designator = 2;
inline void CropVariety::clear_crop_variety_designator() {
  crop_variety_designator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CropVariety::crop_variety_designator() const {
  // @@protoc_insertion_point(field_get:efdi.CropVariety.crop_variety_designator)
  return crop_variety_designator_.GetNoArena();
}
inline void CropVariety::set_crop_variety_designator(const ::std::string& value) {
  
  crop_variety_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.CropVariety.crop_variety_designator)
}
#if LANG_CXX11
inline void CropVariety::set_crop_variety_designator(::std::string&& value) {
  
  crop_variety_designator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.CropVariety.crop_variety_designator)
}
#endif
inline void CropVariety::set_crop_variety_designator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  crop_variety_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.CropVariety.crop_variety_designator)
}
inline void CropVariety::set_crop_variety_designator(const char* value, size_t size) {
  
  crop_variety_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.CropVariety.crop_variety_designator)
}
inline ::std::string* CropVariety::mutable_crop_variety_designator() {
  
  // @@protoc_insertion_point(field_mutable:efdi.CropVariety.crop_variety_designator)
  return crop_variety_designator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CropVariety::release_crop_variety_designator() {
  // @@protoc_insertion_point(field_release:efdi.CropVariety.crop_variety_designator)
  
  return crop_variety_designator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CropVariety::set_allocated_crop_variety_designator(::std::string* crop_variety_designator) {
  if (crop_variety_designator != NULL) {
    
  } else {
    
  }
  crop_variety_designator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), crop_variety_designator);
  // @@protoc_insertion_point(field_set_allocated:efdi.CropVariety.crop_variety_designator)
}

// .efdi.UID product_id_ref = 3;
inline bool CropVariety::has_product_id_ref() const {
  return this != internal_default_instance() && product_id_ref_ != NULL;
}
inline void CropVariety::clear_product_id_ref() {
  if (GetArenaNoVirtual() == NULL && product_id_ref_ != NULL) {
    delete product_id_ref_;
  }
  product_id_ref_ = NULL;
}
inline const ::efdi::UID& CropVariety::product_id_ref() const {
  const ::efdi::UID* p = product_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.CropVariety.product_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* CropVariety::release_product_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.CropVariety.product_id_ref)
  
  ::efdi::UID* temp = product_id_ref_;
  product_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* CropVariety::mutable_product_id_ref() {
  
  if (product_id_ref_ == NULL) {
    product_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.CropVariety.product_id_ref)
  return product_id_ref_;
}
inline void CropVariety::set_allocated_product_id_ref(::efdi::UID* product_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete product_id_ref_;
  }
  if (product_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      product_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, product_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  product_id_ref_ = product_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.CropVariety.product_id_ref)
}

// repeated .google.protobuf.Any extension = 2048;
inline int CropVariety::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& CropVariety::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.CropVariety.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* CropVariety::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.CropVariety.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* CropVariety::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.CropVariety.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
CropVariety::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.CropVariety.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
CropVariety::extension() const {
  // @@protoc_insertion_point(field_list:efdi.CropVariety.extension)
  return extension_;
}

// -------------------------------------------------------------------

// CulturalPractice

// .efdi.UID cultural_practice_id = 1;
inline bool CulturalPractice::has_cultural_practice_id() const {
  return this != internal_default_instance() && cultural_practice_id_ != NULL;
}
inline void CulturalPractice::clear_cultural_practice_id() {
  if (GetArenaNoVirtual() == NULL && cultural_practice_id_ != NULL) {
    delete cultural_practice_id_;
  }
  cultural_practice_id_ = NULL;
}
inline const ::efdi::UID& CulturalPractice::cultural_practice_id() const {
  const ::efdi::UID* p = cultural_practice_id_;
  // @@protoc_insertion_point(field_get:efdi.CulturalPractice.cultural_practice_id)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* CulturalPractice::release_cultural_practice_id() {
  // @@protoc_insertion_point(field_release:efdi.CulturalPractice.cultural_practice_id)
  
  ::efdi::UID* temp = cultural_practice_id_;
  cultural_practice_id_ = NULL;
  return temp;
}
inline ::efdi::UID* CulturalPractice::mutable_cultural_practice_id() {
  
  if (cultural_practice_id_ == NULL) {
    cultural_practice_id_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.CulturalPractice.cultural_practice_id)
  return cultural_practice_id_;
}
inline void CulturalPractice::set_allocated_cultural_practice_id(::efdi::UID* cultural_practice_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cultural_practice_id_;
  }
  if (cultural_practice_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cultural_practice_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cultural_practice_id, submessage_arena);
    }
    
  } else {
    
  }
  cultural_practice_id_ = cultural_practice_id;
  // @@protoc_insertion_point(field_set_allocated:efdi.CulturalPractice.cultural_practice_id)
}

// string cultural_practice_designator = 2;
inline void CulturalPractice::clear_cultural_practice_designator() {
  cultural_practice_designator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CulturalPractice::cultural_practice_designator() const {
  // @@protoc_insertion_point(field_get:efdi.CulturalPractice.cultural_practice_designator)
  return cultural_practice_designator_.GetNoArena();
}
inline void CulturalPractice::set_cultural_practice_designator(const ::std::string& value) {
  
  cultural_practice_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.CulturalPractice.cultural_practice_designator)
}
#if LANG_CXX11
inline void CulturalPractice::set_cultural_practice_designator(::std::string&& value) {
  
  cultural_practice_designator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.CulturalPractice.cultural_practice_designator)
}
#endif
inline void CulturalPractice::set_cultural_practice_designator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cultural_practice_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.CulturalPractice.cultural_practice_designator)
}
inline void CulturalPractice::set_cultural_practice_designator(const char* value, size_t size) {
  
  cultural_practice_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.CulturalPractice.cultural_practice_designator)
}
inline ::std::string* CulturalPractice::mutable_cultural_practice_designator() {
  
  // @@protoc_insertion_point(field_mutable:efdi.CulturalPractice.cultural_practice_designator)
  return cultural_practice_designator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CulturalPractice::release_cultural_practice_designator() {
  // @@protoc_insertion_point(field_release:efdi.CulturalPractice.cultural_practice_designator)
  
  return cultural_practice_designator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CulturalPractice::set_allocated_cultural_practice_designator(::std::string* cultural_practice_designator) {
  if (cultural_practice_designator != NULL) {
    
  } else {
    
  }
  cultural_practice_designator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cultural_practice_designator);
  // @@protoc_insertion_point(field_set_allocated:efdi.CulturalPractice.cultural_practice_designator)
}

// repeated .efdi.OperationTechniqueReference operation_technique_reference = 3;
inline int CulturalPractice::operation_technique_reference_size() const {
  return operation_technique_reference_.size();
}
inline void CulturalPractice::clear_operation_technique_reference() {
  operation_technique_reference_.Clear();
}
inline const ::efdi::OperationTechniqueReference& CulturalPractice::operation_technique_reference(int index) const {
  // @@protoc_insertion_point(field_get:efdi.CulturalPractice.operation_technique_reference)
  return operation_technique_reference_.Get(index);
}
inline ::efdi::OperationTechniqueReference* CulturalPractice::mutable_operation_technique_reference(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.CulturalPractice.operation_technique_reference)
  return operation_technique_reference_.Mutable(index);
}
inline ::efdi::OperationTechniqueReference* CulturalPractice::add_operation_technique_reference() {
  // @@protoc_insertion_point(field_add:efdi.CulturalPractice.operation_technique_reference)
  return operation_technique_reference_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::OperationTechniqueReference >*
CulturalPractice::mutable_operation_technique_reference() {
  // @@protoc_insertion_point(field_mutable_list:efdi.CulturalPractice.operation_technique_reference)
  return &operation_technique_reference_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::OperationTechniqueReference >&
CulturalPractice::operation_technique_reference() const {
  // @@protoc_insertion_point(field_list:efdi.CulturalPractice.operation_technique_reference)
  return operation_technique_reference_;
}

// -------------------------------------------------------------------

// Customer

// .efdi.UID customer_id = 1;
inline bool Customer::has_customer_id() const {
  return this != internal_default_instance() && customer_id_ != NULL;
}
inline void Customer::clear_customer_id() {
  if (GetArenaNoVirtual() == NULL && customer_id_ != NULL) {
    delete customer_id_;
  }
  customer_id_ = NULL;
}
inline const ::efdi::UID& Customer::customer_id() const {
  const ::efdi::UID* p = customer_id_;
  // @@protoc_insertion_point(field_get:efdi.Customer.customer_id)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* Customer::release_customer_id() {
  // @@protoc_insertion_point(field_release:efdi.Customer.customer_id)
  
  ::efdi::UID* temp = customer_id_;
  customer_id_ = NULL;
  return temp;
}
inline ::efdi::UID* Customer::mutable_customer_id() {
  
  if (customer_id_ == NULL) {
    customer_id_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Customer.customer_id)
  return customer_id_;
}
inline void Customer::set_allocated_customer_id(::efdi::UID* customer_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete customer_id_;
  }
  if (customer_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      customer_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, customer_id, submessage_arena);
    }
    
  } else {
    
  }
  customer_id_ = customer_id;
  // @@protoc_insertion_point(field_set_allocated:efdi.Customer.customer_id)
}

// string customer_last_name = 2;
inline void Customer::clear_customer_last_name() {
  customer_last_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Customer::customer_last_name() const {
  // @@protoc_insertion_point(field_get:efdi.Customer.customer_last_name)
  return customer_last_name_.GetNoArena();
}
inline void Customer::set_customer_last_name(const ::std::string& value) {
  
  customer_last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Customer.customer_last_name)
}
#if LANG_CXX11
inline void Customer::set_customer_last_name(::std::string&& value) {
  
  customer_last_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Customer.customer_last_name)
}
#endif
inline void Customer::set_customer_last_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  customer_last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Customer.customer_last_name)
}
inline void Customer::set_customer_last_name(const char* value, size_t size) {
  
  customer_last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Customer.customer_last_name)
}
inline ::std::string* Customer::mutable_customer_last_name() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Customer.customer_last_name)
  return customer_last_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_customer_last_name() {
  // @@protoc_insertion_point(field_release:efdi.Customer.customer_last_name)
  
  return customer_last_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_customer_last_name(::std::string* customer_last_name) {
  if (customer_last_name != NULL) {
    
  } else {
    
  }
  customer_last_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_last_name);
  // @@protoc_insertion_point(field_set_allocated:efdi.Customer.customer_last_name)
}

// string customer_first_name = 3;
inline void Customer::clear_customer_first_name() {
  customer_first_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Customer::customer_first_name() const {
  // @@protoc_insertion_point(field_get:efdi.Customer.customer_first_name)
  return customer_first_name_.GetNoArena();
}
inline void Customer::set_customer_first_name(const ::std::string& value) {
  
  customer_first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Customer.customer_first_name)
}
#if LANG_CXX11
inline void Customer::set_customer_first_name(::std::string&& value) {
  
  customer_first_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Customer.customer_first_name)
}
#endif
inline void Customer::set_customer_first_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  customer_first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Customer.customer_first_name)
}
inline void Customer::set_customer_first_name(const char* value, size_t size) {
  
  customer_first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Customer.customer_first_name)
}
inline ::std::string* Customer::mutable_customer_first_name() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Customer.customer_first_name)
  return customer_first_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_customer_first_name() {
  // @@protoc_insertion_point(field_release:efdi.Customer.customer_first_name)
  
  return customer_first_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_customer_first_name(::std::string* customer_first_name) {
  if (customer_first_name != NULL) {
    
  } else {
    
  }
  customer_first_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_first_name);
  // @@protoc_insertion_point(field_set_allocated:efdi.Customer.customer_first_name)
}

// string customer_street = 4;
inline void Customer::clear_customer_street() {
  customer_street_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Customer::customer_street() const {
  // @@protoc_insertion_point(field_get:efdi.Customer.customer_street)
  return customer_street_.GetNoArena();
}
inline void Customer::set_customer_street(const ::std::string& value) {
  
  customer_street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Customer.customer_street)
}
#if LANG_CXX11
inline void Customer::set_customer_street(::std::string&& value) {
  
  customer_street_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Customer.customer_street)
}
#endif
inline void Customer::set_customer_street(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  customer_street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Customer.customer_street)
}
inline void Customer::set_customer_street(const char* value, size_t size) {
  
  customer_street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Customer.customer_street)
}
inline ::std::string* Customer::mutable_customer_street() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Customer.customer_street)
  return customer_street_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_customer_street() {
  // @@protoc_insertion_point(field_release:efdi.Customer.customer_street)
  
  return customer_street_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_customer_street(::std::string* customer_street) {
  if (customer_street != NULL) {
    
  } else {
    
  }
  customer_street_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_street);
  // @@protoc_insertion_point(field_set_allocated:efdi.Customer.customer_street)
}

// string customer_po_box = 5;
inline void Customer::clear_customer_po_box() {
  customer_po_box_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Customer::customer_po_box() const {
  // @@protoc_insertion_point(field_get:efdi.Customer.customer_po_box)
  return customer_po_box_.GetNoArena();
}
inline void Customer::set_customer_po_box(const ::std::string& value) {
  
  customer_po_box_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Customer.customer_po_box)
}
#if LANG_CXX11
inline void Customer::set_customer_po_box(::std::string&& value) {
  
  customer_po_box_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Customer.customer_po_box)
}
#endif
inline void Customer::set_customer_po_box(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  customer_po_box_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Customer.customer_po_box)
}
inline void Customer::set_customer_po_box(const char* value, size_t size) {
  
  customer_po_box_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Customer.customer_po_box)
}
inline ::std::string* Customer::mutable_customer_po_box() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Customer.customer_po_box)
  return customer_po_box_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_customer_po_box() {
  // @@protoc_insertion_point(field_release:efdi.Customer.customer_po_box)
  
  return customer_po_box_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_customer_po_box(::std::string* customer_po_box) {
  if (customer_po_box != NULL) {
    
  } else {
    
  }
  customer_po_box_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_po_box);
  // @@protoc_insertion_point(field_set_allocated:efdi.Customer.customer_po_box)
}

// string customer_postal_code = 6;
inline void Customer::clear_customer_postal_code() {
  customer_postal_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Customer::customer_postal_code() const {
  // @@protoc_insertion_point(field_get:efdi.Customer.customer_postal_code)
  return customer_postal_code_.GetNoArena();
}
inline void Customer::set_customer_postal_code(const ::std::string& value) {
  
  customer_postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Customer.customer_postal_code)
}
#if LANG_CXX11
inline void Customer::set_customer_postal_code(::std::string&& value) {
  
  customer_postal_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Customer.customer_postal_code)
}
#endif
inline void Customer::set_customer_postal_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  customer_postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Customer.customer_postal_code)
}
inline void Customer::set_customer_postal_code(const char* value, size_t size) {
  
  customer_postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Customer.customer_postal_code)
}
inline ::std::string* Customer::mutable_customer_postal_code() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Customer.customer_postal_code)
  return customer_postal_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_customer_postal_code() {
  // @@protoc_insertion_point(field_release:efdi.Customer.customer_postal_code)
  
  return customer_postal_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_customer_postal_code(::std::string* customer_postal_code) {
  if (customer_postal_code != NULL) {
    
  } else {
    
  }
  customer_postal_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_postal_code);
  // @@protoc_insertion_point(field_set_allocated:efdi.Customer.customer_postal_code)
}

// string customer_city = 7;
inline void Customer::clear_customer_city() {
  customer_city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Customer::customer_city() const {
  // @@protoc_insertion_point(field_get:efdi.Customer.customer_city)
  return customer_city_.GetNoArena();
}
inline void Customer::set_customer_city(const ::std::string& value) {
  
  customer_city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Customer.customer_city)
}
#if LANG_CXX11
inline void Customer::set_customer_city(::std::string&& value) {
  
  customer_city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Customer.customer_city)
}
#endif
inline void Customer::set_customer_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  customer_city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Customer.customer_city)
}
inline void Customer::set_customer_city(const char* value, size_t size) {
  
  customer_city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Customer.customer_city)
}
inline ::std::string* Customer::mutable_customer_city() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Customer.customer_city)
  return customer_city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_customer_city() {
  // @@protoc_insertion_point(field_release:efdi.Customer.customer_city)
  
  return customer_city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_customer_city(::std::string* customer_city) {
  if (customer_city != NULL) {
    
  } else {
    
  }
  customer_city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_city);
  // @@protoc_insertion_point(field_set_allocated:efdi.Customer.customer_city)
}

// string customer_state = 8;
inline void Customer::clear_customer_state() {
  customer_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Customer::customer_state() const {
  // @@protoc_insertion_point(field_get:efdi.Customer.customer_state)
  return customer_state_.GetNoArena();
}
inline void Customer::set_customer_state(const ::std::string& value) {
  
  customer_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Customer.customer_state)
}
#if LANG_CXX11
inline void Customer::set_customer_state(::std::string&& value) {
  
  customer_state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Customer.customer_state)
}
#endif
inline void Customer::set_customer_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  customer_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Customer.customer_state)
}
inline void Customer::set_customer_state(const char* value, size_t size) {
  
  customer_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Customer.customer_state)
}
inline ::std::string* Customer::mutable_customer_state() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Customer.customer_state)
  return customer_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_customer_state() {
  // @@protoc_insertion_point(field_release:efdi.Customer.customer_state)
  
  return customer_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_customer_state(::std::string* customer_state) {
  if (customer_state != NULL) {
    
  } else {
    
  }
  customer_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_state);
  // @@protoc_insertion_point(field_set_allocated:efdi.Customer.customer_state)
}

// string customer_country = 9;
inline void Customer::clear_customer_country() {
  customer_country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Customer::customer_country() const {
  // @@protoc_insertion_point(field_get:efdi.Customer.customer_country)
  return customer_country_.GetNoArena();
}
inline void Customer::set_customer_country(const ::std::string& value) {
  
  customer_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Customer.customer_country)
}
#if LANG_CXX11
inline void Customer::set_customer_country(::std::string&& value) {
  
  customer_country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Customer.customer_country)
}
#endif
inline void Customer::set_customer_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  customer_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Customer.customer_country)
}
inline void Customer::set_customer_country(const char* value, size_t size) {
  
  customer_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Customer.customer_country)
}
inline ::std::string* Customer::mutable_customer_country() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Customer.customer_country)
  return customer_country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_customer_country() {
  // @@protoc_insertion_point(field_release:efdi.Customer.customer_country)
  
  return customer_country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_customer_country(::std::string* customer_country) {
  if (customer_country != NULL) {
    
  } else {
    
  }
  customer_country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_country);
  // @@protoc_insertion_point(field_set_allocated:efdi.Customer.customer_country)
}

// string customer_phone = 10;
inline void Customer::clear_customer_phone() {
  customer_phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Customer::customer_phone() const {
  // @@protoc_insertion_point(field_get:efdi.Customer.customer_phone)
  return customer_phone_.GetNoArena();
}
inline void Customer::set_customer_phone(const ::std::string& value) {
  
  customer_phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Customer.customer_phone)
}
#if LANG_CXX11
inline void Customer::set_customer_phone(::std::string&& value) {
  
  customer_phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Customer.customer_phone)
}
#endif
inline void Customer::set_customer_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  customer_phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Customer.customer_phone)
}
inline void Customer::set_customer_phone(const char* value, size_t size) {
  
  customer_phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Customer.customer_phone)
}
inline ::std::string* Customer::mutable_customer_phone() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Customer.customer_phone)
  return customer_phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_customer_phone() {
  // @@protoc_insertion_point(field_release:efdi.Customer.customer_phone)
  
  return customer_phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_customer_phone(::std::string* customer_phone) {
  if (customer_phone != NULL) {
    
  } else {
    
  }
  customer_phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_phone);
  // @@protoc_insertion_point(field_set_allocated:efdi.Customer.customer_phone)
}

// string customer_mobile = 11;
inline void Customer::clear_customer_mobile() {
  customer_mobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Customer::customer_mobile() const {
  // @@protoc_insertion_point(field_get:efdi.Customer.customer_mobile)
  return customer_mobile_.GetNoArena();
}
inline void Customer::set_customer_mobile(const ::std::string& value) {
  
  customer_mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Customer.customer_mobile)
}
#if LANG_CXX11
inline void Customer::set_customer_mobile(::std::string&& value) {
  
  customer_mobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Customer.customer_mobile)
}
#endif
inline void Customer::set_customer_mobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  customer_mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Customer.customer_mobile)
}
inline void Customer::set_customer_mobile(const char* value, size_t size) {
  
  customer_mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Customer.customer_mobile)
}
inline ::std::string* Customer::mutable_customer_mobile() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Customer.customer_mobile)
  return customer_mobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_customer_mobile() {
  // @@protoc_insertion_point(field_release:efdi.Customer.customer_mobile)
  
  return customer_mobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_customer_mobile(::std::string* customer_mobile) {
  if (customer_mobile != NULL) {
    
  } else {
    
  }
  customer_mobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_mobile);
  // @@protoc_insertion_point(field_set_allocated:efdi.Customer.customer_mobile)
}

// string customer_fax = 12;
inline void Customer::clear_customer_fax() {
  customer_fax_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Customer::customer_fax() const {
  // @@protoc_insertion_point(field_get:efdi.Customer.customer_fax)
  return customer_fax_.GetNoArena();
}
inline void Customer::set_customer_fax(const ::std::string& value) {
  
  customer_fax_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Customer.customer_fax)
}
#if LANG_CXX11
inline void Customer::set_customer_fax(::std::string&& value) {
  
  customer_fax_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Customer.customer_fax)
}
#endif
inline void Customer::set_customer_fax(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  customer_fax_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Customer.customer_fax)
}
inline void Customer::set_customer_fax(const char* value, size_t size) {
  
  customer_fax_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Customer.customer_fax)
}
inline ::std::string* Customer::mutable_customer_fax() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Customer.customer_fax)
  return customer_fax_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_customer_fax() {
  // @@protoc_insertion_point(field_release:efdi.Customer.customer_fax)
  
  return customer_fax_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_customer_fax(::std::string* customer_fax) {
  if (customer_fax != NULL) {
    
  } else {
    
  }
  customer_fax_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_fax);
  // @@protoc_insertion_point(field_set_allocated:efdi.Customer.customer_fax)
}

// string customer_email = 13;
inline void Customer::clear_customer_email() {
  customer_email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Customer::customer_email() const {
  // @@protoc_insertion_point(field_get:efdi.Customer.customer_email)
  return customer_email_.GetNoArena();
}
inline void Customer::set_customer_email(const ::std::string& value) {
  
  customer_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Customer.customer_email)
}
#if LANG_CXX11
inline void Customer::set_customer_email(::std::string&& value) {
  
  customer_email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Customer.customer_email)
}
#endif
inline void Customer::set_customer_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  customer_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Customer.customer_email)
}
inline void Customer::set_customer_email(const char* value, size_t size) {
  
  customer_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Customer.customer_email)
}
inline ::std::string* Customer::mutable_customer_email() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Customer.customer_email)
  return customer_email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Customer::release_customer_email() {
  // @@protoc_insertion_point(field_release:efdi.Customer.customer_email)
  
  return customer_email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Customer::set_allocated_customer_email(::std::string* customer_email) {
  if (customer_email != NULL) {
    
  } else {
    
  }
  customer_email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_email);
  // @@protoc_insertion_point(field_set_allocated:efdi.Customer.customer_email)
}

// repeated .google.protobuf.Any extension = 2048;
inline int Customer::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& Customer::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Customer.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* Customer::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Customer.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* Customer::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.Customer.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
Customer::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Customer.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
Customer::extension() const {
  // @@protoc_insertion_point(field_list:efdi.Customer.extension)
  return extension_;
}

// -------------------------------------------------------------------

// DataLogTrigger

// uint32 data_log_ddi = 1;
inline void DataLogTrigger::clear_data_log_ddi() {
  data_log_ddi_ = 0u;
}
inline ::google::protobuf::uint32 DataLogTrigger::data_log_ddi() const {
  // @@protoc_insertion_point(field_get:efdi.DataLogTrigger.data_log_ddi)
  return data_log_ddi_;
}
inline void DataLogTrigger::set_data_log_ddi(::google::protobuf::uint32 value) {
  
  data_log_ddi_ = value;
  // @@protoc_insertion_point(field_set:efdi.DataLogTrigger.data_log_ddi)
}

// uint32 data_log_method = 2;
inline void DataLogTrigger::clear_data_log_method() {
  data_log_method_ = 0u;
}
inline ::google::protobuf::uint32 DataLogTrigger::data_log_method() const {
  // @@protoc_insertion_point(field_get:efdi.DataLogTrigger.data_log_method)
  return data_log_method_;
}
inline void DataLogTrigger::set_data_log_method(::google::protobuf::uint32 value) {
  
  data_log_method_ = value;
  // @@protoc_insertion_point(field_set:efdi.DataLogTrigger.data_log_method)
}

// sint64 data_log_distance_interval = 3;
inline void DataLogTrigger::clear_data_log_distance_interval() {
  data_log_distance_interval_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DataLogTrigger::data_log_distance_interval() const {
  // @@protoc_insertion_point(field_get:efdi.DataLogTrigger.data_log_distance_interval)
  return data_log_distance_interval_;
}
inline void DataLogTrigger::set_data_log_distance_interval(::google::protobuf::int64 value) {
  
  data_log_distance_interval_ = value;
  // @@protoc_insertion_point(field_set:efdi.DataLogTrigger.data_log_distance_interval)
}

// sint64 data_log_time_interval = 4;
inline void DataLogTrigger::clear_data_log_time_interval() {
  data_log_time_interval_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DataLogTrigger::data_log_time_interval() const {
  // @@protoc_insertion_point(field_get:efdi.DataLogTrigger.data_log_time_interval)
  return data_log_time_interval_;
}
inline void DataLogTrigger::set_data_log_time_interval(::google::protobuf::int64 value) {
  
  data_log_time_interval_ = value;
  // @@protoc_insertion_point(field_set:efdi.DataLogTrigger.data_log_time_interval)
}

// sint64 data_log_threshold_minumum = 5;
inline void DataLogTrigger::clear_data_log_threshold_minumum() {
  data_log_threshold_minumum_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DataLogTrigger::data_log_threshold_minumum() const {
  // @@protoc_insertion_point(field_get:efdi.DataLogTrigger.data_log_threshold_minumum)
  return data_log_threshold_minumum_;
}
inline void DataLogTrigger::set_data_log_threshold_minumum(::google::protobuf::int64 value) {
  
  data_log_threshold_minumum_ = value;
  // @@protoc_insertion_point(field_set:efdi.DataLogTrigger.data_log_threshold_minumum)
}

// sint64 data_log_threshold_maximum = 6;
inline void DataLogTrigger::clear_data_log_threshold_maximum() {
  data_log_threshold_maximum_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DataLogTrigger::data_log_threshold_maximum() const {
  // @@protoc_insertion_point(field_get:efdi.DataLogTrigger.data_log_threshold_maximum)
  return data_log_threshold_maximum_;
}
inline void DataLogTrigger::set_data_log_threshold_maximum(::google::protobuf::int64 value) {
  
  data_log_threshold_maximum_ = value;
  // @@protoc_insertion_point(field_set:efdi.DataLogTrigger.data_log_threshold_maximum)
}

// sint64 data_log_threshold_change = 7;
inline void DataLogTrigger::clear_data_log_threshold_change() {
  data_log_threshold_change_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DataLogTrigger::data_log_threshold_change() const {
  // @@protoc_insertion_point(field_get:efdi.DataLogTrigger.data_log_threshold_change)
  return data_log_threshold_change_;
}
inline void DataLogTrigger::set_data_log_threshold_change(::google::protobuf::int64 value) {
  
  data_log_threshold_change_ = value;
  // @@protoc_insertion_point(field_set:efdi.DataLogTrigger.data_log_threshold_change)
}

// .efdi.UID device_element_id_ref = 8;
inline bool DataLogTrigger::has_device_element_id_ref() const {
  return this != internal_default_instance() && device_element_id_ref_ != NULL;
}
inline void DataLogTrigger::clear_device_element_id_ref() {
  if (GetArenaNoVirtual() == NULL && device_element_id_ref_ != NULL) {
    delete device_element_id_ref_;
  }
  device_element_id_ref_ = NULL;
}
inline const ::efdi::UID& DataLogTrigger::device_element_id_ref() const {
  const ::efdi::UID* p = device_element_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.DataLogTrigger.device_element_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* DataLogTrigger::release_device_element_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.DataLogTrigger.device_element_id_ref)
  
  ::efdi::UID* temp = device_element_id_ref_;
  device_element_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* DataLogTrigger::mutable_device_element_id_ref() {
  
  if (device_element_id_ref_ == NULL) {
    device_element_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.DataLogTrigger.device_element_id_ref)
  return device_element_id_ref_;
}
inline void DataLogTrigger::set_allocated_device_element_id_ref(::efdi::UID* device_element_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete device_element_id_ref_;
  }
  if (device_element_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_element_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_element_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  device_element_id_ref_ = device_element_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.DataLogTrigger.device_element_id_ref)
}

// .efdi.UID value_presentation_id_ref = 9;
inline bool DataLogTrigger::has_value_presentation_id_ref() const {
  return this != internal_default_instance() && value_presentation_id_ref_ != NULL;
}
inline void DataLogTrigger::clear_value_presentation_id_ref() {
  if (GetArenaNoVirtual() == NULL && value_presentation_id_ref_ != NULL) {
    delete value_presentation_id_ref_;
  }
  value_presentation_id_ref_ = NULL;
}
inline const ::efdi::UID& DataLogTrigger::value_presentation_id_ref() const {
  const ::efdi::UID* p = value_presentation_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.DataLogTrigger.value_presentation_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* DataLogTrigger::release_value_presentation_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.DataLogTrigger.value_presentation_id_ref)
  
  ::efdi::UID* temp = value_presentation_id_ref_;
  value_presentation_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* DataLogTrigger::mutable_value_presentation_id_ref() {
  
  if (value_presentation_id_ref_ == NULL) {
    value_presentation_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.DataLogTrigger.value_presentation_id_ref)
  return value_presentation_id_ref_;
}
inline void DataLogTrigger::set_allocated_value_presentation_id_ref(::efdi::UID* value_presentation_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_presentation_id_ref_;
  }
  if (value_presentation_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_presentation_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_presentation_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  value_presentation_id_ref_ = value_presentation_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.DataLogTrigger.value_presentation_id_ref)
}

// uint64 data_log_pgn = 10;
inline void DataLogTrigger::clear_data_log_pgn() {
  data_log_pgn_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DataLogTrigger::data_log_pgn() const {
  // @@protoc_insertion_point(field_get:efdi.DataLogTrigger.data_log_pgn)
  return data_log_pgn_;
}
inline void DataLogTrigger::set_data_log_pgn(::google::protobuf::uint64 value) {
  
  data_log_pgn_ = value;
  // @@protoc_insertion_point(field_set:efdi.DataLogTrigger.data_log_pgn)
}

// uint32 data_log_pgn_start_bit = 11;
inline void DataLogTrigger::clear_data_log_pgn_start_bit() {
  data_log_pgn_start_bit_ = 0u;
}
inline ::google::protobuf::uint32 DataLogTrigger::data_log_pgn_start_bit() const {
  // @@protoc_insertion_point(field_get:efdi.DataLogTrigger.data_log_pgn_start_bit)
  return data_log_pgn_start_bit_;
}
inline void DataLogTrigger::set_data_log_pgn_start_bit(::google::protobuf::uint32 value) {
  
  data_log_pgn_start_bit_ = value;
  // @@protoc_insertion_point(field_set:efdi.DataLogTrigger.data_log_pgn_start_bit)
}

// uint32 data_log_pgn_stop_bit = 12;
inline void DataLogTrigger::clear_data_log_pgn_stop_bit() {
  data_log_pgn_stop_bit_ = 0u;
}
inline ::google::protobuf::uint32 DataLogTrigger::data_log_pgn_stop_bit() const {
  // @@protoc_insertion_point(field_get:efdi.DataLogTrigger.data_log_pgn_stop_bit)
  return data_log_pgn_stop_bit_;
}
inline void DataLogTrigger::set_data_log_pgn_stop_bit(::google::protobuf::uint32 value) {
  
  data_log_pgn_stop_bit_ = value;
  // @@protoc_insertion_point(field_set:efdi.DataLogTrigger.data_log_pgn_stop_bit)
}

// repeated .google.protobuf.Any extension = 2048;
inline int DataLogTrigger::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& DataLogTrigger::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.DataLogTrigger.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* DataLogTrigger::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.DataLogTrigger.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* DataLogTrigger::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.DataLogTrigger.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
DataLogTrigger::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.DataLogTrigger.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
DataLogTrigger::extension() const {
  // @@protoc_insertion_point(field_list:efdi.DataLogTrigger.extension)
  return extension_;
}

// -------------------------------------------------------------------

// DataLogValue

// uint32 process_data_ddi = 1;
inline void DataLogValue::clear_process_data_ddi() {
  process_data_ddi_ = 0u;
}
inline ::google::protobuf::uint32 DataLogValue::process_data_ddi() const {
  // @@protoc_insertion_point(field_get:efdi.DataLogValue.process_data_ddi)
  return process_data_ddi_;
}
inline void DataLogValue::set_process_data_ddi(::google::protobuf::uint32 value) {
  
  process_data_ddi_ = value;
  // @@protoc_insertion_point(field_set:efdi.DataLogValue.process_data_ddi)
}

// sint64 process_data_value = 2;
inline void DataLogValue::clear_process_data_value() {
  process_data_value_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DataLogValue::process_data_value() const {
  // @@protoc_insertion_point(field_get:efdi.DataLogValue.process_data_value)
  return process_data_value_;
}
inline void DataLogValue::set_process_data_value(::google::protobuf::int64 value) {
  
  process_data_value_ = value;
  // @@protoc_insertion_point(field_set:efdi.DataLogValue.process_data_value)
}

// .efdi.UID device_element_id_ref = 3;
inline bool DataLogValue::has_device_element_id_ref() const {
  return this != internal_default_instance() && device_element_id_ref_ != NULL;
}
inline void DataLogValue::clear_device_element_id_ref() {
  if (GetArenaNoVirtual() == NULL && device_element_id_ref_ != NULL) {
    delete device_element_id_ref_;
  }
  device_element_id_ref_ = NULL;
}
inline const ::efdi::UID& DataLogValue::device_element_id_ref() const {
  const ::efdi::UID* p = device_element_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.DataLogValue.device_element_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* DataLogValue::release_device_element_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.DataLogValue.device_element_id_ref)
  
  ::efdi::UID* temp = device_element_id_ref_;
  device_element_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* DataLogValue::mutable_device_element_id_ref() {
  
  if (device_element_id_ref_ == NULL) {
    device_element_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.DataLogValue.device_element_id_ref)
  return device_element_id_ref_;
}
inline void DataLogValue::set_allocated_device_element_id_ref(::efdi::UID* device_element_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete device_element_id_ref_;
  }
  if (device_element_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_element_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_element_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  device_element_id_ref_ = device_element_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.DataLogValue.device_element_id_ref)
}

// uint64 data_log_pgn = 4;
inline void DataLogValue::clear_data_log_pgn() {
  data_log_pgn_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DataLogValue::data_log_pgn() const {
  // @@protoc_insertion_point(field_get:efdi.DataLogValue.data_log_pgn)
  return data_log_pgn_;
}
inline void DataLogValue::set_data_log_pgn(::google::protobuf::uint64 value) {
  
  data_log_pgn_ = value;
  // @@protoc_insertion_point(field_set:efdi.DataLogValue.data_log_pgn)
}

// uint32 data_log_pgn_start_bit = 5;
inline void DataLogValue::clear_data_log_pgn_start_bit() {
  data_log_pgn_start_bit_ = 0u;
}
inline ::google::protobuf::uint32 DataLogValue::data_log_pgn_start_bit() const {
  // @@protoc_insertion_point(field_get:efdi.DataLogValue.data_log_pgn_start_bit)
  return data_log_pgn_start_bit_;
}
inline void DataLogValue::set_data_log_pgn_start_bit(::google::protobuf::uint32 value) {
  
  data_log_pgn_start_bit_ = value;
  // @@protoc_insertion_point(field_set:efdi.DataLogValue.data_log_pgn_start_bit)
}

// uint32 data_log_pgn_stop_bit = 6;
inline void DataLogValue::clear_data_log_pgn_stop_bit() {
  data_log_pgn_stop_bit_ = 0u;
}
inline ::google::protobuf::uint32 DataLogValue::data_log_pgn_stop_bit() const {
  // @@protoc_insertion_point(field_get:efdi.DataLogValue.data_log_pgn_stop_bit)
  return data_log_pgn_stop_bit_;
}
inline void DataLogValue::set_data_log_pgn_stop_bit(::google::protobuf::uint32 value) {
  
  data_log_pgn_stop_bit_ = value;
  // @@protoc_insertion_point(field_set:efdi.DataLogValue.data_log_pgn_stop_bit)
}

// repeated .google.protobuf.Any extension = 2048;
inline int DataLogValue::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& DataLogValue::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.DataLogValue.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* DataLogValue::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.DataLogValue.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* DataLogValue::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.DataLogValue.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
DataLogValue::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.DataLogValue.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
DataLogValue::extension() const {
  // @@protoc_insertion_point(field_list:efdi.DataLogValue.extension)
  return extension_;
}

// -------------------------------------------------------------------

// DataLogValueIntOnly

// uint32 process_data_ddi = 1;
inline void DataLogValueIntOnly::clear_process_data_ddi() {
  process_data_ddi_ = 0u;
}
inline ::google::protobuf::uint32 DataLogValueIntOnly::process_data_ddi() const {
  // @@protoc_insertion_point(field_get:efdi.DataLogValueIntOnly.process_data_ddi)
  return process_data_ddi_;
}
inline void DataLogValueIntOnly::set_process_data_ddi(::google::protobuf::uint32 value) {
  
  process_data_ddi_ = value;
  // @@protoc_insertion_point(field_set:efdi.DataLogValueIntOnly.process_data_ddi)
}

// sint64 process_data_value = 2;
inline void DataLogValueIntOnly::clear_process_data_value() {
  process_data_value_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DataLogValueIntOnly::process_data_value() const {
  // @@protoc_insertion_point(field_get:efdi.DataLogValueIntOnly.process_data_value)
  return process_data_value_;
}
inline void DataLogValueIntOnly::set_process_data_value(::google::protobuf::int64 value) {
  
  process_data_value_ = value;
  // @@protoc_insertion_point(field_set:efdi.DataLogValueIntOnly.process_data_value)
}

// sint64 device_element_id_ref = 3;
inline void DataLogValueIntOnly::clear_device_element_id_ref() {
  device_element_id_ref_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DataLogValueIntOnly::device_element_id_ref() const {
  // @@protoc_insertion_point(field_get:efdi.DataLogValueIntOnly.device_element_id_ref)
  return device_element_id_ref_;
}
inline void DataLogValueIntOnly::set_device_element_id_ref(::google::protobuf::int64 value) {
  
  device_element_id_ref_ = value;
  // @@protoc_insertion_point(field_set:efdi.DataLogValueIntOnly.device_element_id_ref)
}

// uint64 data_log_pgn = 4;
inline void DataLogValueIntOnly::clear_data_log_pgn() {
  data_log_pgn_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DataLogValueIntOnly::data_log_pgn() const {
  // @@protoc_insertion_point(field_get:efdi.DataLogValueIntOnly.data_log_pgn)
  return data_log_pgn_;
}
inline void DataLogValueIntOnly::set_data_log_pgn(::google::protobuf::uint64 value) {
  
  data_log_pgn_ = value;
  // @@protoc_insertion_point(field_set:efdi.DataLogValueIntOnly.data_log_pgn)
}

// uint32 data_log_pgn_start_bit = 5;
inline void DataLogValueIntOnly::clear_data_log_pgn_start_bit() {
  data_log_pgn_start_bit_ = 0u;
}
inline ::google::protobuf::uint32 DataLogValueIntOnly::data_log_pgn_start_bit() const {
  // @@protoc_insertion_point(field_get:efdi.DataLogValueIntOnly.data_log_pgn_start_bit)
  return data_log_pgn_start_bit_;
}
inline void DataLogValueIntOnly::set_data_log_pgn_start_bit(::google::protobuf::uint32 value) {
  
  data_log_pgn_start_bit_ = value;
  // @@protoc_insertion_point(field_set:efdi.DataLogValueIntOnly.data_log_pgn_start_bit)
}

// uint32 data_log_pgn_stop_bit = 6;
inline void DataLogValueIntOnly::clear_data_log_pgn_stop_bit() {
  data_log_pgn_stop_bit_ = 0u;
}
inline ::google::protobuf::uint32 DataLogValueIntOnly::data_log_pgn_stop_bit() const {
  // @@protoc_insertion_point(field_get:efdi.DataLogValueIntOnly.data_log_pgn_stop_bit)
  return data_log_pgn_stop_bit_;
}
inline void DataLogValueIntOnly::set_data_log_pgn_stop_bit(::google::protobuf::uint32 value) {
  
  data_log_pgn_stop_bit_ = value;
  // @@protoc_insertion_point(field_set:efdi.DataLogValueIntOnly.data_log_pgn_stop_bit)
}

// repeated .google.protobuf.Any extension = 2048;
inline int DataLogValueIntOnly::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& DataLogValueIntOnly::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.DataLogValueIntOnly.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* DataLogValueIntOnly::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.DataLogValueIntOnly.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* DataLogValueIntOnly::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.DataLogValueIntOnly.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
DataLogValueIntOnly::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.DataLogValueIntOnly.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
DataLogValueIntOnly::extension() const {
  // @@protoc_insertion_point(field_list:efdi.DataLogValueIntOnly.extension)
  return extension_;
}

// -------------------------------------------------------------------

// Device

// .efdi.UID device_id = 1;
inline bool Device::has_device_id() const {
  return this != internal_default_instance() && device_id_ != NULL;
}
inline void Device::clear_device_id() {
  if (GetArenaNoVirtual() == NULL && device_id_ != NULL) {
    delete device_id_;
  }
  device_id_ = NULL;
}
inline const ::efdi::UID& Device::device_id() const {
  const ::efdi::UID* p = device_id_;
  // @@protoc_insertion_point(field_get:efdi.Device.device_id)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* Device::release_device_id() {
  // @@protoc_insertion_point(field_release:efdi.Device.device_id)
  
  ::efdi::UID* temp = device_id_;
  device_id_ = NULL;
  return temp;
}
inline ::efdi::UID* Device::mutable_device_id() {
  
  if (device_id_ == NULL) {
    device_id_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Device.device_id)
  return device_id_;
}
inline void Device::set_allocated_device_id(::efdi::UID* device_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete device_id_;
  }
  if (device_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_id, submessage_arena);
    }
    
  } else {
    
  }
  device_id_ = device_id;
  // @@protoc_insertion_point(field_set_allocated:efdi.Device.device_id)
}

// string device_designator = 2;
inline void Device::clear_device_designator() {
  device_designator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::device_designator() const {
  // @@protoc_insertion_point(field_get:efdi.Device.device_designator)
  return device_designator_.GetNoArena();
}
inline void Device::set_device_designator(const ::std::string& value) {
  
  device_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Device.device_designator)
}
#if LANG_CXX11
inline void Device::set_device_designator(::std::string&& value) {
  
  device_designator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Device.device_designator)
}
#endif
inline void Device::set_device_designator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Device.device_designator)
}
inline void Device::set_device_designator(const char* value, size_t size) {
  
  device_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Device.device_designator)
}
inline ::std::string* Device::mutable_device_designator() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Device.device_designator)
  return device_designator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_device_designator() {
  // @@protoc_insertion_point(field_release:efdi.Device.device_designator)
  
  return device_designator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_device_designator(::std::string* device_designator) {
  if (device_designator != NULL) {
    
  } else {
    
  }
  device_designator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_designator);
  // @@protoc_insertion_point(field_set_allocated:efdi.Device.device_designator)
}

// string device_software_version = 3;
inline void Device::clear_device_software_version() {
  device_software_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::device_software_version() const {
  // @@protoc_insertion_point(field_get:efdi.Device.device_software_version)
  return device_software_version_.GetNoArena();
}
inline void Device::set_device_software_version(const ::std::string& value) {
  
  device_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Device.device_software_version)
}
#if LANG_CXX11
inline void Device::set_device_software_version(::std::string&& value) {
  
  device_software_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Device.device_software_version)
}
#endif
inline void Device::set_device_software_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Device.device_software_version)
}
inline void Device::set_device_software_version(const char* value, size_t size) {
  
  device_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Device.device_software_version)
}
inline ::std::string* Device::mutable_device_software_version() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Device.device_software_version)
  return device_software_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_device_software_version() {
  // @@protoc_insertion_point(field_release:efdi.Device.device_software_version)
  
  return device_software_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_device_software_version(::std::string* device_software_version) {
  if (device_software_version != NULL) {
    
  } else {
    
  }
  device_software_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_software_version);
  // @@protoc_insertion_point(field_set_allocated:efdi.Device.device_software_version)
}

// bytes client_name = 4;
inline void Device::clear_client_name() {
  client_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::client_name() const {
  // @@protoc_insertion_point(field_get:efdi.Device.client_name)
  return client_name_.GetNoArena();
}
inline void Device::set_client_name(const ::std::string& value) {
  
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Device.client_name)
}
#if LANG_CXX11
inline void Device::set_client_name(::std::string&& value) {
  
  client_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Device.client_name)
}
#endif
inline void Device::set_client_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Device.client_name)
}
inline void Device::set_client_name(const void* value, size_t size) {
  
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Device.client_name)
}
inline ::std::string* Device::mutable_client_name() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Device.client_name)
  return client_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_client_name() {
  // @@protoc_insertion_point(field_release:efdi.Device.client_name)
  
  return client_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_client_name(::std::string* client_name) {
  if (client_name != NULL) {
    
  } else {
    
  }
  client_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_name);
  // @@protoc_insertion_point(field_set_allocated:efdi.Device.client_name)
}

// string device_serial_number = 5;
inline void Device::clear_device_serial_number() {
  device_serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::device_serial_number() const {
  // @@protoc_insertion_point(field_get:efdi.Device.device_serial_number)
  return device_serial_number_.GetNoArena();
}
inline void Device::set_device_serial_number(const ::std::string& value) {
  
  device_serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Device.device_serial_number)
}
#if LANG_CXX11
inline void Device::set_device_serial_number(::std::string&& value) {
  
  device_serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Device.device_serial_number)
}
#endif
inline void Device::set_device_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Device.device_serial_number)
}
inline void Device::set_device_serial_number(const char* value, size_t size) {
  
  device_serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Device.device_serial_number)
}
inline ::std::string* Device::mutable_device_serial_number() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Device.device_serial_number)
  return device_serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_device_serial_number() {
  // @@protoc_insertion_point(field_release:efdi.Device.device_serial_number)
  
  return device_serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_device_serial_number(::std::string* device_serial_number) {
  if (device_serial_number != NULL) {
    
  } else {
    
  }
  device_serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_serial_number);
  // @@protoc_insertion_point(field_set_allocated:efdi.Device.device_serial_number)
}

// bytes device_structure_label = 6;
inline void Device::clear_device_structure_label() {
  device_structure_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::device_structure_label() const {
  // @@protoc_insertion_point(field_get:efdi.Device.device_structure_label)
  return device_structure_label_.GetNoArena();
}
inline void Device::set_device_structure_label(const ::std::string& value) {
  
  device_structure_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Device.device_structure_label)
}
#if LANG_CXX11
inline void Device::set_device_structure_label(::std::string&& value) {
  
  device_structure_label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Device.device_structure_label)
}
#endif
inline void Device::set_device_structure_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_structure_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Device.device_structure_label)
}
inline void Device::set_device_structure_label(const void* value, size_t size) {
  
  device_structure_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Device.device_structure_label)
}
inline ::std::string* Device::mutable_device_structure_label() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Device.device_structure_label)
  return device_structure_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_device_structure_label() {
  // @@protoc_insertion_point(field_release:efdi.Device.device_structure_label)
  
  return device_structure_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_device_structure_label(::std::string* device_structure_label) {
  if (device_structure_label != NULL) {
    
  } else {
    
  }
  device_structure_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_structure_label);
  // @@protoc_insertion_point(field_set_allocated:efdi.Device.device_structure_label)
}

// bytes device_localization_label = 7;
inline void Device::clear_device_localization_label() {
  device_localization_label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::device_localization_label() const {
  // @@protoc_insertion_point(field_get:efdi.Device.device_localization_label)
  return device_localization_label_.GetNoArena();
}
inline void Device::set_device_localization_label(const ::std::string& value) {
  
  device_localization_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Device.device_localization_label)
}
#if LANG_CXX11
inline void Device::set_device_localization_label(::std::string&& value) {
  
  device_localization_label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Device.device_localization_label)
}
#endif
inline void Device::set_device_localization_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_localization_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Device.device_localization_label)
}
inline void Device::set_device_localization_label(const void* value, size_t size) {
  
  device_localization_label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Device.device_localization_label)
}
inline ::std::string* Device::mutable_device_localization_label() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Device.device_localization_label)
  return device_localization_label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_device_localization_label() {
  // @@protoc_insertion_point(field_release:efdi.Device.device_localization_label)
  
  return device_localization_label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_device_localization_label(::std::string* device_localization_label) {
  if (device_localization_label != NULL) {
    
  } else {
    
  }
  device_localization_label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_localization_label);
  // @@protoc_insertion_point(field_set_allocated:efdi.Device.device_localization_label)
}

// repeated .efdi.DeviceElement device_element = 8;
inline int Device::device_element_size() const {
  return device_element_.size();
}
inline void Device::clear_device_element() {
  device_element_.Clear();
}
inline const ::efdi::DeviceElement& Device::device_element(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Device.device_element)
  return device_element_.Get(index);
}
inline ::efdi::DeviceElement* Device::mutable_device_element(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Device.device_element)
  return device_element_.Mutable(index);
}
inline ::efdi::DeviceElement* Device::add_device_element() {
  // @@protoc_insertion_point(field_add:efdi.Device.device_element)
  return device_element_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::DeviceElement >*
Device::mutable_device_element() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Device.device_element)
  return &device_element_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::DeviceElement >&
Device::device_element() const {
  // @@protoc_insertion_point(field_list:efdi.Device.device_element)
  return device_element_;
}

// repeated .efdi.DeviceProcessData device_process_data = 9;
inline int Device::device_process_data_size() const {
  return device_process_data_.size();
}
inline void Device::clear_device_process_data() {
  device_process_data_.Clear();
}
inline const ::efdi::DeviceProcessData& Device::device_process_data(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Device.device_process_data)
  return device_process_data_.Get(index);
}
inline ::efdi::DeviceProcessData* Device::mutable_device_process_data(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Device.device_process_data)
  return device_process_data_.Mutable(index);
}
inline ::efdi::DeviceProcessData* Device::add_device_process_data() {
  // @@protoc_insertion_point(field_add:efdi.Device.device_process_data)
  return device_process_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::DeviceProcessData >*
Device::mutable_device_process_data() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Device.device_process_data)
  return &device_process_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::DeviceProcessData >&
Device::device_process_data() const {
  // @@protoc_insertion_point(field_list:efdi.Device.device_process_data)
  return device_process_data_;
}

// repeated .efdi.DeviceProperty device_property = 10;
inline int Device::device_property_size() const {
  return device_property_.size();
}
inline void Device::clear_device_property() {
  device_property_.Clear();
}
inline const ::efdi::DeviceProperty& Device::device_property(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Device.device_property)
  return device_property_.Get(index);
}
inline ::efdi::DeviceProperty* Device::mutable_device_property(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Device.device_property)
  return device_property_.Mutable(index);
}
inline ::efdi::DeviceProperty* Device::add_device_property() {
  // @@protoc_insertion_point(field_add:efdi.Device.device_property)
  return device_property_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::DeviceProperty >*
Device::mutable_device_property() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Device.device_property)
  return &device_property_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::DeviceProperty >&
Device::device_property() const {
  // @@protoc_insertion_point(field_list:efdi.Device.device_property)
  return device_property_;
}

// repeated .efdi.DeviceValuePresentation device_value_presentation = 11;
inline int Device::device_value_presentation_size() const {
  return device_value_presentation_.size();
}
inline void Device::clear_device_value_presentation() {
  device_value_presentation_.Clear();
}
inline const ::efdi::DeviceValuePresentation& Device::device_value_presentation(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Device.device_value_presentation)
  return device_value_presentation_.Get(index);
}
inline ::efdi::DeviceValuePresentation* Device::mutable_device_value_presentation(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Device.device_value_presentation)
  return device_value_presentation_.Mutable(index);
}
inline ::efdi::DeviceValuePresentation* Device::add_device_value_presentation() {
  // @@protoc_insertion_point(field_add:efdi.Device.device_value_presentation)
  return device_value_presentation_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::DeviceValuePresentation >*
Device::mutable_device_value_presentation() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Device.device_value_presentation)
  return &device_value_presentation_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::DeviceValuePresentation >&
Device::device_value_presentation() const {
  // @@protoc_insertion_point(field_list:efdi.Device.device_value_presentation)
  return device_value_presentation_;
}

// repeated .google.protobuf.Any extension = 2048;
inline int Device::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& Device::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Device.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* Device::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Device.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* Device::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.Device.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
Device::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Device.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
Device::extension() const {
  // @@protoc_insertion_point(field_list:efdi.Device.extension)
  return extension_;
}

// -------------------------------------------------------------------

// DeviceAllocation

// bytes client_name_value = 1;
inline void DeviceAllocation::clear_client_name_value() {
  client_name_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceAllocation::client_name_value() const {
  // @@protoc_insertion_point(field_get:efdi.DeviceAllocation.client_name_value)
  return client_name_value_.GetNoArena();
}
inline void DeviceAllocation::set_client_name_value(const ::std::string& value) {
  
  client_name_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.DeviceAllocation.client_name_value)
}
#if LANG_CXX11
inline void DeviceAllocation::set_client_name_value(::std::string&& value) {
  
  client_name_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.DeviceAllocation.client_name_value)
}
#endif
inline void DeviceAllocation::set_client_name_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_name_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.DeviceAllocation.client_name_value)
}
inline void DeviceAllocation::set_client_name_value(const void* value, size_t size) {
  
  client_name_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.DeviceAllocation.client_name_value)
}
inline ::std::string* DeviceAllocation::mutable_client_name_value() {
  
  // @@protoc_insertion_point(field_mutable:efdi.DeviceAllocation.client_name_value)
  return client_name_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceAllocation::release_client_name_value() {
  // @@protoc_insertion_point(field_release:efdi.DeviceAllocation.client_name_value)
  
  return client_name_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceAllocation::set_allocated_client_name_value(::std::string* client_name_value) {
  if (client_name_value != NULL) {
    
  } else {
    
  }
  client_name_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_name_value);
  // @@protoc_insertion_point(field_set_allocated:efdi.DeviceAllocation.client_name_value)
}

// bytes client_name_mask = 2;
inline void DeviceAllocation::clear_client_name_mask() {
  client_name_mask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceAllocation::client_name_mask() const {
  // @@protoc_insertion_point(field_get:efdi.DeviceAllocation.client_name_mask)
  return client_name_mask_.GetNoArena();
}
inline void DeviceAllocation::set_client_name_mask(const ::std::string& value) {
  
  client_name_mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.DeviceAllocation.client_name_mask)
}
#if LANG_CXX11
inline void DeviceAllocation::set_client_name_mask(::std::string&& value) {
  
  client_name_mask_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.DeviceAllocation.client_name_mask)
}
#endif
inline void DeviceAllocation::set_client_name_mask(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_name_mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.DeviceAllocation.client_name_mask)
}
inline void DeviceAllocation::set_client_name_mask(const void* value, size_t size) {
  
  client_name_mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.DeviceAllocation.client_name_mask)
}
inline ::std::string* DeviceAllocation::mutable_client_name_mask() {
  
  // @@protoc_insertion_point(field_mutable:efdi.DeviceAllocation.client_name_mask)
  return client_name_mask_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceAllocation::release_client_name_mask() {
  // @@protoc_insertion_point(field_release:efdi.DeviceAllocation.client_name_mask)
  
  return client_name_mask_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceAllocation::set_allocated_client_name_mask(::std::string* client_name_mask) {
  if (client_name_mask != NULL) {
    
  } else {
    
  }
  client_name_mask_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_name_mask);
  // @@protoc_insertion_point(field_set_allocated:efdi.DeviceAllocation.client_name_mask)
}

// .efdi.UID device_id_ref = 3;
inline bool DeviceAllocation::has_device_id_ref() const {
  return this != internal_default_instance() && device_id_ref_ != NULL;
}
inline void DeviceAllocation::clear_device_id_ref() {
  if (GetArenaNoVirtual() == NULL && device_id_ref_ != NULL) {
    delete device_id_ref_;
  }
  device_id_ref_ = NULL;
}
inline const ::efdi::UID& DeviceAllocation::device_id_ref() const {
  const ::efdi::UID* p = device_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.DeviceAllocation.device_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* DeviceAllocation::release_device_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.DeviceAllocation.device_id_ref)
  
  ::efdi::UID* temp = device_id_ref_;
  device_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* DeviceAllocation::mutable_device_id_ref() {
  
  if (device_id_ref_ == NULL) {
    device_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.DeviceAllocation.device_id_ref)
  return device_id_ref_;
}
inline void DeviceAllocation::set_allocated_device_id_ref(::efdi::UID* device_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete device_id_ref_;
  }
  if (device_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  device_id_ref_ = device_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.DeviceAllocation.device_id_ref)
}

// .efdi.AllocationStamp allocation_stamp = 4;
inline bool DeviceAllocation::has_allocation_stamp() const {
  return this != internal_default_instance() && allocation_stamp_ != NULL;
}
inline void DeviceAllocation::clear_allocation_stamp() {
  if (GetArenaNoVirtual() == NULL && allocation_stamp_ != NULL) {
    delete allocation_stamp_;
  }
  allocation_stamp_ = NULL;
}
inline const ::efdi::AllocationStamp& DeviceAllocation::allocation_stamp() const {
  const ::efdi::AllocationStamp* p = allocation_stamp_;
  // @@protoc_insertion_point(field_get:efdi.DeviceAllocation.allocation_stamp)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::AllocationStamp*>(
      &::efdi::_AllocationStamp_default_instance_);
}
inline ::efdi::AllocationStamp* DeviceAllocation::release_allocation_stamp() {
  // @@protoc_insertion_point(field_release:efdi.DeviceAllocation.allocation_stamp)
  
  ::efdi::AllocationStamp* temp = allocation_stamp_;
  allocation_stamp_ = NULL;
  return temp;
}
inline ::efdi::AllocationStamp* DeviceAllocation::mutable_allocation_stamp() {
  
  if (allocation_stamp_ == NULL) {
    allocation_stamp_ = new ::efdi::AllocationStamp;
  }
  // @@protoc_insertion_point(field_mutable:efdi.DeviceAllocation.allocation_stamp)
  return allocation_stamp_;
}
inline void DeviceAllocation::set_allocated_allocation_stamp(::efdi::AllocationStamp* allocation_stamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete allocation_stamp_;
  }
  if (allocation_stamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      allocation_stamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, allocation_stamp, submessage_arena);
    }
    
  } else {
    
  }
  allocation_stamp_ = allocation_stamp;
  // @@protoc_insertion_point(field_set_allocated:efdi.DeviceAllocation.allocation_stamp)
}

// repeated .google.protobuf.Any extension = 2048;
inline int DeviceAllocation::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& DeviceAllocation::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.DeviceAllocation.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* DeviceAllocation::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.DeviceAllocation.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* DeviceAllocation::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.DeviceAllocation.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
DeviceAllocation::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.DeviceAllocation.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
DeviceAllocation::extension() const {
  // @@protoc_insertion_point(field_list:efdi.DeviceAllocation.extension)
  return extension_;
}

// -------------------------------------------------------------------

// DeviceElement

// .efdi.UID device_element_id = 1;
inline bool DeviceElement::has_device_element_id() const {
  return this != internal_default_instance() && device_element_id_ != NULL;
}
inline void DeviceElement::clear_device_element_id() {
  if (GetArenaNoVirtual() == NULL && device_element_id_ != NULL) {
    delete device_element_id_;
  }
  device_element_id_ = NULL;
}
inline const ::efdi::UID& DeviceElement::device_element_id() const {
  const ::efdi::UID* p = device_element_id_;
  // @@protoc_insertion_point(field_get:efdi.DeviceElement.device_element_id)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* DeviceElement::release_device_element_id() {
  // @@protoc_insertion_point(field_release:efdi.DeviceElement.device_element_id)
  
  ::efdi::UID* temp = device_element_id_;
  device_element_id_ = NULL;
  return temp;
}
inline ::efdi::UID* DeviceElement::mutable_device_element_id() {
  
  if (device_element_id_ == NULL) {
    device_element_id_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.DeviceElement.device_element_id)
  return device_element_id_;
}
inline void DeviceElement::set_allocated_device_element_id(::efdi::UID* device_element_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete device_element_id_;
  }
  if (device_element_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_element_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_element_id, submessage_arena);
    }
    
  } else {
    
  }
  device_element_id_ = device_element_id;
  // @@protoc_insertion_point(field_set_allocated:efdi.DeviceElement.device_element_id)
}

// uint32 device_element_object_id = 2;
inline void DeviceElement::clear_device_element_object_id() {
  device_element_object_id_ = 0u;
}
inline ::google::protobuf::uint32 DeviceElement::device_element_object_id() const {
  // @@protoc_insertion_point(field_get:efdi.DeviceElement.device_element_object_id)
  return device_element_object_id_;
}
inline void DeviceElement::set_device_element_object_id(::google::protobuf::uint32 value) {
  
  device_element_object_id_ = value;
  // @@protoc_insertion_point(field_set:efdi.DeviceElement.device_element_object_id)
}

// .efdi.DeviceElement.DeviceElementType device_element_type = 3;
inline void DeviceElement::clear_device_element_type() {
  device_element_type_ = 0;
}
inline ::efdi::DeviceElement_DeviceElementType DeviceElement::device_element_type() const {
  // @@protoc_insertion_point(field_get:efdi.DeviceElement.device_element_type)
  return static_cast< ::efdi::DeviceElement_DeviceElementType >(device_element_type_);
}
inline void DeviceElement::set_device_element_type(::efdi::DeviceElement_DeviceElementType value) {
  
  device_element_type_ = value;
  // @@protoc_insertion_point(field_set:efdi.DeviceElement.device_element_type)
}

// string device_element_designator = 4;
inline void DeviceElement::clear_device_element_designator() {
  device_element_designator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceElement::device_element_designator() const {
  // @@protoc_insertion_point(field_get:efdi.DeviceElement.device_element_designator)
  return device_element_designator_.GetNoArena();
}
inline void DeviceElement::set_device_element_designator(const ::std::string& value) {
  
  device_element_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.DeviceElement.device_element_designator)
}
#if LANG_CXX11
inline void DeviceElement::set_device_element_designator(::std::string&& value) {
  
  device_element_designator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.DeviceElement.device_element_designator)
}
#endif
inline void DeviceElement::set_device_element_designator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_element_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.DeviceElement.device_element_designator)
}
inline void DeviceElement::set_device_element_designator(const char* value, size_t size) {
  
  device_element_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.DeviceElement.device_element_designator)
}
inline ::std::string* DeviceElement::mutable_device_element_designator() {
  
  // @@protoc_insertion_point(field_mutable:efdi.DeviceElement.device_element_designator)
  return device_element_designator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceElement::release_device_element_designator() {
  // @@protoc_insertion_point(field_release:efdi.DeviceElement.device_element_designator)
  
  return device_element_designator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceElement::set_allocated_device_element_designator(::std::string* device_element_designator) {
  if (device_element_designator != NULL) {
    
  } else {
    
  }
  device_element_designator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_element_designator);
  // @@protoc_insertion_point(field_set_allocated:efdi.DeviceElement.device_element_designator)
}

// uint32 device_element_number = 5;
inline void DeviceElement::clear_device_element_number() {
  device_element_number_ = 0u;
}
inline ::google::protobuf::uint32 DeviceElement::device_element_number() const {
  // @@protoc_insertion_point(field_get:efdi.DeviceElement.device_element_number)
  return device_element_number_;
}
inline void DeviceElement::set_device_element_number(::google::protobuf::uint32 value) {
  
  device_element_number_ = value;
  // @@protoc_insertion_point(field_set:efdi.DeviceElement.device_element_number)
}

// uint32 parent_object_id = 6;
inline void DeviceElement::clear_parent_object_id() {
  parent_object_id_ = 0u;
}
inline ::google::protobuf::uint32 DeviceElement::parent_object_id() const {
  // @@protoc_insertion_point(field_get:efdi.DeviceElement.parent_object_id)
  return parent_object_id_;
}
inline void DeviceElement::set_parent_object_id(::google::protobuf::uint32 value) {
  
  parent_object_id_ = value;
  // @@protoc_insertion_point(field_set:efdi.DeviceElement.parent_object_id)
}

// repeated .efdi.DeviceObjectReference device_object_reference = 7;
inline int DeviceElement::device_object_reference_size() const {
  return device_object_reference_.size();
}
inline void DeviceElement::clear_device_object_reference() {
  device_object_reference_.Clear();
}
inline const ::efdi::DeviceObjectReference& DeviceElement::device_object_reference(int index) const {
  // @@protoc_insertion_point(field_get:efdi.DeviceElement.device_object_reference)
  return device_object_reference_.Get(index);
}
inline ::efdi::DeviceObjectReference* DeviceElement::mutable_device_object_reference(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.DeviceElement.device_object_reference)
  return device_object_reference_.Mutable(index);
}
inline ::efdi::DeviceObjectReference* DeviceElement::add_device_object_reference() {
  // @@protoc_insertion_point(field_add:efdi.DeviceElement.device_object_reference)
  return device_object_reference_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::DeviceObjectReference >*
DeviceElement::mutable_device_object_reference() {
  // @@protoc_insertion_point(field_mutable_list:efdi.DeviceElement.device_object_reference)
  return &device_object_reference_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::DeviceObjectReference >&
DeviceElement::device_object_reference() const {
  // @@protoc_insertion_point(field_list:efdi.DeviceElement.device_object_reference)
  return device_object_reference_;
}

// repeated .google.protobuf.Any extension = 2048;
inline int DeviceElement::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& DeviceElement::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.DeviceElement.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* DeviceElement::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.DeviceElement.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* DeviceElement::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.DeviceElement.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
DeviceElement::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.DeviceElement.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
DeviceElement::extension() const {
  // @@protoc_insertion_point(field_list:efdi.DeviceElement.extension)
  return extension_;
}

// -------------------------------------------------------------------

// DeviceObjectReference

// uint32 device_object_id = 1;
inline void DeviceObjectReference::clear_device_object_id() {
  device_object_id_ = 0u;
}
inline ::google::protobuf::uint32 DeviceObjectReference::device_object_id() const {
  // @@protoc_insertion_point(field_get:efdi.DeviceObjectReference.device_object_id)
  return device_object_id_;
}
inline void DeviceObjectReference::set_device_object_id(::google::protobuf::uint32 value) {
  
  device_object_id_ = value;
  // @@protoc_insertion_point(field_set:efdi.DeviceObjectReference.device_object_id)
}

// repeated .google.protobuf.Any extension = 2048;
inline int DeviceObjectReference::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& DeviceObjectReference::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.DeviceObjectReference.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* DeviceObjectReference::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.DeviceObjectReference.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* DeviceObjectReference::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.DeviceObjectReference.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
DeviceObjectReference::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.DeviceObjectReference.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
DeviceObjectReference::extension() const {
  // @@protoc_insertion_point(field_list:efdi.DeviceObjectReference.extension)
  return extension_;
}

// -------------------------------------------------------------------

// DeviceProcessData

// uint32 device_process_data_object_id = 1;
inline void DeviceProcessData::clear_device_process_data_object_id() {
  device_process_data_object_id_ = 0u;
}
inline ::google::protobuf::uint32 DeviceProcessData::device_process_data_object_id() const {
  // @@protoc_insertion_point(field_get:efdi.DeviceProcessData.device_process_data_object_id)
  return device_process_data_object_id_;
}
inline void DeviceProcessData::set_device_process_data_object_id(::google::protobuf::uint32 value) {
  
  device_process_data_object_id_ = value;
  // @@protoc_insertion_point(field_set:efdi.DeviceProcessData.device_process_data_object_id)
}

// uint32 device_process_data_ddi = 2;
inline void DeviceProcessData::clear_device_process_data_ddi() {
  device_process_data_ddi_ = 0u;
}
inline ::google::protobuf::uint32 DeviceProcessData::device_process_data_ddi() const {
  // @@protoc_insertion_point(field_get:efdi.DeviceProcessData.device_process_data_ddi)
  return device_process_data_ddi_;
}
inline void DeviceProcessData::set_device_process_data_ddi(::google::protobuf::uint32 value) {
  
  device_process_data_ddi_ = value;
  // @@protoc_insertion_point(field_set:efdi.DeviceProcessData.device_process_data_ddi)
}

// uint32 device_process_data_property = 3;
inline void DeviceProcessData::clear_device_process_data_property() {
  device_process_data_property_ = 0u;
}
inline ::google::protobuf::uint32 DeviceProcessData::device_process_data_property() const {
  // @@protoc_insertion_point(field_get:efdi.DeviceProcessData.device_process_data_property)
  return device_process_data_property_;
}
inline void DeviceProcessData::set_device_process_data_property(::google::protobuf::uint32 value) {
  
  device_process_data_property_ = value;
  // @@protoc_insertion_point(field_set:efdi.DeviceProcessData.device_process_data_property)
}

// uint32 device_process_data_trigger_methods = 4;
inline void DeviceProcessData::clear_device_process_data_trigger_methods() {
  device_process_data_trigger_methods_ = 0u;
}
inline ::google::protobuf::uint32 DeviceProcessData::device_process_data_trigger_methods() const {
  // @@protoc_insertion_point(field_get:efdi.DeviceProcessData.device_process_data_trigger_methods)
  return device_process_data_trigger_methods_;
}
inline void DeviceProcessData::set_device_process_data_trigger_methods(::google::protobuf::uint32 value) {
  
  device_process_data_trigger_methods_ = value;
  // @@protoc_insertion_point(field_set:efdi.DeviceProcessData.device_process_data_trigger_methods)
}

// string device_process_data_designator = 5;
inline void DeviceProcessData::clear_device_process_data_designator() {
  device_process_data_designator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceProcessData::device_process_data_designator() const {
  // @@protoc_insertion_point(field_get:efdi.DeviceProcessData.device_process_data_designator)
  return device_process_data_designator_.GetNoArena();
}
inline void DeviceProcessData::set_device_process_data_designator(const ::std::string& value) {
  
  device_process_data_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.DeviceProcessData.device_process_data_designator)
}
#if LANG_CXX11
inline void DeviceProcessData::set_device_process_data_designator(::std::string&& value) {
  
  device_process_data_designator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.DeviceProcessData.device_process_data_designator)
}
#endif
inline void DeviceProcessData::set_device_process_data_designator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_process_data_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.DeviceProcessData.device_process_data_designator)
}
inline void DeviceProcessData::set_device_process_data_designator(const char* value, size_t size) {
  
  device_process_data_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.DeviceProcessData.device_process_data_designator)
}
inline ::std::string* DeviceProcessData::mutable_device_process_data_designator() {
  
  // @@protoc_insertion_point(field_mutable:efdi.DeviceProcessData.device_process_data_designator)
  return device_process_data_designator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceProcessData::release_device_process_data_designator() {
  // @@protoc_insertion_point(field_release:efdi.DeviceProcessData.device_process_data_designator)
  
  return device_process_data_designator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceProcessData::set_allocated_device_process_data_designator(::std::string* device_process_data_designator) {
  if (device_process_data_designator != NULL) {
    
  } else {
    
  }
  device_process_data_designator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_process_data_designator);
  // @@protoc_insertion_point(field_set_allocated:efdi.DeviceProcessData.device_process_data_designator)
}

// uint32 device_value_presentation_object_id = 6;
inline void DeviceProcessData::clear_device_value_presentation_object_id() {
  device_value_presentation_object_id_ = 0u;
}
inline ::google::protobuf::uint32 DeviceProcessData::device_value_presentation_object_id() const {
  // @@protoc_insertion_point(field_get:efdi.DeviceProcessData.device_value_presentation_object_id)
  return device_value_presentation_object_id_;
}
inline void DeviceProcessData::set_device_value_presentation_object_id(::google::protobuf::uint32 value) {
  
  device_value_presentation_object_id_ = value;
  // @@protoc_insertion_point(field_set:efdi.DeviceProcessData.device_value_presentation_object_id)
}

// repeated .google.protobuf.Any extension = 2048;
inline int DeviceProcessData::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& DeviceProcessData::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.DeviceProcessData.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* DeviceProcessData::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.DeviceProcessData.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* DeviceProcessData::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.DeviceProcessData.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
DeviceProcessData::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.DeviceProcessData.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
DeviceProcessData::extension() const {
  // @@protoc_insertion_point(field_list:efdi.DeviceProcessData.extension)
  return extension_;
}

// -------------------------------------------------------------------

// DeviceProperty

// uint32 device_property_object_id = 1;
inline void DeviceProperty::clear_device_property_object_id() {
  device_property_object_id_ = 0u;
}
inline ::google::protobuf::uint32 DeviceProperty::device_property_object_id() const {
  // @@protoc_insertion_point(field_get:efdi.DeviceProperty.device_property_object_id)
  return device_property_object_id_;
}
inline void DeviceProperty::set_device_property_object_id(::google::protobuf::uint32 value) {
  
  device_property_object_id_ = value;
  // @@protoc_insertion_point(field_set:efdi.DeviceProperty.device_property_object_id)
}

// uint32 device_property_ddi = 2;
inline void DeviceProperty::clear_device_property_ddi() {
  device_property_ddi_ = 0u;
}
inline ::google::protobuf::uint32 DeviceProperty::device_property_ddi() const {
  // @@protoc_insertion_point(field_get:efdi.DeviceProperty.device_property_ddi)
  return device_property_ddi_;
}
inline void DeviceProperty::set_device_property_ddi(::google::protobuf::uint32 value) {
  
  device_property_ddi_ = value;
  // @@protoc_insertion_point(field_set:efdi.DeviceProperty.device_property_ddi)
}

// sint64 device_property_value = 3;
inline void DeviceProperty::clear_device_property_value() {
  device_property_value_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DeviceProperty::device_property_value() const {
  // @@protoc_insertion_point(field_get:efdi.DeviceProperty.device_property_value)
  return device_property_value_;
}
inline void DeviceProperty::set_device_property_value(::google::protobuf::int64 value) {
  
  device_property_value_ = value;
  // @@protoc_insertion_point(field_set:efdi.DeviceProperty.device_property_value)
}

// string device_property_designator = 4;
inline void DeviceProperty::clear_device_property_designator() {
  device_property_designator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceProperty::device_property_designator() const {
  // @@protoc_insertion_point(field_get:efdi.DeviceProperty.device_property_designator)
  return device_property_designator_.GetNoArena();
}
inline void DeviceProperty::set_device_property_designator(const ::std::string& value) {
  
  device_property_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.DeviceProperty.device_property_designator)
}
#if LANG_CXX11
inline void DeviceProperty::set_device_property_designator(::std::string&& value) {
  
  device_property_designator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.DeviceProperty.device_property_designator)
}
#endif
inline void DeviceProperty::set_device_property_designator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_property_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.DeviceProperty.device_property_designator)
}
inline void DeviceProperty::set_device_property_designator(const char* value, size_t size) {
  
  device_property_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.DeviceProperty.device_property_designator)
}
inline ::std::string* DeviceProperty::mutable_device_property_designator() {
  
  // @@protoc_insertion_point(field_mutable:efdi.DeviceProperty.device_property_designator)
  return device_property_designator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceProperty::release_device_property_designator() {
  // @@protoc_insertion_point(field_release:efdi.DeviceProperty.device_property_designator)
  
  return device_property_designator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceProperty::set_allocated_device_property_designator(::std::string* device_property_designator) {
  if (device_property_designator != NULL) {
    
  } else {
    
  }
  device_property_designator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_property_designator);
  // @@protoc_insertion_point(field_set_allocated:efdi.DeviceProperty.device_property_designator)
}

// uint32 device_value_presentation_object_id = 5;
inline void DeviceProperty::clear_device_value_presentation_object_id() {
  device_value_presentation_object_id_ = 0u;
}
inline ::google::protobuf::uint32 DeviceProperty::device_value_presentation_object_id() const {
  // @@protoc_insertion_point(field_get:efdi.DeviceProperty.device_value_presentation_object_id)
  return device_value_presentation_object_id_;
}
inline void DeviceProperty::set_device_value_presentation_object_id(::google::protobuf::uint32 value) {
  
  device_value_presentation_object_id_ = value;
  // @@protoc_insertion_point(field_set:efdi.DeviceProperty.device_value_presentation_object_id)
}

// repeated .google.protobuf.Any extension = 2048;
inline int DeviceProperty::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& DeviceProperty::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.DeviceProperty.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* DeviceProperty::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.DeviceProperty.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* DeviceProperty::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.DeviceProperty.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
DeviceProperty::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.DeviceProperty.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
DeviceProperty::extension() const {
  // @@protoc_insertion_point(field_list:efdi.DeviceProperty.extension)
  return extension_;
}

// -------------------------------------------------------------------

// DeviceValuePresentation

// uint32 device_value_presentation_object_id = 1;
inline void DeviceValuePresentation::clear_device_value_presentation_object_id() {
  device_value_presentation_object_id_ = 0u;
}
inline ::google::protobuf::uint32 DeviceValuePresentation::device_value_presentation_object_id() const {
  // @@protoc_insertion_point(field_get:efdi.DeviceValuePresentation.device_value_presentation_object_id)
  return device_value_presentation_object_id_;
}
inline void DeviceValuePresentation::set_device_value_presentation_object_id(::google::protobuf::uint32 value) {
  
  device_value_presentation_object_id_ = value;
  // @@protoc_insertion_point(field_set:efdi.DeviceValuePresentation.device_value_presentation_object_id)
}

// sint64 offset = 2;
inline void DeviceValuePresentation::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DeviceValuePresentation::offset() const {
  // @@protoc_insertion_point(field_get:efdi.DeviceValuePresentation.offset)
  return offset_;
}
inline void DeviceValuePresentation::set_offset(::google::protobuf::int64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:efdi.DeviceValuePresentation.offset)
}

// double scale = 3;
inline void DeviceValuePresentation::clear_scale() {
  scale_ = 0;
}
inline double DeviceValuePresentation::scale() const {
  // @@protoc_insertion_point(field_get:efdi.DeviceValuePresentation.scale)
  return scale_;
}
inline void DeviceValuePresentation::set_scale(double value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:efdi.DeviceValuePresentation.scale)
}

// uint32 number_of_decimals = 4;
inline void DeviceValuePresentation::clear_number_of_decimals() {
  number_of_decimals_ = 0u;
}
inline ::google::protobuf::uint32 DeviceValuePresentation::number_of_decimals() const {
  // @@protoc_insertion_point(field_get:efdi.DeviceValuePresentation.number_of_decimals)
  return number_of_decimals_;
}
inline void DeviceValuePresentation::set_number_of_decimals(::google::protobuf::uint32 value) {
  
  number_of_decimals_ = value;
  // @@protoc_insertion_point(field_set:efdi.DeviceValuePresentation.number_of_decimals)
}

// string unit_designator = 5;
inline void DeviceValuePresentation::clear_unit_designator() {
  unit_designator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceValuePresentation::unit_designator() const {
  // @@protoc_insertion_point(field_get:efdi.DeviceValuePresentation.unit_designator)
  return unit_designator_.GetNoArena();
}
inline void DeviceValuePresentation::set_unit_designator(const ::std::string& value) {
  
  unit_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.DeviceValuePresentation.unit_designator)
}
#if LANG_CXX11
inline void DeviceValuePresentation::set_unit_designator(::std::string&& value) {
  
  unit_designator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.DeviceValuePresentation.unit_designator)
}
#endif
inline void DeviceValuePresentation::set_unit_designator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  unit_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.DeviceValuePresentation.unit_designator)
}
inline void DeviceValuePresentation::set_unit_designator(const char* value, size_t size) {
  
  unit_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.DeviceValuePresentation.unit_designator)
}
inline ::std::string* DeviceValuePresentation::mutable_unit_designator() {
  
  // @@protoc_insertion_point(field_mutable:efdi.DeviceValuePresentation.unit_designator)
  return unit_designator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceValuePresentation::release_unit_designator() {
  // @@protoc_insertion_point(field_release:efdi.DeviceValuePresentation.unit_designator)
  
  return unit_designator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceValuePresentation::set_allocated_unit_designator(::std::string* unit_designator) {
  if (unit_designator != NULL) {
    
  } else {
    
  }
  unit_designator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit_designator);
  // @@protoc_insertion_point(field_set_allocated:efdi.DeviceValuePresentation.unit_designator)
}

// repeated .google.protobuf.Any extension = 2048;
inline int DeviceValuePresentation::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& DeviceValuePresentation::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.DeviceValuePresentation.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* DeviceValuePresentation::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.DeviceValuePresentation.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* DeviceValuePresentation::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.DeviceValuePresentation.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
DeviceValuePresentation::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.DeviceValuePresentation.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
DeviceValuePresentation::extension() const {
  // @@protoc_insertion_point(field_list:efdi.DeviceValuePresentation.extension)
  return extension_;
}

// -------------------------------------------------------------------

// Farm

// .efdi.UID farm_id = 1;
inline bool Farm::has_farm_id() const {
  return this != internal_default_instance() && farm_id_ != NULL;
}
inline void Farm::clear_farm_id() {
  if (GetArenaNoVirtual() == NULL && farm_id_ != NULL) {
    delete farm_id_;
  }
  farm_id_ = NULL;
}
inline const ::efdi::UID& Farm::farm_id() const {
  const ::efdi::UID* p = farm_id_;
  // @@protoc_insertion_point(field_get:efdi.Farm.farm_id)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* Farm::release_farm_id() {
  // @@protoc_insertion_point(field_release:efdi.Farm.farm_id)
  
  ::efdi::UID* temp = farm_id_;
  farm_id_ = NULL;
  return temp;
}
inline ::efdi::UID* Farm::mutable_farm_id() {
  
  if (farm_id_ == NULL) {
    farm_id_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Farm.farm_id)
  return farm_id_;
}
inline void Farm::set_allocated_farm_id(::efdi::UID* farm_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete farm_id_;
  }
  if (farm_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      farm_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, farm_id, submessage_arena);
    }
    
  } else {
    
  }
  farm_id_ = farm_id;
  // @@protoc_insertion_point(field_set_allocated:efdi.Farm.farm_id)
}

// string farm_designator = 2;
inline void Farm::clear_farm_designator() {
  farm_designator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Farm::farm_designator() const {
  // @@protoc_insertion_point(field_get:efdi.Farm.farm_designator)
  return farm_designator_.GetNoArena();
}
inline void Farm::set_farm_designator(const ::std::string& value) {
  
  farm_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Farm.farm_designator)
}
#if LANG_CXX11
inline void Farm::set_farm_designator(::std::string&& value) {
  
  farm_designator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Farm.farm_designator)
}
#endif
inline void Farm::set_farm_designator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  farm_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Farm.farm_designator)
}
inline void Farm::set_farm_designator(const char* value, size_t size) {
  
  farm_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Farm.farm_designator)
}
inline ::std::string* Farm::mutable_farm_designator() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Farm.farm_designator)
  return farm_designator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Farm::release_farm_designator() {
  // @@protoc_insertion_point(field_release:efdi.Farm.farm_designator)
  
  return farm_designator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Farm::set_allocated_farm_designator(::std::string* farm_designator) {
  if (farm_designator != NULL) {
    
  } else {
    
  }
  farm_designator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), farm_designator);
  // @@protoc_insertion_point(field_set_allocated:efdi.Farm.farm_designator)
}

// string farm_street = 3;
inline void Farm::clear_farm_street() {
  farm_street_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Farm::farm_street() const {
  // @@protoc_insertion_point(field_get:efdi.Farm.farm_street)
  return farm_street_.GetNoArena();
}
inline void Farm::set_farm_street(const ::std::string& value) {
  
  farm_street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Farm.farm_street)
}
#if LANG_CXX11
inline void Farm::set_farm_street(::std::string&& value) {
  
  farm_street_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Farm.farm_street)
}
#endif
inline void Farm::set_farm_street(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  farm_street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Farm.farm_street)
}
inline void Farm::set_farm_street(const char* value, size_t size) {
  
  farm_street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Farm.farm_street)
}
inline ::std::string* Farm::mutable_farm_street() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Farm.farm_street)
  return farm_street_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Farm::release_farm_street() {
  // @@protoc_insertion_point(field_release:efdi.Farm.farm_street)
  
  return farm_street_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Farm::set_allocated_farm_street(::std::string* farm_street) {
  if (farm_street != NULL) {
    
  } else {
    
  }
  farm_street_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), farm_street);
  // @@protoc_insertion_point(field_set_allocated:efdi.Farm.farm_street)
}

// string farm_po_box = 4;
inline void Farm::clear_farm_po_box() {
  farm_po_box_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Farm::farm_po_box() const {
  // @@protoc_insertion_point(field_get:efdi.Farm.farm_po_box)
  return farm_po_box_.GetNoArena();
}
inline void Farm::set_farm_po_box(const ::std::string& value) {
  
  farm_po_box_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Farm.farm_po_box)
}
#if LANG_CXX11
inline void Farm::set_farm_po_box(::std::string&& value) {
  
  farm_po_box_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Farm.farm_po_box)
}
#endif
inline void Farm::set_farm_po_box(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  farm_po_box_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Farm.farm_po_box)
}
inline void Farm::set_farm_po_box(const char* value, size_t size) {
  
  farm_po_box_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Farm.farm_po_box)
}
inline ::std::string* Farm::mutable_farm_po_box() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Farm.farm_po_box)
  return farm_po_box_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Farm::release_farm_po_box() {
  // @@protoc_insertion_point(field_release:efdi.Farm.farm_po_box)
  
  return farm_po_box_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Farm::set_allocated_farm_po_box(::std::string* farm_po_box) {
  if (farm_po_box != NULL) {
    
  } else {
    
  }
  farm_po_box_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), farm_po_box);
  // @@protoc_insertion_point(field_set_allocated:efdi.Farm.farm_po_box)
}

// string farm_postal_code = 5;
inline void Farm::clear_farm_postal_code() {
  farm_postal_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Farm::farm_postal_code() const {
  // @@protoc_insertion_point(field_get:efdi.Farm.farm_postal_code)
  return farm_postal_code_.GetNoArena();
}
inline void Farm::set_farm_postal_code(const ::std::string& value) {
  
  farm_postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Farm.farm_postal_code)
}
#if LANG_CXX11
inline void Farm::set_farm_postal_code(::std::string&& value) {
  
  farm_postal_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Farm.farm_postal_code)
}
#endif
inline void Farm::set_farm_postal_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  farm_postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Farm.farm_postal_code)
}
inline void Farm::set_farm_postal_code(const char* value, size_t size) {
  
  farm_postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Farm.farm_postal_code)
}
inline ::std::string* Farm::mutable_farm_postal_code() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Farm.farm_postal_code)
  return farm_postal_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Farm::release_farm_postal_code() {
  // @@protoc_insertion_point(field_release:efdi.Farm.farm_postal_code)
  
  return farm_postal_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Farm::set_allocated_farm_postal_code(::std::string* farm_postal_code) {
  if (farm_postal_code != NULL) {
    
  } else {
    
  }
  farm_postal_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), farm_postal_code);
  // @@protoc_insertion_point(field_set_allocated:efdi.Farm.farm_postal_code)
}

// string farm_city = 6;
inline void Farm::clear_farm_city() {
  farm_city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Farm::farm_city() const {
  // @@protoc_insertion_point(field_get:efdi.Farm.farm_city)
  return farm_city_.GetNoArena();
}
inline void Farm::set_farm_city(const ::std::string& value) {
  
  farm_city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Farm.farm_city)
}
#if LANG_CXX11
inline void Farm::set_farm_city(::std::string&& value) {
  
  farm_city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Farm.farm_city)
}
#endif
inline void Farm::set_farm_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  farm_city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Farm.farm_city)
}
inline void Farm::set_farm_city(const char* value, size_t size) {
  
  farm_city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Farm.farm_city)
}
inline ::std::string* Farm::mutable_farm_city() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Farm.farm_city)
  return farm_city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Farm::release_farm_city() {
  // @@protoc_insertion_point(field_release:efdi.Farm.farm_city)
  
  return farm_city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Farm::set_allocated_farm_city(::std::string* farm_city) {
  if (farm_city != NULL) {
    
  } else {
    
  }
  farm_city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), farm_city);
  // @@protoc_insertion_point(field_set_allocated:efdi.Farm.farm_city)
}

// string farm_state = 7;
inline void Farm::clear_farm_state() {
  farm_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Farm::farm_state() const {
  // @@protoc_insertion_point(field_get:efdi.Farm.farm_state)
  return farm_state_.GetNoArena();
}
inline void Farm::set_farm_state(const ::std::string& value) {
  
  farm_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Farm.farm_state)
}
#if LANG_CXX11
inline void Farm::set_farm_state(::std::string&& value) {
  
  farm_state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Farm.farm_state)
}
#endif
inline void Farm::set_farm_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  farm_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Farm.farm_state)
}
inline void Farm::set_farm_state(const char* value, size_t size) {
  
  farm_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Farm.farm_state)
}
inline ::std::string* Farm::mutable_farm_state() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Farm.farm_state)
  return farm_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Farm::release_farm_state() {
  // @@protoc_insertion_point(field_release:efdi.Farm.farm_state)
  
  return farm_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Farm::set_allocated_farm_state(::std::string* farm_state) {
  if (farm_state != NULL) {
    
  } else {
    
  }
  farm_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), farm_state);
  // @@protoc_insertion_point(field_set_allocated:efdi.Farm.farm_state)
}

// string farm_country = 8;
inline void Farm::clear_farm_country() {
  farm_country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Farm::farm_country() const {
  // @@protoc_insertion_point(field_get:efdi.Farm.farm_country)
  return farm_country_.GetNoArena();
}
inline void Farm::set_farm_country(const ::std::string& value) {
  
  farm_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Farm.farm_country)
}
#if LANG_CXX11
inline void Farm::set_farm_country(::std::string&& value) {
  
  farm_country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Farm.farm_country)
}
#endif
inline void Farm::set_farm_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  farm_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Farm.farm_country)
}
inline void Farm::set_farm_country(const char* value, size_t size) {
  
  farm_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Farm.farm_country)
}
inline ::std::string* Farm::mutable_farm_country() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Farm.farm_country)
  return farm_country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Farm::release_farm_country() {
  // @@protoc_insertion_point(field_release:efdi.Farm.farm_country)
  
  return farm_country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Farm::set_allocated_farm_country(::std::string* farm_country) {
  if (farm_country != NULL) {
    
  } else {
    
  }
  farm_country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), farm_country);
  // @@protoc_insertion_point(field_set_allocated:efdi.Farm.farm_country)
}

// .efdi.UID customer_id_ref = 9;
inline bool Farm::has_customer_id_ref() const {
  return this != internal_default_instance() && customer_id_ref_ != NULL;
}
inline void Farm::clear_customer_id_ref() {
  if (GetArenaNoVirtual() == NULL && customer_id_ref_ != NULL) {
    delete customer_id_ref_;
  }
  customer_id_ref_ = NULL;
}
inline const ::efdi::UID& Farm::customer_id_ref() const {
  const ::efdi::UID* p = customer_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.Farm.customer_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* Farm::release_customer_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.Farm.customer_id_ref)
  
  ::efdi::UID* temp = customer_id_ref_;
  customer_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* Farm::mutable_customer_id_ref() {
  
  if (customer_id_ref_ == NULL) {
    customer_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Farm.customer_id_ref)
  return customer_id_ref_;
}
inline void Farm::set_allocated_customer_id_ref(::efdi::UID* customer_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete customer_id_ref_;
  }
  if (customer_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      customer_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, customer_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  customer_id_ref_ = customer_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.Farm.customer_id_ref)
}

// repeated .google.protobuf.Any extension = 2048;
inline int Farm::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& Farm::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Farm.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* Farm::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Farm.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* Farm::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.Farm.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
Farm::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Farm.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
Farm::extension() const {
  // @@protoc_insertion_point(field_list:efdi.Farm.extension)
  return extension_;
}

// -------------------------------------------------------------------

// Grid

// double grid_minimum_north_position = 1;
inline void Grid::clear_grid_minimum_north_position() {
  grid_minimum_north_position_ = 0;
}
inline double Grid::grid_minimum_north_position() const {
  // @@protoc_insertion_point(field_get:efdi.Grid.grid_minimum_north_position)
  return grid_minimum_north_position_;
}
inline void Grid::set_grid_minimum_north_position(double value) {
  
  grid_minimum_north_position_ = value;
  // @@protoc_insertion_point(field_set:efdi.Grid.grid_minimum_north_position)
}

// double grid_minimum_east_position = 2;
inline void Grid::clear_grid_minimum_east_position() {
  grid_minimum_east_position_ = 0;
}
inline double Grid::grid_minimum_east_position() const {
  // @@protoc_insertion_point(field_get:efdi.Grid.grid_minimum_east_position)
  return grid_minimum_east_position_;
}
inline void Grid::set_grid_minimum_east_position(double value) {
  
  grid_minimum_east_position_ = value;
  // @@protoc_insertion_point(field_set:efdi.Grid.grid_minimum_east_position)
}

// double grid_cell_north_size = 3;
inline void Grid::clear_grid_cell_north_size() {
  grid_cell_north_size_ = 0;
}
inline double Grid::grid_cell_north_size() const {
  // @@protoc_insertion_point(field_get:efdi.Grid.grid_cell_north_size)
  return grid_cell_north_size_;
}
inline void Grid::set_grid_cell_north_size(double value) {
  
  grid_cell_north_size_ = value;
  // @@protoc_insertion_point(field_set:efdi.Grid.grid_cell_north_size)
}

// double grid_cell_east_size = 4;
inline void Grid::clear_grid_cell_east_size() {
  grid_cell_east_size_ = 0;
}
inline double Grid::grid_cell_east_size() const {
  // @@protoc_insertion_point(field_get:efdi.Grid.grid_cell_east_size)
  return grid_cell_east_size_;
}
inline void Grid::set_grid_cell_east_size(double value) {
  
  grid_cell_east_size_ = value;
  // @@protoc_insertion_point(field_set:efdi.Grid.grid_cell_east_size)
}

// uint64 grid_maximum_column = 5;
inline void Grid::clear_grid_maximum_column() {
  grid_maximum_column_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Grid::grid_maximum_column() const {
  // @@protoc_insertion_point(field_get:efdi.Grid.grid_maximum_column)
  return grid_maximum_column_;
}
inline void Grid::set_grid_maximum_column(::google::protobuf::uint64 value) {
  
  grid_maximum_column_ = value;
  // @@protoc_insertion_point(field_set:efdi.Grid.grid_maximum_column)
}

// uint64 grid_maximum_row = 6;
inline void Grid::clear_grid_maximum_row() {
  grid_maximum_row_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Grid::grid_maximum_row() const {
  // @@protoc_insertion_point(field_get:efdi.Grid.grid_maximum_row)
  return grid_maximum_row_;
}
inline void Grid::set_grid_maximum_row(::google::protobuf::uint64 value) {
  
  grid_maximum_row_ = value;
  // @@protoc_insertion_point(field_set:efdi.Grid.grid_maximum_row)
}

// .efdi.UID filename = 7;
inline bool Grid::has_filename() const {
  return this != internal_default_instance() && filename_ != NULL;
}
inline void Grid::clear_filename() {
  if (GetArenaNoVirtual() == NULL && filename_ != NULL) {
    delete filename_;
  }
  filename_ = NULL;
}
inline const ::efdi::UID& Grid::filename() const {
  const ::efdi::UID* p = filename_;
  // @@protoc_insertion_point(field_get:efdi.Grid.filename)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* Grid::release_filename() {
  // @@protoc_insertion_point(field_release:efdi.Grid.filename)
  
  ::efdi::UID* temp = filename_;
  filename_ = NULL;
  return temp;
}
inline ::efdi::UID* Grid::mutable_filename() {
  
  if (filename_ == NULL) {
    filename_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Grid.filename)
  return filename_;
}
inline void Grid::set_allocated_filename(::efdi::UID* filename) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete filename_;
  }
  if (filename) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      filename = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, filename, submessage_arena);
    }
    
  } else {
    
  }
  filename_ = filename;
  // @@protoc_insertion_point(field_set_allocated:efdi.Grid.filename)
}

// uint64 filelength = 8;
inline void Grid::clear_filelength() {
  filelength_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Grid::filelength() const {
  // @@protoc_insertion_point(field_get:efdi.Grid.filelength)
  return filelength_;
}
inline void Grid::set_filelength(::google::protobuf::uint64 value) {
  
  filelength_ = value;
  // @@protoc_insertion_point(field_set:efdi.Grid.filelength)
}

// .efdi.Grid.GridType grid_type = 9;
inline void Grid::clear_grid_type() {
  grid_type_ = 0;
}
inline ::efdi::Grid_GridType Grid::grid_type() const {
  // @@protoc_insertion_point(field_get:efdi.Grid.grid_type)
  return static_cast< ::efdi::Grid_GridType >(grid_type_);
}
inline void Grid::set_grid_type(::efdi::Grid_GridType value) {
  
  grid_type_ = value;
  // @@protoc_insertion_point(field_set:efdi.Grid.grid_type)
}

// uint32 treatment_zone_code = 10;
inline void Grid::clear_treatment_zone_code() {
  treatment_zone_code_ = 0u;
}
inline ::google::protobuf::uint32 Grid::treatment_zone_code() const {
  // @@protoc_insertion_point(field_get:efdi.Grid.treatment_zone_code)
  return treatment_zone_code_;
}
inline void Grid::set_treatment_zone_code(::google::protobuf::uint32 value) {
  
  treatment_zone_code_ = value;
  // @@protoc_insertion_point(field_set:efdi.Grid.treatment_zone_code)
}

// repeated .google.protobuf.Any extension = 2048;
inline int Grid::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& Grid::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Grid.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* Grid::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Grid.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* Grid::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.Grid.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
Grid::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Grid.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
Grid::extension() const {
  // @@protoc_insertion_point(field_list:efdi.Grid.extension)
  return extension_;
}

// -------------------------------------------------------------------

// GuidanceAllocation

// .efdi.UID guidance_group_id_ref = 1;
inline bool GuidanceAllocation::has_guidance_group_id_ref() const {
  return this != internal_default_instance() && guidance_group_id_ref_ != NULL;
}
inline void GuidanceAllocation::clear_guidance_group_id_ref() {
  if (GetArenaNoVirtual() == NULL && guidance_group_id_ref_ != NULL) {
    delete guidance_group_id_ref_;
  }
  guidance_group_id_ref_ = NULL;
}
inline const ::efdi::UID& GuidanceAllocation::guidance_group_id_ref() const {
  const ::efdi::UID* p = guidance_group_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.GuidanceAllocation.guidance_group_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* GuidanceAllocation::release_guidance_group_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.GuidanceAllocation.guidance_group_id_ref)
  
  ::efdi::UID* temp = guidance_group_id_ref_;
  guidance_group_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* GuidanceAllocation::mutable_guidance_group_id_ref() {
  
  if (guidance_group_id_ref_ == NULL) {
    guidance_group_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.GuidanceAllocation.guidance_group_id_ref)
  return guidance_group_id_ref_;
}
inline void GuidanceAllocation::set_allocated_guidance_group_id_ref(::efdi::UID* guidance_group_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete guidance_group_id_ref_;
  }
  if (guidance_group_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      guidance_group_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, guidance_group_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  guidance_group_id_ref_ = guidance_group_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.GuidanceAllocation.guidance_group_id_ref)
}

// .efdi.AllocationStamp allocation_stamp = 2;
inline bool GuidanceAllocation::has_allocation_stamp() const {
  return this != internal_default_instance() && allocation_stamp_ != NULL;
}
inline void GuidanceAllocation::clear_allocation_stamp() {
  if (GetArenaNoVirtual() == NULL && allocation_stamp_ != NULL) {
    delete allocation_stamp_;
  }
  allocation_stamp_ = NULL;
}
inline const ::efdi::AllocationStamp& GuidanceAllocation::allocation_stamp() const {
  const ::efdi::AllocationStamp* p = allocation_stamp_;
  // @@protoc_insertion_point(field_get:efdi.GuidanceAllocation.allocation_stamp)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::AllocationStamp*>(
      &::efdi::_AllocationStamp_default_instance_);
}
inline ::efdi::AllocationStamp* GuidanceAllocation::release_allocation_stamp() {
  // @@protoc_insertion_point(field_release:efdi.GuidanceAllocation.allocation_stamp)
  
  ::efdi::AllocationStamp* temp = allocation_stamp_;
  allocation_stamp_ = NULL;
  return temp;
}
inline ::efdi::AllocationStamp* GuidanceAllocation::mutable_allocation_stamp() {
  
  if (allocation_stamp_ == NULL) {
    allocation_stamp_ = new ::efdi::AllocationStamp;
  }
  // @@protoc_insertion_point(field_mutable:efdi.GuidanceAllocation.allocation_stamp)
  return allocation_stamp_;
}
inline void GuidanceAllocation::set_allocated_allocation_stamp(::efdi::AllocationStamp* allocation_stamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete allocation_stamp_;
  }
  if (allocation_stamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      allocation_stamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, allocation_stamp, submessage_arena);
    }
    
  } else {
    
  }
  allocation_stamp_ = allocation_stamp;
  // @@protoc_insertion_point(field_set_allocated:efdi.GuidanceAllocation.allocation_stamp)
}

// repeated .efdi.GuidanceShift guidance_shift = 3;
inline int GuidanceAllocation::guidance_shift_size() const {
  return guidance_shift_.size();
}
inline void GuidanceAllocation::clear_guidance_shift() {
  guidance_shift_.Clear();
}
inline const ::efdi::GuidanceShift& GuidanceAllocation::guidance_shift(int index) const {
  // @@protoc_insertion_point(field_get:efdi.GuidanceAllocation.guidance_shift)
  return guidance_shift_.Get(index);
}
inline ::efdi::GuidanceShift* GuidanceAllocation::mutable_guidance_shift(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.GuidanceAllocation.guidance_shift)
  return guidance_shift_.Mutable(index);
}
inline ::efdi::GuidanceShift* GuidanceAllocation::add_guidance_shift() {
  // @@protoc_insertion_point(field_add:efdi.GuidanceAllocation.guidance_shift)
  return guidance_shift_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::GuidanceShift >*
GuidanceAllocation::mutable_guidance_shift() {
  // @@protoc_insertion_point(field_mutable_list:efdi.GuidanceAllocation.guidance_shift)
  return &guidance_shift_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::GuidanceShift >&
GuidanceAllocation::guidance_shift() const {
  // @@protoc_insertion_point(field_list:efdi.GuidanceAllocation.guidance_shift)
  return guidance_shift_;
}

// repeated .google.protobuf.Any extension = 2048;
inline int GuidanceAllocation::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& GuidanceAllocation::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.GuidanceAllocation.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* GuidanceAllocation::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.GuidanceAllocation.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* GuidanceAllocation::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.GuidanceAllocation.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
GuidanceAllocation::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.GuidanceAllocation.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
GuidanceAllocation::extension() const {
  // @@protoc_insertion_point(field_list:efdi.GuidanceAllocation.extension)
  return extension_;
}

// -------------------------------------------------------------------

// GuidanceGroup

// .efdi.UID guidance_group_id = 1;
inline bool GuidanceGroup::has_guidance_group_id() const {
  return this != internal_default_instance() && guidance_group_id_ != NULL;
}
inline void GuidanceGroup::clear_guidance_group_id() {
  if (GetArenaNoVirtual() == NULL && guidance_group_id_ != NULL) {
    delete guidance_group_id_;
  }
  guidance_group_id_ = NULL;
}
inline const ::efdi::UID& GuidanceGroup::guidance_group_id() const {
  const ::efdi::UID* p = guidance_group_id_;
  // @@protoc_insertion_point(field_get:efdi.GuidanceGroup.guidance_group_id)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* GuidanceGroup::release_guidance_group_id() {
  // @@protoc_insertion_point(field_release:efdi.GuidanceGroup.guidance_group_id)
  
  ::efdi::UID* temp = guidance_group_id_;
  guidance_group_id_ = NULL;
  return temp;
}
inline ::efdi::UID* GuidanceGroup::mutable_guidance_group_id() {
  
  if (guidance_group_id_ == NULL) {
    guidance_group_id_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.GuidanceGroup.guidance_group_id)
  return guidance_group_id_;
}
inline void GuidanceGroup::set_allocated_guidance_group_id(::efdi::UID* guidance_group_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete guidance_group_id_;
  }
  if (guidance_group_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      guidance_group_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, guidance_group_id, submessage_arena);
    }
    
  } else {
    
  }
  guidance_group_id_ = guidance_group_id;
  // @@protoc_insertion_point(field_set_allocated:efdi.GuidanceGroup.guidance_group_id)
}

// string guidance_group_designator = 2;
inline void GuidanceGroup::clear_guidance_group_designator() {
  guidance_group_designator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GuidanceGroup::guidance_group_designator() const {
  // @@protoc_insertion_point(field_get:efdi.GuidanceGroup.guidance_group_designator)
  return guidance_group_designator_.GetNoArena();
}
inline void GuidanceGroup::set_guidance_group_designator(const ::std::string& value) {
  
  guidance_group_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.GuidanceGroup.guidance_group_designator)
}
#if LANG_CXX11
inline void GuidanceGroup::set_guidance_group_designator(::std::string&& value) {
  
  guidance_group_designator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.GuidanceGroup.guidance_group_designator)
}
#endif
inline void GuidanceGroup::set_guidance_group_designator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  guidance_group_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.GuidanceGroup.guidance_group_designator)
}
inline void GuidanceGroup::set_guidance_group_designator(const char* value, size_t size) {
  
  guidance_group_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.GuidanceGroup.guidance_group_designator)
}
inline ::std::string* GuidanceGroup::mutable_guidance_group_designator() {
  
  // @@protoc_insertion_point(field_mutable:efdi.GuidanceGroup.guidance_group_designator)
  return guidance_group_designator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GuidanceGroup::release_guidance_group_designator() {
  // @@protoc_insertion_point(field_release:efdi.GuidanceGroup.guidance_group_designator)
  
  return guidance_group_designator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GuidanceGroup::set_allocated_guidance_group_designator(::std::string* guidance_group_designator) {
  if (guidance_group_designator != NULL) {
    
  } else {
    
  }
  guidance_group_designator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guidance_group_designator);
  // @@protoc_insertion_point(field_set_allocated:efdi.GuidanceGroup.guidance_group_designator)
}

// repeated .efdi.GuidancePattern guidance_pattern = 3;
inline int GuidanceGroup::guidance_pattern_size() const {
  return guidance_pattern_.size();
}
inline void GuidanceGroup::clear_guidance_pattern() {
  guidance_pattern_.Clear();
}
inline const ::efdi::GuidancePattern& GuidanceGroup::guidance_pattern(int index) const {
  // @@protoc_insertion_point(field_get:efdi.GuidanceGroup.guidance_pattern)
  return guidance_pattern_.Get(index);
}
inline ::efdi::GuidancePattern* GuidanceGroup::mutable_guidance_pattern(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.GuidanceGroup.guidance_pattern)
  return guidance_pattern_.Mutable(index);
}
inline ::efdi::GuidancePattern* GuidanceGroup::add_guidance_pattern() {
  // @@protoc_insertion_point(field_add:efdi.GuidanceGroup.guidance_pattern)
  return guidance_pattern_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::GuidancePattern >*
GuidanceGroup::mutable_guidance_pattern() {
  // @@protoc_insertion_point(field_mutable_list:efdi.GuidanceGroup.guidance_pattern)
  return &guidance_pattern_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::GuidancePattern >&
GuidanceGroup::guidance_pattern() const {
  // @@protoc_insertion_point(field_list:efdi.GuidanceGroup.guidance_pattern)
  return guidance_pattern_;
}

// repeated .efdi.Polygon boundary_polygon = 4;
inline int GuidanceGroup::boundary_polygon_size() const {
  return boundary_polygon_.size();
}
inline void GuidanceGroup::clear_boundary_polygon() {
  boundary_polygon_.Clear();
}
inline const ::efdi::Polygon& GuidanceGroup::boundary_polygon(int index) const {
  // @@protoc_insertion_point(field_get:efdi.GuidanceGroup.boundary_polygon)
  return boundary_polygon_.Get(index);
}
inline ::efdi::Polygon* GuidanceGroup::mutable_boundary_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.GuidanceGroup.boundary_polygon)
  return boundary_polygon_.Mutable(index);
}
inline ::efdi::Polygon* GuidanceGroup::add_boundary_polygon() {
  // @@protoc_insertion_point(field_add:efdi.GuidanceGroup.boundary_polygon)
  return boundary_polygon_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::Polygon >*
GuidanceGroup::mutable_boundary_polygon() {
  // @@protoc_insertion_point(field_mutable_list:efdi.GuidanceGroup.boundary_polygon)
  return &boundary_polygon_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::Polygon >&
GuidanceGroup::boundary_polygon() const {
  // @@protoc_insertion_point(field_list:efdi.GuidanceGroup.boundary_polygon)
  return boundary_polygon_;
}

// repeated .google.protobuf.Any extension = 2048;
inline int GuidanceGroup::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& GuidanceGroup::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.GuidanceGroup.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* GuidanceGroup::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.GuidanceGroup.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* GuidanceGroup::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.GuidanceGroup.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
GuidanceGroup::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.GuidanceGroup.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
GuidanceGroup::extension() const {
  // @@protoc_insertion_point(field_list:efdi.GuidanceGroup.extension)
  return extension_;
}

// -------------------------------------------------------------------

// GuidancePattern

// .efdi.UID guidance_pattern_id = 1;
inline bool GuidancePattern::has_guidance_pattern_id() const {
  return this != internal_default_instance() && guidance_pattern_id_ != NULL;
}
inline void GuidancePattern::clear_guidance_pattern_id() {
  if (GetArenaNoVirtual() == NULL && guidance_pattern_id_ != NULL) {
    delete guidance_pattern_id_;
  }
  guidance_pattern_id_ = NULL;
}
inline const ::efdi::UID& GuidancePattern::guidance_pattern_id() const {
  const ::efdi::UID* p = guidance_pattern_id_;
  // @@protoc_insertion_point(field_get:efdi.GuidancePattern.guidance_pattern_id)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* GuidancePattern::release_guidance_pattern_id() {
  // @@protoc_insertion_point(field_release:efdi.GuidancePattern.guidance_pattern_id)
  
  ::efdi::UID* temp = guidance_pattern_id_;
  guidance_pattern_id_ = NULL;
  return temp;
}
inline ::efdi::UID* GuidancePattern::mutable_guidance_pattern_id() {
  
  if (guidance_pattern_id_ == NULL) {
    guidance_pattern_id_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.GuidancePattern.guidance_pattern_id)
  return guidance_pattern_id_;
}
inline void GuidancePattern::set_allocated_guidance_pattern_id(::efdi::UID* guidance_pattern_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete guidance_pattern_id_;
  }
  if (guidance_pattern_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      guidance_pattern_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, guidance_pattern_id, submessage_arena);
    }
    
  } else {
    
  }
  guidance_pattern_id_ = guidance_pattern_id;
  // @@protoc_insertion_point(field_set_allocated:efdi.GuidancePattern.guidance_pattern_id)
}

// string guidance_pattern_designator = 2;
inline void GuidancePattern::clear_guidance_pattern_designator() {
  guidance_pattern_designator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GuidancePattern::guidance_pattern_designator() const {
  // @@protoc_insertion_point(field_get:efdi.GuidancePattern.guidance_pattern_designator)
  return guidance_pattern_designator_.GetNoArena();
}
inline void GuidancePattern::set_guidance_pattern_designator(const ::std::string& value) {
  
  guidance_pattern_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.GuidancePattern.guidance_pattern_designator)
}
#if LANG_CXX11
inline void GuidancePattern::set_guidance_pattern_designator(::std::string&& value) {
  
  guidance_pattern_designator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.GuidancePattern.guidance_pattern_designator)
}
#endif
inline void GuidancePattern::set_guidance_pattern_designator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  guidance_pattern_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.GuidancePattern.guidance_pattern_designator)
}
inline void GuidancePattern::set_guidance_pattern_designator(const char* value, size_t size) {
  
  guidance_pattern_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.GuidancePattern.guidance_pattern_designator)
}
inline ::std::string* GuidancePattern::mutable_guidance_pattern_designator() {
  
  // @@protoc_insertion_point(field_mutable:efdi.GuidancePattern.guidance_pattern_designator)
  return guidance_pattern_designator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GuidancePattern::release_guidance_pattern_designator() {
  // @@protoc_insertion_point(field_release:efdi.GuidancePattern.guidance_pattern_designator)
  
  return guidance_pattern_designator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GuidancePattern::set_allocated_guidance_pattern_designator(::std::string* guidance_pattern_designator) {
  if (guidance_pattern_designator != NULL) {
    
  } else {
    
  }
  guidance_pattern_designator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guidance_pattern_designator);
  // @@protoc_insertion_point(field_set_allocated:efdi.GuidancePattern.guidance_pattern_designator)
}

// .efdi.GuidancePattern.GuidancePatternType guidance_pattern_type = 3;
inline void GuidancePattern::clear_guidance_pattern_type() {
  guidance_pattern_type_ = 0;
}
inline ::efdi::GuidancePattern_GuidancePatternType GuidancePattern::guidance_pattern_type() const {
  // @@protoc_insertion_point(field_get:efdi.GuidancePattern.guidance_pattern_type)
  return static_cast< ::efdi::GuidancePattern_GuidancePatternType >(guidance_pattern_type_);
}
inline void GuidancePattern::set_guidance_pattern_type(::efdi::GuidancePattern_GuidancePatternType value) {
  
  guidance_pattern_type_ = value;
  // @@protoc_insertion_point(field_set:efdi.GuidancePattern.guidance_pattern_type)
}

// .efdi.GuidancePattern.GuidancePatternOptions guidance_pattern_options = 4;
inline void GuidancePattern::clear_guidance_pattern_options() {
  guidance_pattern_options_ = 0;
}
inline ::efdi::GuidancePattern_GuidancePatternOptions GuidancePattern::guidance_pattern_options() const {
  // @@protoc_insertion_point(field_get:efdi.GuidancePattern.guidance_pattern_options)
  return static_cast< ::efdi::GuidancePattern_GuidancePatternOptions >(guidance_pattern_options_);
}
inline void GuidancePattern::set_guidance_pattern_options(::efdi::GuidancePattern_GuidancePatternOptions value) {
  
  guidance_pattern_options_ = value;
  // @@protoc_insertion_point(field_set:efdi.GuidancePattern.guidance_pattern_options)
}

// .efdi.GuidancePattern.GuidancePatternPropagationDirection guidance_pattern_propagation_direction = 5;
inline void GuidancePattern::clear_guidance_pattern_propagation_direction() {
  guidance_pattern_propagation_direction_ = 0;
}
inline ::efdi::GuidancePattern_GuidancePatternPropagationDirection GuidancePattern::guidance_pattern_propagation_direction() const {
  // @@protoc_insertion_point(field_get:efdi.GuidancePattern.guidance_pattern_propagation_direction)
  return static_cast< ::efdi::GuidancePattern_GuidancePatternPropagationDirection >(guidance_pattern_propagation_direction_);
}
inline void GuidancePattern::set_guidance_pattern_propagation_direction(::efdi::GuidancePattern_GuidancePatternPropagationDirection value) {
  
  guidance_pattern_propagation_direction_ = value;
  // @@protoc_insertion_point(field_set:efdi.GuidancePattern.guidance_pattern_propagation_direction)
}

// .efdi.GuidancePattern.GuidancePatternExtension guidance_pattern_extension = 6;
inline void GuidancePattern::clear_guidance_pattern_extension() {
  guidance_pattern_extension_ = 0;
}
inline ::efdi::GuidancePattern_GuidancePatternExtension GuidancePattern::guidance_pattern_extension() const {
  // @@protoc_insertion_point(field_get:efdi.GuidancePattern.guidance_pattern_extension)
  return static_cast< ::efdi::GuidancePattern_GuidancePatternExtension >(guidance_pattern_extension_);
}
inline void GuidancePattern::set_guidance_pattern_extension(::efdi::GuidancePattern_GuidancePatternExtension value) {
  
  guidance_pattern_extension_ = value;
  // @@protoc_insertion_point(field_set:efdi.GuidancePattern.guidance_pattern_extension)
}

// double guidance_pattern_heading = 7;
inline void GuidancePattern::clear_guidance_pattern_heading() {
  guidance_pattern_heading_ = 0;
}
inline double GuidancePattern::guidance_pattern_heading() const {
  // @@protoc_insertion_point(field_get:efdi.GuidancePattern.guidance_pattern_heading)
  return guidance_pattern_heading_;
}
inline void GuidancePattern::set_guidance_pattern_heading(double value) {
  
  guidance_pattern_heading_ = value;
  // @@protoc_insertion_point(field_set:efdi.GuidancePattern.guidance_pattern_heading)
}

// uint64 guidance_pattern_radius = 8;
inline void GuidancePattern::clear_guidance_pattern_radius() {
  guidance_pattern_radius_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GuidancePattern::guidance_pattern_radius() const {
  // @@protoc_insertion_point(field_get:efdi.GuidancePattern.guidance_pattern_radius)
  return guidance_pattern_radius_;
}
inline void GuidancePattern::set_guidance_pattern_radius(::google::protobuf::uint64 value) {
  
  guidance_pattern_radius_ = value;
  // @@protoc_insertion_point(field_set:efdi.GuidancePattern.guidance_pattern_radius)
}

// .efdi.GuidancePattern.GuidancePatternGNSSMethod guidance_pattern_gnss_method = 9;
inline void GuidancePattern::clear_guidance_pattern_gnss_method() {
  guidance_pattern_gnss_method_ = 0;
}
inline ::efdi::GuidancePattern_GuidancePatternGNSSMethod GuidancePattern::guidance_pattern_gnss_method() const {
  // @@protoc_insertion_point(field_get:efdi.GuidancePattern.guidance_pattern_gnss_method)
  return static_cast< ::efdi::GuidancePattern_GuidancePatternGNSSMethod >(guidance_pattern_gnss_method_);
}
inline void GuidancePattern::set_guidance_pattern_gnss_method(::efdi::GuidancePattern_GuidancePatternGNSSMethod value) {
  
  guidance_pattern_gnss_method_ = value;
  // @@protoc_insertion_point(field_set:efdi.GuidancePattern.guidance_pattern_gnss_method)
}

// double guidance_pattern_horizontal_accuracy = 10;
inline void GuidancePattern::clear_guidance_pattern_horizontal_accuracy() {
  guidance_pattern_horizontal_accuracy_ = 0;
}
inline double GuidancePattern::guidance_pattern_horizontal_accuracy() const {
  // @@protoc_insertion_point(field_get:efdi.GuidancePattern.guidance_pattern_horizontal_accuracy)
  return guidance_pattern_horizontal_accuracy_;
}
inline void GuidancePattern::set_guidance_pattern_horizontal_accuracy(double value) {
  
  guidance_pattern_horizontal_accuracy_ = value;
  // @@protoc_insertion_point(field_set:efdi.GuidancePattern.guidance_pattern_horizontal_accuracy)
}

// double guidance_pattern_vertical_accuracy = 11;
inline void GuidancePattern::clear_guidance_pattern_vertical_accuracy() {
  guidance_pattern_vertical_accuracy_ = 0;
}
inline double GuidancePattern::guidance_pattern_vertical_accuracy() const {
  // @@protoc_insertion_point(field_get:efdi.GuidancePattern.guidance_pattern_vertical_accuracy)
  return guidance_pattern_vertical_accuracy_;
}
inline void GuidancePattern::set_guidance_pattern_vertical_accuracy(double value) {
  
  guidance_pattern_vertical_accuracy_ = value;
  // @@protoc_insertion_point(field_set:efdi.GuidancePattern.guidance_pattern_vertical_accuracy)
}

// .efdi.UID base_station_id_ref = 12;
inline bool GuidancePattern::has_base_station_id_ref() const {
  return this != internal_default_instance() && base_station_id_ref_ != NULL;
}
inline void GuidancePattern::clear_base_station_id_ref() {
  if (GetArenaNoVirtual() == NULL && base_station_id_ref_ != NULL) {
    delete base_station_id_ref_;
  }
  base_station_id_ref_ = NULL;
}
inline const ::efdi::UID& GuidancePattern::base_station_id_ref() const {
  const ::efdi::UID* p = base_station_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.GuidancePattern.base_station_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* GuidancePattern::release_base_station_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.GuidancePattern.base_station_id_ref)
  
  ::efdi::UID* temp = base_station_id_ref_;
  base_station_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* GuidancePattern::mutable_base_station_id_ref() {
  
  if (base_station_id_ref_ == NULL) {
    base_station_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.GuidancePattern.base_station_id_ref)
  return base_station_id_ref_;
}
inline void GuidancePattern::set_allocated_base_station_id_ref(::efdi::UID* base_station_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete base_station_id_ref_;
  }
  if (base_station_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base_station_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base_station_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  base_station_id_ref_ = base_station_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.GuidancePattern.base_station_id_ref)
}

// string original_srid = 13;
inline void GuidancePattern::clear_original_srid() {
  original_srid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GuidancePattern::original_srid() const {
  // @@protoc_insertion_point(field_get:efdi.GuidancePattern.original_srid)
  return original_srid_.GetNoArena();
}
inline void GuidancePattern::set_original_srid(const ::std::string& value) {
  
  original_srid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.GuidancePattern.original_srid)
}
#if LANG_CXX11
inline void GuidancePattern::set_original_srid(::std::string&& value) {
  
  original_srid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.GuidancePattern.original_srid)
}
#endif
inline void GuidancePattern::set_original_srid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  original_srid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.GuidancePattern.original_srid)
}
inline void GuidancePattern::set_original_srid(const char* value, size_t size) {
  
  original_srid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.GuidancePattern.original_srid)
}
inline ::std::string* GuidancePattern::mutable_original_srid() {
  
  // @@protoc_insertion_point(field_mutable:efdi.GuidancePattern.original_srid)
  return original_srid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GuidancePattern::release_original_srid() {
  // @@protoc_insertion_point(field_release:efdi.GuidancePattern.original_srid)
  
  return original_srid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GuidancePattern::set_allocated_original_srid(::std::string* original_srid) {
  if (original_srid != NULL) {
    
  } else {
    
  }
  original_srid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), original_srid);
  // @@protoc_insertion_point(field_set_allocated:efdi.GuidancePattern.original_srid)
}

// uint64 number_of_swaths_left = 14;
inline void GuidancePattern::clear_number_of_swaths_left() {
  number_of_swaths_left_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GuidancePattern::number_of_swaths_left() const {
  // @@protoc_insertion_point(field_get:efdi.GuidancePattern.number_of_swaths_left)
  return number_of_swaths_left_;
}
inline void GuidancePattern::set_number_of_swaths_left(::google::protobuf::uint64 value) {
  
  number_of_swaths_left_ = value;
  // @@protoc_insertion_point(field_set:efdi.GuidancePattern.number_of_swaths_left)
}

// uint64 number_of_swaths_right = 15;
inline void GuidancePattern::clear_number_of_swaths_right() {
  number_of_swaths_right_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GuidancePattern::number_of_swaths_right() const {
  // @@protoc_insertion_point(field_get:efdi.GuidancePattern.number_of_swaths_right)
  return number_of_swaths_right_;
}
inline void GuidancePattern::set_number_of_swaths_right(::google::protobuf::uint64 value) {
  
  number_of_swaths_right_ = value;
  // @@protoc_insertion_point(field_set:efdi.GuidancePattern.number_of_swaths_right)
}

// .efdi.LineString line_string = 16;
inline bool GuidancePattern::has_line_string() const {
  return this != internal_default_instance() && line_string_ != NULL;
}
inline void GuidancePattern::clear_line_string() {
  if (GetArenaNoVirtual() == NULL && line_string_ != NULL) {
    delete line_string_;
  }
  line_string_ = NULL;
}
inline const ::efdi::LineString& GuidancePattern::line_string() const {
  const ::efdi::LineString* p = line_string_;
  // @@protoc_insertion_point(field_get:efdi.GuidancePattern.line_string)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::LineString*>(
      &::efdi::_LineString_default_instance_);
}
inline ::efdi::LineString* GuidancePattern::release_line_string() {
  // @@protoc_insertion_point(field_release:efdi.GuidancePattern.line_string)
  
  ::efdi::LineString* temp = line_string_;
  line_string_ = NULL;
  return temp;
}
inline ::efdi::LineString* GuidancePattern::mutable_line_string() {
  
  if (line_string_ == NULL) {
    line_string_ = new ::efdi::LineString;
  }
  // @@protoc_insertion_point(field_mutable:efdi.GuidancePattern.line_string)
  return line_string_;
}
inline void GuidancePattern::set_allocated_line_string(::efdi::LineString* line_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete line_string_;
  }
  if (line_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      line_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, line_string, submessage_arena);
    }
    
  } else {
    
  }
  line_string_ = line_string;
  // @@protoc_insertion_point(field_set_allocated:efdi.GuidancePattern.line_string)
}

// repeated .efdi.Polygon boundary_polygon = 17;
inline int GuidancePattern::boundary_polygon_size() const {
  return boundary_polygon_.size();
}
inline void GuidancePattern::clear_boundary_polygon() {
  boundary_polygon_.Clear();
}
inline const ::efdi::Polygon& GuidancePattern::boundary_polygon(int index) const {
  // @@protoc_insertion_point(field_get:efdi.GuidancePattern.boundary_polygon)
  return boundary_polygon_.Get(index);
}
inline ::efdi::Polygon* GuidancePattern::mutable_boundary_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.GuidancePattern.boundary_polygon)
  return boundary_polygon_.Mutable(index);
}
inline ::efdi::Polygon* GuidancePattern::add_boundary_polygon() {
  // @@protoc_insertion_point(field_add:efdi.GuidancePattern.boundary_polygon)
  return boundary_polygon_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::Polygon >*
GuidancePattern::mutable_boundary_polygon() {
  // @@protoc_insertion_point(field_mutable_list:efdi.GuidancePattern.boundary_polygon)
  return &boundary_polygon_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::Polygon >&
GuidancePattern::boundary_polygon() const {
  // @@protoc_insertion_point(field_list:efdi.GuidancePattern.boundary_polygon)
  return boundary_polygon_;
}

// repeated .google.protobuf.Any extension = 2048;
inline int GuidancePattern::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& GuidancePattern::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.GuidancePattern.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* GuidancePattern::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.GuidancePattern.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* GuidancePattern::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.GuidancePattern.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
GuidancePattern::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.GuidancePattern.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
GuidancePattern::extension() const {
  // @@protoc_insertion_point(field_list:efdi.GuidancePattern.extension)
  return extension_;
}

// -------------------------------------------------------------------

// GuidanceShift

// .efdi.UID guidance_group_id_ref = 1;
inline bool GuidanceShift::has_guidance_group_id_ref() const {
  return this != internal_default_instance() && guidance_group_id_ref_ != NULL;
}
inline void GuidanceShift::clear_guidance_group_id_ref() {
  if (GetArenaNoVirtual() == NULL && guidance_group_id_ref_ != NULL) {
    delete guidance_group_id_ref_;
  }
  guidance_group_id_ref_ = NULL;
}
inline const ::efdi::UID& GuidanceShift::guidance_group_id_ref() const {
  const ::efdi::UID* p = guidance_group_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.GuidanceShift.guidance_group_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* GuidanceShift::release_guidance_group_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.GuidanceShift.guidance_group_id_ref)
  
  ::efdi::UID* temp = guidance_group_id_ref_;
  guidance_group_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* GuidanceShift::mutable_guidance_group_id_ref() {
  
  if (guidance_group_id_ref_ == NULL) {
    guidance_group_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.GuidanceShift.guidance_group_id_ref)
  return guidance_group_id_ref_;
}
inline void GuidanceShift::set_allocated_guidance_group_id_ref(::efdi::UID* guidance_group_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete guidance_group_id_ref_;
  }
  if (guidance_group_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      guidance_group_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, guidance_group_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  guidance_group_id_ref_ = guidance_group_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.GuidanceShift.guidance_group_id_ref)
}

// .efdi.UID guidance_pattern_id_ref = 2;
inline bool GuidanceShift::has_guidance_pattern_id_ref() const {
  return this != internal_default_instance() && guidance_pattern_id_ref_ != NULL;
}
inline void GuidanceShift::clear_guidance_pattern_id_ref() {
  if (GetArenaNoVirtual() == NULL && guidance_pattern_id_ref_ != NULL) {
    delete guidance_pattern_id_ref_;
  }
  guidance_pattern_id_ref_ = NULL;
}
inline const ::efdi::UID& GuidanceShift::guidance_pattern_id_ref() const {
  const ::efdi::UID* p = guidance_pattern_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.GuidanceShift.guidance_pattern_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* GuidanceShift::release_guidance_pattern_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.GuidanceShift.guidance_pattern_id_ref)
  
  ::efdi::UID* temp = guidance_pattern_id_ref_;
  guidance_pattern_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* GuidanceShift::mutable_guidance_pattern_id_ref() {
  
  if (guidance_pattern_id_ref_ == NULL) {
    guidance_pattern_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.GuidanceShift.guidance_pattern_id_ref)
  return guidance_pattern_id_ref_;
}
inline void GuidanceShift::set_allocated_guidance_pattern_id_ref(::efdi::UID* guidance_pattern_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete guidance_pattern_id_ref_;
  }
  if (guidance_pattern_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      guidance_pattern_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, guidance_pattern_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  guidance_pattern_id_ref_ = guidance_pattern_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.GuidanceShift.guidance_pattern_id_ref)
}

// sint64 guidance_east_shift = 3;
inline void GuidanceShift::clear_guidance_east_shift() {
  guidance_east_shift_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GuidanceShift::guidance_east_shift() const {
  // @@protoc_insertion_point(field_get:efdi.GuidanceShift.guidance_east_shift)
  return guidance_east_shift_;
}
inline void GuidanceShift::set_guidance_east_shift(::google::protobuf::int64 value) {
  
  guidance_east_shift_ = value;
  // @@protoc_insertion_point(field_set:efdi.GuidanceShift.guidance_east_shift)
}

// sint64 guidance_north_shift = 4;
inline void GuidanceShift::clear_guidance_north_shift() {
  guidance_north_shift_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GuidanceShift::guidance_north_shift() const {
  // @@protoc_insertion_point(field_get:efdi.GuidanceShift.guidance_north_shift)
  return guidance_north_shift_;
}
inline void GuidanceShift::set_guidance_north_shift(::google::protobuf::int64 value) {
  
  guidance_north_shift_ = value;
  // @@protoc_insertion_point(field_set:efdi.GuidanceShift.guidance_north_shift)
}

// sint64 propagation_offset = 5;
inline void GuidanceShift::clear_propagation_offset() {
  propagation_offset_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GuidanceShift::propagation_offset() const {
  // @@protoc_insertion_point(field_get:efdi.GuidanceShift.propagation_offset)
  return propagation_offset_;
}
inline void GuidanceShift::set_propagation_offset(::google::protobuf::int64 value) {
  
  propagation_offset_ = value;
  // @@protoc_insertion_point(field_set:efdi.GuidanceShift.propagation_offset)
}

// .efdi.AllocationStamp allocation_stamp = 6;
inline bool GuidanceShift::has_allocation_stamp() const {
  return this != internal_default_instance() && allocation_stamp_ != NULL;
}
inline void GuidanceShift::clear_allocation_stamp() {
  if (GetArenaNoVirtual() == NULL && allocation_stamp_ != NULL) {
    delete allocation_stamp_;
  }
  allocation_stamp_ = NULL;
}
inline const ::efdi::AllocationStamp& GuidanceShift::allocation_stamp() const {
  const ::efdi::AllocationStamp* p = allocation_stamp_;
  // @@protoc_insertion_point(field_get:efdi.GuidanceShift.allocation_stamp)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::AllocationStamp*>(
      &::efdi::_AllocationStamp_default_instance_);
}
inline ::efdi::AllocationStamp* GuidanceShift::release_allocation_stamp() {
  // @@protoc_insertion_point(field_release:efdi.GuidanceShift.allocation_stamp)
  
  ::efdi::AllocationStamp* temp = allocation_stamp_;
  allocation_stamp_ = NULL;
  return temp;
}
inline ::efdi::AllocationStamp* GuidanceShift::mutable_allocation_stamp() {
  
  if (allocation_stamp_ == NULL) {
    allocation_stamp_ = new ::efdi::AllocationStamp;
  }
  // @@protoc_insertion_point(field_mutable:efdi.GuidanceShift.allocation_stamp)
  return allocation_stamp_;
}
inline void GuidanceShift::set_allocated_allocation_stamp(::efdi::AllocationStamp* allocation_stamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete allocation_stamp_;
  }
  if (allocation_stamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      allocation_stamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, allocation_stamp, submessage_arena);
    }
    
  } else {
    
  }
  allocation_stamp_ = allocation_stamp;
  // @@protoc_insertion_point(field_set_allocated:efdi.GuidanceShift.allocation_stamp)
}

// repeated .google.protobuf.Any extension = 2048;
inline int GuidanceShift::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& GuidanceShift::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.GuidanceShift.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* GuidanceShift::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.GuidanceShift.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* GuidanceShift::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.GuidanceShift.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
GuidanceShift::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.GuidanceShift.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
GuidanceShift::extension() const {
  // @@protoc_insertion_point(field_list:efdi.GuidanceShift.extension)
  return extension_;
}

// -------------------------------------------------------------------

// ISO11783_TaskData

// .efdi.ISO11783_TaskData.VersionMajor version_major = 1;
inline void ISO11783_TaskData::clear_version_major() {
  version_major_ = 0;
}
inline ::efdi::ISO11783_TaskData_VersionMajor ISO11783_TaskData::version_major() const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.version_major)
  return static_cast< ::efdi::ISO11783_TaskData_VersionMajor >(version_major_);
}
inline void ISO11783_TaskData::set_version_major(::efdi::ISO11783_TaskData_VersionMajor value) {
  
  version_major_ = value;
  // @@protoc_insertion_point(field_set:efdi.ISO11783_TaskData.version_major)
}

// uint32 version_minor = 2;
inline void ISO11783_TaskData::clear_version_minor() {
  version_minor_ = 0u;
}
inline ::google::protobuf::uint32 ISO11783_TaskData::version_minor() const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.version_minor)
  return version_minor_;
}
inline void ISO11783_TaskData::set_version_minor(::google::protobuf::uint32 value) {
  
  version_minor_ = value;
  // @@protoc_insertion_point(field_set:efdi.ISO11783_TaskData.version_minor)
}

// string management_software_manufacturer = 3;
inline void ISO11783_TaskData::clear_management_software_manufacturer() {
  management_software_manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ISO11783_TaskData::management_software_manufacturer() const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.management_software_manufacturer)
  return management_software_manufacturer_.GetNoArena();
}
inline void ISO11783_TaskData::set_management_software_manufacturer(const ::std::string& value) {
  
  management_software_manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.ISO11783_TaskData.management_software_manufacturer)
}
#if LANG_CXX11
inline void ISO11783_TaskData::set_management_software_manufacturer(::std::string&& value) {
  
  management_software_manufacturer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.ISO11783_TaskData.management_software_manufacturer)
}
#endif
inline void ISO11783_TaskData::set_management_software_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  management_software_manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.ISO11783_TaskData.management_software_manufacturer)
}
inline void ISO11783_TaskData::set_management_software_manufacturer(const char* value, size_t size) {
  
  management_software_manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.ISO11783_TaskData.management_software_manufacturer)
}
inline ::std::string* ISO11783_TaskData::mutable_management_software_manufacturer() {
  
  // @@protoc_insertion_point(field_mutable:efdi.ISO11783_TaskData.management_software_manufacturer)
  return management_software_manufacturer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ISO11783_TaskData::release_management_software_manufacturer() {
  // @@protoc_insertion_point(field_release:efdi.ISO11783_TaskData.management_software_manufacturer)
  
  return management_software_manufacturer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ISO11783_TaskData::set_allocated_management_software_manufacturer(::std::string* management_software_manufacturer) {
  if (management_software_manufacturer != NULL) {
    
  } else {
    
  }
  management_software_manufacturer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), management_software_manufacturer);
  // @@protoc_insertion_point(field_set_allocated:efdi.ISO11783_TaskData.management_software_manufacturer)
}

// string management_software_version = 4;
inline void ISO11783_TaskData::clear_management_software_version() {
  management_software_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ISO11783_TaskData::management_software_version() const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.management_software_version)
  return management_software_version_.GetNoArena();
}
inline void ISO11783_TaskData::set_management_software_version(const ::std::string& value) {
  
  management_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.ISO11783_TaskData.management_software_version)
}
#if LANG_CXX11
inline void ISO11783_TaskData::set_management_software_version(::std::string&& value) {
  
  management_software_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.ISO11783_TaskData.management_software_version)
}
#endif
inline void ISO11783_TaskData::set_management_software_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  management_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.ISO11783_TaskData.management_software_version)
}
inline void ISO11783_TaskData::set_management_software_version(const char* value, size_t size) {
  
  management_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.ISO11783_TaskData.management_software_version)
}
inline ::std::string* ISO11783_TaskData::mutable_management_software_version() {
  
  // @@protoc_insertion_point(field_mutable:efdi.ISO11783_TaskData.management_software_version)
  return management_software_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ISO11783_TaskData::release_management_software_version() {
  // @@protoc_insertion_point(field_release:efdi.ISO11783_TaskData.management_software_version)
  
  return management_software_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ISO11783_TaskData::set_allocated_management_software_version(::std::string* management_software_version) {
  if (management_software_version != NULL) {
    
  } else {
    
  }
  management_software_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), management_software_version);
  // @@protoc_insertion_point(field_set_allocated:efdi.ISO11783_TaskData.management_software_version)
}

// string task_controller_manufacturer = 5;
inline void ISO11783_TaskData::clear_task_controller_manufacturer() {
  task_controller_manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ISO11783_TaskData::task_controller_manufacturer() const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.task_controller_manufacturer)
  return task_controller_manufacturer_.GetNoArena();
}
inline void ISO11783_TaskData::set_task_controller_manufacturer(const ::std::string& value) {
  
  task_controller_manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.ISO11783_TaskData.task_controller_manufacturer)
}
#if LANG_CXX11
inline void ISO11783_TaskData::set_task_controller_manufacturer(::std::string&& value) {
  
  task_controller_manufacturer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.ISO11783_TaskData.task_controller_manufacturer)
}
#endif
inline void ISO11783_TaskData::set_task_controller_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  task_controller_manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.ISO11783_TaskData.task_controller_manufacturer)
}
inline void ISO11783_TaskData::set_task_controller_manufacturer(const char* value, size_t size) {
  
  task_controller_manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.ISO11783_TaskData.task_controller_manufacturer)
}
inline ::std::string* ISO11783_TaskData::mutable_task_controller_manufacturer() {
  
  // @@protoc_insertion_point(field_mutable:efdi.ISO11783_TaskData.task_controller_manufacturer)
  return task_controller_manufacturer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ISO11783_TaskData::release_task_controller_manufacturer() {
  // @@protoc_insertion_point(field_release:efdi.ISO11783_TaskData.task_controller_manufacturer)
  
  return task_controller_manufacturer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ISO11783_TaskData::set_allocated_task_controller_manufacturer(::std::string* task_controller_manufacturer) {
  if (task_controller_manufacturer != NULL) {
    
  } else {
    
  }
  task_controller_manufacturer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_controller_manufacturer);
  // @@protoc_insertion_point(field_set_allocated:efdi.ISO11783_TaskData.task_controller_manufacturer)
}

// string task_controller_version = 6;
inline void ISO11783_TaskData::clear_task_controller_version() {
  task_controller_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ISO11783_TaskData::task_controller_version() const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.task_controller_version)
  return task_controller_version_.GetNoArena();
}
inline void ISO11783_TaskData::set_task_controller_version(const ::std::string& value) {
  
  task_controller_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.ISO11783_TaskData.task_controller_version)
}
#if LANG_CXX11
inline void ISO11783_TaskData::set_task_controller_version(::std::string&& value) {
  
  task_controller_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.ISO11783_TaskData.task_controller_version)
}
#endif
inline void ISO11783_TaskData::set_task_controller_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  task_controller_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.ISO11783_TaskData.task_controller_version)
}
inline void ISO11783_TaskData::set_task_controller_version(const char* value, size_t size) {
  
  task_controller_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.ISO11783_TaskData.task_controller_version)
}
inline ::std::string* ISO11783_TaskData::mutable_task_controller_version() {
  
  // @@protoc_insertion_point(field_mutable:efdi.ISO11783_TaskData.task_controller_version)
  return task_controller_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ISO11783_TaskData::release_task_controller_version() {
  // @@protoc_insertion_point(field_release:efdi.ISO11783_TaskData.task_controller_version)
  
  return task_controller_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ISO11783_TaskData::set_allocated_task_controller_version(::std::string* task_controller_version) {
  if (task_controller_version != NULL) {
    
  } else {
    
  }
  task_controller_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_controller_version);
  // @@protoc_insertion_point(field_set_allocated:efdi.ISO11783_TaskData.task_controller_version)
}

// .efdi.ISO11783_TaskData.DataTransferOrigin data_transfer_origin = 7;
inline void ISO11783_TaskData::clear_data_transfer_origin() {
  data_transfer_origin_ = 0;
}
inline ::efdi::ISO11783_TaskData_DataTransferOrigin ISO11783_TaskData::data_transfer_origin() const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.data_transfer_origin)
  return static_cast< ::efdi::ISO11783_TaskData_DataTransferOrigin >(data_transfer_origin_);
}
inline void ISO11783_TaskData::set_data_transfer_origin(::efdi::ISO11783_TaskData_DataTransferOrigin value) {
  
  data_transfer_origin_ = value;
  // @@protoc_insertion_point(field_set:efdi.ISO11783_TaskData.data_transfer_origin)
}

// string data_transfer_language = 8;
inline void ISO11783_TaskData::clear_data_transfer_language() {
  data_transfer_language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ISO11783_TaskData::data_transfer_language() const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.data_transfer_language)
  return data_transfer_language_.GetNoArena();
}
inline void ISO11783_TaskData::set_data_transfer_language(const ::std::string& value) {
  
  data_transfer_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.ISO11783_TaskData.data_transfer_language)
}
#if LANG_CXX11
inline void ISO11783_TaskData::set_data_transfer_language(::std::string&& value) {
  
  data_transfer_language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.ISO11783_TaskData.data_transfer_language)
}
#endif
inline void ISO11783_TaskData::set_data_transfer_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_transfer_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.ISO11783_TaskData.data_transfer_language)
}
inline void ISO11783_TaskData::set_data_transfer_language(const char* value, size_t size) {
  
  data_transfer_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.ISO11783_TaskData.data_transfer_language)
}
inline ::std::string* ISO11783_TaskData::mutable_data_transfer_language() {
  
  // @@protoc_insertion_point(field_mutable:efdi.ISO11783_TaskData.data_transfer_language)
  return data_transfer_language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ISO11783_TaskData::release_data_transfer_language() {
  // @@protoc_insertion_point(field_release:efdi.ISO11783_TaskData.data_transfer_language)
  
  return data_transfer_language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ISO11783_TaskData::set_allocated_data_transfer_language(::std::string* data_transfer_language) {
  if (data_transfer_language != NULL) {
    
  } else {
    
  }
  data_transfer_language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_transfer_language);
  // @@protoc_insertion_point(field_set_allocated:efdi.ISO11783_TaskData.data_transfer_language)
}

// repeated .efdi.AttachedFile attached_file = 9;
inline int ISO11783_TaskData::attached_file_size() const {
  return attached_file_.size();
}
inline void ISO11783_TaskData::clear_attached_file() {
  attached_file_.Clear();
}
inline const ::efdi::AttachedFile& ISO11783_TaskData::attached_file(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.attached_file)
  return attached_file_.Get(index);
}
inline ::efdi::AttachedFile* ISO11783_TaskData::mutable_attached_file(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ISO11783_TaskData.attached_file)
  return attached_file_.Mutable(index);
}
inline ::efdi::AttachedFile* ISO11783_TaskData::add_attached_file() {
  // @@protoc_insertion_point(field_add:efdi.ISO11783_TaskData.attached_file)
  return attached_file_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::AttachedFile >*
ISO11783_TaskData::mutable_attached_file() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ISO11783_TaskData.attached_file)
  return &attached_file_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::AttachedFile >&
ISO11783_TaskData::attached_file() const {
  // @@protoc_insertion_point(field_list:efdi.ISO11783_TaskData.attached_file)
  return attached_file_;
}

// repeated .efdi.BaseStation base_station = 10;
inline int ISO11783_TaskData::base_station_size() const {
  return base_station_.size();
}
inline void ISO11783_TaskData::clear_base_station() {
  base_station_.Clear();
}
inline const ::efdi::BaseStation& ISO11783_TaskData::base_station(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.base_station)
  return base_station_.Get(index);
}
inline ::efdi::BaseStation* ISO11783_TaskData::mutable_base_station(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ISO11783_TaskData.base_station)
  return base_station_.Mutable(index);
}
inline ::efdi::BaseStation* ISO11783_TaskData::add_base_station() {
  // @@protoc_insertion_point(field_add:efdi.ISO11783_TaskData.base_station)
  return base_station_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::BaseStation >*
ISO11783_TaskData::mutable_base_station() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ISO11783_TaskData.base_station)
  return &base_station_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::BaseStation >&
ISO11783_TaskData::base_station() const {
  // @@protoc_insertion_point(field_list:efdi.ISO11783_TaskData.base_station)
  return base_station_;
}

// repeated .efdi.CodedComment coded_comment = 11;
inline int ISO11783_TaskData::coded_comment_size() const {
  return coded_comment_.size();
}
inline void ISO11783_TaskData::clear_coded_comment() {
  coded_comment_.Clear();
}
inline const ::efdi::CodedComment& ISO11783_TaskData::coded_comment(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.coded_comment)
  return coded_comment_.Get(index);
}
inline ::efdi::CodedComment* ISO11783_TaskData::mutable_coded_comment(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ISO11783_TaskData.coded_comment)
  return coded_comment_.Mutable(index);
}
inline ::efdi::CodedComment* ISO11783_TaskData::add_coded_comment() {
  // @@protoc_insertion_point(field_add:efdi.ISO11783_TaskData.coded_comment)
  return coded_comment_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::CodedComment >*
ISO11783_TaskData::mutable_coded_comment() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ISO11783_TaskData.coded_comment)
  return &coded_comment_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::CodedComment >&
ISO11783_TaskData::coded_comment() const {
  // @@protoc_insertion_point(field_list:efdi.ISO11783_TaskData.coded_comment)
  return coded_comment_;
}

// repeated .efdi.CodedCommentGroup coded_comment_group = 12;
inline int ISO11783_TaskData::coded_comment_group_size() const {
  return coded_comment_group_.size();
}
inline void ISO11783_TaskData::clear_coded_comment_group() {
  coded_comment_group_.Clear();
}
inline const ::efdi::CodedCommentGroup& ISO11783_TaskData::coded_comment_group(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.coded_comment_group)
  return coded_comment_group_.Get(index);
}
inline ::efdi::CodedCommentGroup* ISO11783_TaskData::mutable_coded_comment_group(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ISO11783_TaskData.coded_comment_group)
  return coded_comment_group_.Mutable(index);
}
inline ::efdi::CodedCommentGroup* ISO11783_TaskData::add_coded_comment_group() {
  // @@protoc_insertion_point(field_add:efdi.ISO11783_TaskData.coded_comment_group)
  return coded_comment_group_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::CodedCommentGroup >*
ISO11783_TaskData::mutable_coded_comment_group() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ISO11783_TaskData.coded_comment_group)
  return &coded_comment_group_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::CodedCommentGroup >&
ISO11783_TaskData::coded_comment_group() const {
  // @@protoc_insertion_point(field_list:efdi.ISO11783_TaskData.coded_comment_group)
  return coded_comment_group_;
}

// repeated .efdi.ColourLegend colour_legend = 13;
inline int ISO11783_TaskData::colour_legend_size() const {
  return colour_legend_.size();
}
inline void ISO11783_TaskData::clear_colour_legend() {
  colour_legend_.Clear();
}
inline const ::efdi::ColourLegend& ISO11783_TaskData::colour_legend(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.colour_legend)
  return colour_legend_.Get(index);
}
inline ::efdi::ColourLegend* ISO11783_TaskData::mutable_colour_legend(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ISO11783_TaskData.colour_legend)
  return colour_legend_.Mutable(index);
}
inline ::efdi::ColourLegend* ISO11783_TaskData::add_colour_legend() {
  // @@protoc_insertion_point(field_add:efdi.ISO11783_TaskData.colour_legend)
  return colour_legend_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::ColourLegend >*
ISO11783_TaskData::mutable_colour_legend() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ISO11783_TaskData.colour_legend)
  return &colour_legend_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::ColourLegend >&
ISO11783_TaskData::colour_legend() const {
  // @@protoc_insertion_point(field_list:efdi.ISO11783_TaskData.colour_legend)
  return colour_legend_;
}

// repeated .efdi.CropType crop_type = 14;
inline int ISO11783_TaskData::crop_type_size() const {
  return crop_type_.size();
}
inline void ISO11783_TaskData::clear_crop_type() {
  crop_type_.Clear();
}
inline const ::efdi::CropType& ISO11783_TaskData::crop_type(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.crop_type)
  return crop_type_.Get(index);
}
inline ::efdi::CropType* ISO11783_TaskData::mutable_crop_type(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ISO11783_TaskData.crop_type)
  return crop_type_.Mutable(index);
}
inline ::efdi::CropType* ISO11783_TaskData::add_crop_type() {
  // @@protoc_insertion_point(field_add:efdi.ISO11783_TaskData.crop_type)
  return crop_type_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::CropType >*
ISO11783_TaskData::mutable_crop_type() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ISO11783_TaskData.crop_type)
  return &crop_type_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::CropType >&
ISO11783_TaskData::crop_type() const {
  // @@protoc_insertion_point(field_list:efdi.ISO11783_TaskData.crop_type)
  return crop_type_;
}

// repeated .efdi.CulturalPractice cultural_practice = 15;
inline int ISO11783_TaskData::cultural_practice_size() const {
  return cultural_practice_.size();
}
inline void ISO11783_TaskData::clear_cultural_practice() {
  cultural_practice_.Clear();
}
inline const ::efdi::CulturalPractice& ISO11783_TaskData::cultural_practice(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.cultural_practice)
  return cultural_practice_.Get(index);
}
inline ::efdi::CulturalPractice* ISO11783_TaskData::mutable_cultural_practice(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ISO11783_TaskData.cultural_practice)
  return cultural_practice_.Mutable(index);
}
inline ::efdi::CulturalPractice* ISO11783_TaskData::add_cultural_practice() {
  // @@protoc_insertion_point(field_add:efdi.ISO11783_TaskData.cultural_practice)
  return cultural_practice_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::CulturalPractice >*
ISO11783_TaskData::mutable_cultural_practice() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ISO11783_TaskData.cultural_practice)
  return &cultural_practice_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::CulturalPractice >&
ISO11783_TaskData::cultural_practice() const {
  // @@protoc_insertion_point(field_list:efdi.ISO11783_TaskData.cultural_practice)
  return cultural_practice_;
}

// repeated .efdi.Customer customer = 16;
inline int ISO11783_TaskData::customer_size() const {
  return customer_.size();
}
inline void ISO11783_TaskData::clear_customer() {
  customer_.Clear();
}
inline const ::efdi::Customer& ISO11783_TaskData::customer(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.customer)
  return customer_.Get(index);
}
inline ::efdi::Customer* ISO11783_TaskData::mutable_customer(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ISO11783_TaskData.customer)
  return customer_.Mutable(index);
}
inline ::efdi::Customer* ISO11783_TaskData::add_customer() {
  // @@protoc_insertion_point(field_add:efdi.ISO11783_TaskData.customer)
  return customer_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::Customer >*
ISO11783_TaskData::mutable_customer() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ISO11783_TaskData.customer)
  return &customer_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::Customer >&
ISO11783_TaskData::customer() const {
  // @@protoc_insertion_point(field_list:efdi.ISO11783_TaskData.customer)
  return customer_;
}

// repeated .efdi.Device device = 17;
inline int ISO11783_TaskData::device_size() const {
  return device_.size();
}
inline void ISO11783_TaskData::clear_device() {
  device_.Clear();
}
inline const ::efdi::Device& ISO11783_TaskData::device(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.device)
  return device_.Get(index);
}
inline ::efdi::Device* ISO11783_TaskData::mutable_device(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ISO11783_TaskData.device)
  return device_.Mutable(index);
}
inline ::efdi::Device* ISO11783_TaskData::add_device() {
  // @@protoc_insertion_point(field_add:efdi.ISO11783_TaskData.device)
  return device_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::Device >*
ISO11783_TaskData::mutable_device() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ISO11783_TaskData.device)
  return &device_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::Device >&
ISO11783_TaskData::device() const {
  // @@protoc_insertion_point(field_list:efdi.ISO11783_TaskData.device)
  return device_;
}

// repeated .efdi.Farm farm = 18;
inline int ISO11783_TaskData::farm_size() const {
  return farm_.size();
}
inline void ISO11783_TaskData::clear_farm() {
  farm_.Clear();
}
inline const ::efdi::Farm& ISO11783_TaskData::farm(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.farm)
  return farm_.Get(index);
}
inline ::efdi::Farm* ISO11783_TaskData::mutable_farm(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ISO11783_TaskData.farm)
  return farm_.Mutable(index);
}
inline ::efdi::Farm* ISO11783_TaskData::add_farm() {
  // @@protoc_insertion_point(field_add:efdi.ISO11783_TaskData.farm)
  return farm_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::Farm >*
ISO11783_TaskData::mutable_farm() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ISO11783_TaskData.farm)
  return &farm_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::Farm >&
ISO11783_TaskData::farm() const {
  // @@protoc_insertion_point(field_list:efdi.ISO11783_TaskData.farm)
  return farm_;
}

// repeated .efdi.OperationTechnique operation_technique = 19;
inline int ISO11783_TaskData::operation_technique_size() const {
  return operation_technique_.size();
}
inline void ISO11783_TaskData::clear_operation_technique() {
  operation_technique_.Clear();
}
inline const ::efdi::OperationTechnique& ISO11783_TaskData::operation_technique(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.operation_technique)
  return operation_technique_.Get(index);
}
inline ::efdi::OperationTechnique* ISO11783_TaskData::mutable_operation_technique(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ISO11783_TaskData.operation_technique)
  return operation_technique_.Mutable(index);
}
inline ::efdi::OperationTechnique* ISO11783_TaskData::add_operation_technique() {
  // @@protoc_insertion_point(field_add:efdi.ISO11783_TaskData.operation_technique)
  return operation_technique_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::OperationTechnique >*
ISO11783_TaskData::mutable_operation_technique() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ISO11783_TaskData.operation_technique)
  return &operation_technique_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::OperationTechnique >&
ISO11783_TaskData::operation_technique() const {
  // @@protoc_insertion_point(field_list:efdi.ISO11783_TaskData.operation_technique)
  return operation_technique_;
}

// repeated .efdi.Partfield partfield = 20;
inline int ISO11783_TaskData::partfield_size() const {
  return partfield_.size();
}
inline void ISO11783_TaskData::clear_partfield() {
  partfield_.Clear();
}
inline const ::efdi::Partfield& ISO11783_TaskData::partfield(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.partfield)
  return partfield_.Get(index);
}
inline ::efdi::Partfield* ISO11783_TaskData::mutable_partfield(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ISO11783_TaskData.partfield)
  return partfield_.Mutable(index);
}
inline ::efdi::Partfield* ISO11783_TaskData::add_partfield() {
  // @@protoc_insertion_point(field_add:efdi.ISO11783_TaskData.partfield)
  return partfield_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::Partfield >*
ISO11783_TaskData::mutable_partfield() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ISO11783_TaskData.partfield)
  return &partfield_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::Partfield >&
ISO11783_TaskData::partfield() const {
  // @@protoc_insertion_point(field_list:efdi.ISO11783_TaskData.partfield)
  return partfield_;
}

// repeated .efdi.Product product = 21;
inline int ISO11783_TaskData::product_size() const {
  return product_.size();
}
inline void ISO11783_TaskData::clear_product() {
  product_.Clear();
}
inline const ::efdi::Product& ISO11783_TaskData::product(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.product)
  return product_.Get(index);
}
inline ::efdi::Product* ISO11783_TaskData::mutable_product(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ISO11783_TaskData.product)
  return product_.Mutable(index);
}
inline ::efdi::Product* ISO11783_TaskData::add_product() {
  // @@protoc_insertion_point(field_add:efdi.ISO11783_TaskData.product)
  return product_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::Product >*
ISO11783_TaskData::mutable_product() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ISO11783_TaskData.product)
  return &product_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::Product >&
ISO11783_TaskData::product() const {
  // @@protoc_insertion_point(field_list:efdi.ISO11783_TaskData.product)
  return product_;
}

// repeated .efdi.ProductGroup product_group = 22;
inline int ISO11783_TaskData::product_group_size() const {
  return product_group_.size();
}
inline void ISO11783_TaskData::clear_product_group() {
  product_group_.Clear();
}
inline const ::efdi::ProductGroup& ISO11783_TaskData::product_group(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.product_group)
  return product_group_.Get(index);
}
inline ::efdi::ProductGroup* ISO11783_TaskData::mutable_product_group(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ISO11783_TaskData.product_group)
  return product_group_.Mutable(index);
}
inline ::efdi::ProductGroup* ISO11783_TaskData::add_product_group() {
  // @@protoc_insertion_point(field_add:efdi.ISO11783_TaskData.product_group)
  return product_group_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::ProductGroup >*
ISO11783_TaskData::mutable_product_group() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ISO11783_TaskData.product_group)
  return &product_group_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::ProductGroup >&
ISO11783_TaskData::product_group() const {
  // @@protoc_insertion_point(field_list:efdi.ISO11783_TaskData.product_group)
  return product_group_;
}

// repeated .efdi.Task task = 23;
inline int ISO11783_TaskData::task_size() const {
  return task_.size();
}
inline void ISO11783_TaskData::clear_task() {
  task_.Clear();
}
inline const ::efdi::Task& ISO11783_TaskData::task(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.task)
  return task_.Get(index);
}
inline ::efdi::Task* ISO11783_TaskData::mutable_task(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ISO11783_TaskData.task)
  return task_.Mutable(index);
}
inline ::efdi::Task* ISO11783_TaskData::add_task() {
  // @@protoc_insertion_point(field_add:efdi.ISO11783_TaskData.task)
  return task_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::Task >*
ISO11783_TaskData::mutable_task() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ISO11783_TaskData.task)
  return &task_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::Task >&
ISO11783_TaskData::task() const {
  // @@protoc_insertion_point(field_list:efdi.ISO11783_TaskData.task)
  return task_;
}

// repeated .efdi.TaskControllerCapabilities task_controller_capabilities = 24;
inline int ISO11783_TaskData::task_controller_capabilities_size() const {
  return task_controller_capabilities_.size();
}
inline void ISO11783_TaskData::clear_task_controller_capabilities() {
  task_controller_capabilities_.Clear();
}
inline const ::efdi::TaskControllerCapabilities& ISO11783_TaskData::task_controller_capabilities(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.task_controller_capabilities)
  return task_controller_capabilities_.Get(index);
}
inline ::efdi::TaskControllerCapabilities* ISO11783_TaskData::mutable_task_controller_capabilities(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ISO11783_TaskData.task_controller_capabilities)
  return task_controller_capabilities_.Mutable(index);
}
inline ::efdi::TaskControllerCapabilities* ISO11783_TaskData::add_task_controller_capabilities() {
  // @@protoc_insertion_point(field_add:efdi.ISO11783_TaskData.task_controller_capabilities)
  return task_controller_capabilities_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::TaskControllerCapabilities >*
ISO11783_TaskData::mutable_task_controller_capabilities() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ISO11783_TaskData.task_controller_capabilities)
  return &task_controller_capabilities_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::TaskControllerCapabilities >&
ISO11783_TaskData::task_controller_capabilities() const {
  // @@protoc_insertion_point(field_list:efdi.ISO11783_TaskData.task_controller_capabilities)
  return task_controller_capabilities_;
}

// repeated .efdi.ValuePresentation value_presentation = 25;
inline int ISO11783_TaskData::value_presentation_size() const {
  return value_presentation_.size();
}
inline void ISO11783_TaskData::clear_value_presentation() {
  value_presentation_.Clear();
}
inline const ::efdi::ValuePresentation& ISO11783_TaskData::value_presentation(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.value_presentation)
  return value_presentation_.Get(index);
}
inline ::efdi::ValuePresentation* ISO11783_TaskData::mutable_value_presentation(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ISO11783_TaskData.value_presentation)
  return value_presentation_.Mutable(index);
}
inline ::efdi::ValuePresentation* ISO11783_TaskData::add_value_presentation() {
  // @@protoc_insertion_point(field_add:efdi.ISO11783_TaskData.value_presentation)
  return value_presentation_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::ValuePresentation >*
ISO11783_TaskData::mutable_value_presentation() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ISO11783_TaskData.value_presentation)
  return &value_presentation_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::ValuePresentation >&
ISO11783_TaskData::value_presentation() const {
  // @@protoc_insertion_point(field_list:efdi.ISO11783_TaskData.value_presentation)
  return value_presentation_;
}

// repeated .efdi.Worker worker = 26;
inline int ISO11783_TaskData::worker_size() const {
  return worker_.size();
}
inline void ISO11783_TaskData::clear_worker() {
  worker_.Clear();
}
inline const ::efdi::Worker& ISO11783_TaskData::worker(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.worker)
  return worker_.Get(index);
}
inline ::efdi::Worker* ISO11783_TaskData::mutable_worker(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ISO11783_TaskData.worker)
  return worker_.Mutable(index);
}
inline ::efdi::Worker* ISO11783_TaskData::add_worker() {
  // @@protoc_insertion_point(field_add:efdi.ISO11783_TaskData.worker)
  return worker_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::Worker >*
ISO11783_TaskData::mutable_worker() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ISO11783_TaskData.worker)
  return &worker_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::Worker >&
ISO11783_TaskData::worker() const {
  // @@protoc_insertion_point(field_list:efdi.ISO11783_TaskData.worker)
  return worker_;
}

// repeated .efdi.ExternalFileReference external_file_reference = 27;
inline int ISO11783_TaskData::external_file_reference_size() const {
  return external_file_reference_.size();
}
inline void ISO11783_TaskData::clear_external_file_reference() {
  external_file_reference_.Clear();
}
inline const ::efdi::ExternalFileReference& ISO11783_TaskData::external_file_reference(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.external_file_reference)
  return external_file_reference_.Get(index);
}
inline ::efdi::ExternalFileReference* ISO11783_TaskData::mutable_external_file_reference(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ISO11783_TaskData.external_file_reference)
  return external_file_reference_.Mutable(index);
}
inline ::efdi::ExternalFileReference* ISO11783_TaskData::add_external_file_reference() {
  // @@protoc_insertion_point(field_add:efdi.ISO11783_TaskData.external_file_reference)
  return external_file_reference_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::ExternalFileReference >*
ISO11783_TaskData::mutable_external_file_reference() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ISO11783_TaskData.external_file_reference)
  return &external_file_reference_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::ExternalFileReference >&
ISO11783_TaskData::external_file_reference() const {
  // @@protoc_insertion_point(field_list:efdi.ISO11783_TaskData.external_file_reference)
  return external_file_reference_;
}

// repeated .google.protobuf.Any extension = 2048;
inline int ISO11783_TaskData::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& ISO11783_TaskData::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ISO11783_TaskData.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* ISO11783_TaskData::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ISO11783_TaskData.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* ISO11783_TaskData::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.ISO11783_TaskData.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
ISO11783_TaskData::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ISO11783_TaskData.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
ISO11783_TaskData::extension() const {
  // @@protoc_insertion_point(field_list:efdi.ISO11783_TaskData.extension)
  return extension_;
}

// -------------------------------------------------------------------

// LineString

// .efdi.LineString.LinestringType line_string_type = 1;
inline void LineString::clear_line_string_type() {
  line_string_type_ = 0;
}
inline ::efdi::LineString_LinestringType LineString::line_string_type() const {
  // @@protoc_insertion_point(field_get:efdi.LineString.line_string_type)
  return static_cast< ::efdi::LineString_LinestringType >(line_string_type_);
}
inline void LineString::set_line_string_type(::efdi::LineString_LinestringType value) {
  
  line_string_type_ = value;
  // @@protoc_insertion_point(field_set:efdi.LineString.line_string_type)
}

// string line_string_designator = 2;
inline void LineString::clear_line_string_designator() {
  line_string_designator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LineString::line_string_designator() const {
  // @@protoc_insertion_point(field_get:efdi.LineString.line_string_designator)
  return line_string_designator_.GetNoArena();
}
inline void LineString::set_line_string_designator(const ::std::string& value) {
  
  line_string_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.LineString.line_string_designator)
}
#if LANG_CXX11
inline void LineString::set_line_string_designator(::std::string&& value) {
  
  line_string_designator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.LineString.line_string_designator)
}
#endif
inline void LineString::set_line_string_designator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  line_string_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.LineString.line_string_designator)
}
inline void LineString::set_line_string_designator(const char* value, size_t size) {
  
  line_string_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.LineString.line_string_designator)
}
inline ::std::string* LineString::mutable_line_string_designator() {
  
  // @@protoc_insertion_point(field_mutable:efdi.LineString.line_string_designator)
  return line_string_designator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LineString::release_line_string_designator() {
  // @@protoc_insertion_point(field_release:efdi.LineString.line_string_designator)
  
  return line_string_designator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LineString::set_allocated_line_string_designator(::std::string* line_string_designator) {
  if (line_string_designator != NULL) {
    
  } else {
    
  }
  line_string_designator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line_string_designator);
  // @@protoc_insertion_point(field_set_allocated:efdi.LineString.line_string_designator)
}

// uint32 line_string_width = 3;
inline void LineString::clear_line_string_width() {
  line_string_width_ = 0u;
}
inline ::google::protobuf::uint32 LineString::line_string_width() const {
  // @@protoc_insertion_point(field_get:efdi.LineString.line_string_width)
  return line_string_width_;
}
inline void LineString::set_line_string_width(::google::protobuf::uint32 value) {
  
  line_string_width_ = value;
  // @@protoc_insertion_point(field_set:efdi.LineString.line_string_width)
}

// uint32 line_string_length = 4;
inline void LineString::clear_line_string_length() {
  line_string_length_ = 0u;
}
inline ::google::protobuf::uint32 LineString::line_string_length() const {
  // @@protoc_insertion_point(field_get:efdi.LineString.line_string_length)
  return line_string_length_;
}
inline void LineString::set_line_string_length(::google::protobuf::uint32 value) {
  
  line_string_length_ = value;
  // @@protoc_insertion_point(field_set:efdi.LineString.line_string_length)
}

// uint32 line_string_colour = 5;
inline void LineString::clear_line_string_colour() {
  line_string_colour_ = 0u;
}
inline ::google::protobuf::uint32 LineString::line_string_colour() const {
  // @@protoc_insertion_point(field_get:efdi.LineString.line_string_colour)
  return line_string_colour_;
}
inline void LineString::set_line_string_colour(::google::protobuf::uint32 value) {
  
  line_string_colour_ = value;
  // @@protoc_insertion_point(field_set:efdi.LineString.line_string_colour)
}

// .efdi.UID line_string_id = 6;
inline bool LineString::has_line_string_id() const {
  return this != internal_default_instance() && line_string_id_ != NULL;
}
inline void LineString::clear_line_string_id() {
  if (GetArenaNoVirtual() == NULL && line_string_id_ != NULL) {
    delete line_string_id_;
  }
  line_string_id_ = NULL;
}
inline const ::efdi::UID& LineString::line_string_id() const {
  const ::efdi::UID* p = line_string_id_;
  // @@protoc_insertion_point(field_get:efdi.LineString.line_string_id)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* LineString::release_line_string_id() {
  // @@protoc_insertion_point(field_release:efdi.LineString.line_string_id)
  
  ::efdi::UID* temp = line_string_id_;
  line_string_id_ = NULL;
  return temp;
}
inline ::efdi::UID* LineString::mutable_line_string_id() {
  
  if (line_string_id_ == NULL) {
    line_string_id_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.LineString.line_string_id)
  return line_string_id_;
}
inline void LineString::set_allocated_line_string_id(::efdi::UID* line_string_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete line_string_id_;
  }
  if (line_string_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      line_string_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, line_string_id, submessage_arena);
    }
    
  } else {
    
  }
  line_string_id_ = line_string_id;
  // @@protoc_insertion_point(field_set_allocated:efdi.LineString.line_string_id)
}

// repeated .efdi.Point point = 7;
inline int LineString::point_size() const {
  return point_.size();
}
inline void LineString::clear_point() {
  point_.Clear();
}
inline const ::efdi::Point& LineString::point(int index) const {
  // @@protoc_insertion_point(field_get:efdi.LineString.point)
  return point_.Get(index);
}
inline ::efdi::Point* LineString::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.LineString.point)
  return point_.Mutable(index);
}
inline ::efdi::Point* LineString::add_point() {
  // @@protoc_insertion_point(field_add:efdi.LineString.point)
  return point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::Point >*
LineString::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:efdi.LineString.point)
  return &point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::Point >&
LineString::point() const {
  // @@protoc_insertion_point(field_list:efdi.LineString.point)
  return point_;
}

// repeated .google.protobuf.Any extension = 2048;
inline int LineString::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& LineString::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.LineString.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* LineString::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.LineString.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* LineString::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.LineString.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
LineString::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.LineString.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
LineString::extension() const {
  // @@protoc_insertion_point(field_list:efdi.LineString.extension)
  return extension_;
}

// -------------------------------------------------------------------

// OperationTechnique

// .efdi.UID operation_technique_id = 1;
inline bool OperationTechnique::has_operation_technique_id() const {
  return this != internal_default_instance() && operation_technique_id_ != NULL;
}
inline void OperationTechnique::clear_operation_technique_id() {
  if (GetArenaNoVirtual() == NULL && operation_technique_id_ != NULL) {
    delete operation_technique_id_;
  }
  operation_technique_id_ = NULL;
}
inline const ::efdi::UID& OperationTechnique::operation_technique_id() const {
  const ::efdi::UID* p = operation_technique_id_;
  // @@protoc_insertion_point(field_get:efdi.OperationTechnique.operation_technique_id)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* OperationTechnique::release_operation_technique_id() {
  // @@protoc_insertion_point(field_release:efdi.OperationTechnique.operation_technique_id)
  
  ::efdi::UID* temp = operation_technique_id_;
  operation_technique_id_ = NULL;
  return temp;
}
inline ::efdi::UID* OperationTechnique::mutable_operation_technique_id() {
  
  if (operation_technique_id_ == NULL) {
    operation_technique_id_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.OperationTechnique.operation_technique_id)
  return operation_technique_id_;
}
inline void OperationTechnique::set_allocated_operation_technique_id(::efdi::UID* operation_technique_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operation_technique_id_;
  }
  if (operation_technique_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      operation_technique_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, operation_technique_id, submessage_arena);
    }
    
  } else {
    
  }
  operation_technique_id_ = operation_technique_id;
  // @@protoc_insertion_point(field_set_allocated:efdi.OperationTechnique.operation_technique_id)
}

// string operation_technique_designator = 2;
inline void OperationTechnique::clear_operation_technique_designator() {
  operation_technique_designator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OperationTechnique::operation_technique_designator() const {
  // @@protoc_insertion_point(field_get:efdi.OperationTechnique.operation_technique_designator)
  return operation_technique_designator_.GetNoArena();
}
inline void OperationTechnique::set_operation_technique_designator(const ::std::string& value) {
  
  operation_technique_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.OperationTechnique.operation_technique_designator)
}
#if LANG_CXX11
inline void OperationTechnique::set_operation_technique_designator(::std::string&& value) {
  
  operation_technique_designator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.OperationTechnique.operation_technique_designator)
}
#endif
inline void OperationTechnique::set_operation_technique_designator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  operation_technique_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.OperationTechnique.operation_technique_designator)
}
inline void OperationTechnique::set_operation_technique_designator(const char* value, size_t size) {
  
  operation_technique_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.OperationTechnique.operation_technique_designator)
}
inline ::std::string* OperationTechnique::mutable_operation_technique_designator() {
  
  // @@protoc_insertion_point(field_mutable:efdi.OperationTechnique.operation_technique_designator)
  return operation_technique_designator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OperationTechnique::release_operation_technique_designator() {
  // @@protoc_insertion_point(field_release:efdi.OperationTechnique.operation_technique_designator)
  
  return operation_technique_designator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperationTechnique::set_allocated_operation_technique_designator(::std::string* operation_technique_designator) {
  if (operation_technique_designator != NULL) {
    
  } else {
    
  }
  operation_technique_designator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation_technique_designator);
  // @@protoc_insertion_point(field_set_allocated:efdi.OperationTechnique.operation_technique_designator)
}

// repeated .google.protobuf.Any extension = 2048;
inline int OperationTechnique::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& OperationTechnique::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.OperationTechnique.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* OperationTechnique::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.OperationTechnique.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* OperationTechnique::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.OperationTechnique.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
OperationTechnique::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.OperationTechnique.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
OperationTechnique::extension() const {
  // @@protoc_insertion_point(field_list:efdi.OperationTechnique.extension)
  return extension_;
}

// -------------------------------------------------------------------

// OperationTechniqueReference

// .efdi.UID operation_technique_id_ref = 1;
inline bool OperationTechniqueReference::has_operation_technique_id_ref() const {
  return this != internal_default_instance() && operation_technique_id_ref_ != NULL;
}
inline void OperationTechniqueReference::clear_operation_technique_id_ref() {
  if (GetArenaNoVirtual() == NULL && operation_technique_id_ref_ != NULL) {
    delete operation_technique_id_ref_;
  }
  operation_technique_id_ref_ = NULL;
}
inline const ::efdi::UID& OperationTechniqueReference::operation_technique_id_ref() const {
  const ::efdi::UID* p = operation_technique_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.OperationTechniqueReference.operation_technique_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* OperationTechniqueReference::release_operation_technique_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.OperationTechniqueReference.operation_technique_id_ref)
  
  ::efdi::UID* temp = operation_technique_id_ref_;
  operation_technique_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* OperationTechniqueReference::mutable_operation_technique_id_ref() {
  
  if (operation_technique_id_ref_ == NULL) {
    operation_technique_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.OperationTechniqueReference.operation_technique_id_ref)
  return operation_technique_id_ref_;
}
inline void OperationTechniqueReference::set_allocated_operation_technique_id_ref(::efdi::UID* operation_technique_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operation_technique_id_ref_;
  }
  if (operation_technique_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      operation_technique_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, operation_technique_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  operation_technique_id_ref_ = operation_technique_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.OperationTechniqueReference.operation_technique_id_ref)
}

// repeated .google.protobuf.Any extension = 2048;
inline int OperationTechniqueReference::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& OperationTechniqueReference::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.OperationTechniqueReference.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* OperationTechniqueReference::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.OperationTechniqueReference.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* OperationTechniqueReference::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.OperationTechniqueReference.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
OperationTechniqueReference::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.OperationTechniqueReference.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
OperationTechniqueReference::extension() const {
  // @@protoc_insertion_point(field_list:efdi.OperationTechniqueReference.extension)
  return extension_;
}

// -------------------------------------------------------------------

// OperTechPractice

// .efdi.UID cultural_practice_id_ref = 1;
inline bool OperTechPractice::has_cultural_practice_id_ref() const {
  return this != internal_default_instance() && cultural_practice_id_ref_ != NULL;
}
inline void OperTechPractice::clear_cultural_practice_id_ref() {
  if (GetArenaNoVirtual() == NULL && cultural_practice_id_ref_ != NULL) {
    delete cultural_practice_id_ref_;
  }
  cultural_practice_id_ref_ = NULL;
}
inline const ::efdi::UID& OperTechPractice::cultural_practice_id_ref() const {
  const ::efdi::UID* p = cultural_practice_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.OperTechPractice.cultural_practice_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* OperTechPractice::release_cultural_practice_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.OperTechPractice.cultural_practice_id_ref)
  
  ::efdi::UID* temp = cultural_practice_id_ref_;
  cultural_practice_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* OperTechPractice::mutable_cultural_practice_id_ref() {
  
  if (cultural_practice_id_ref_ == NULL) {
    cultural_practice_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.OperTechPractice.cultural_practice_id_ref)
  return cultural_practice_id_ref_;
}
inline void OperTechPractice::set_allocated_cultural_practice_id_ref(::efdi::UID* cultural_practice_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cultural_practice_id_ref_;
  }
  if (cultural_practice_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cultural_practice_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cultural_practice_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  cultural_practice_id_ref_ = cultural_practice_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.OperTechPractice.cultural_practice_id_ref)
}

// .efdi.UID operation_technique_id_ref = 2;
inline bool OperTechPractice::has_operation_technique_id_ref() const {
  return this != internal_default_instance() && operation_technique_id_ref_ != NULL;
}
inline void OperTechPractice::clear_operation_technique_id_ref() {
  if (GetArenaNoVirtual() == NULL && operation_technique_id_ref_ != NULL) {
    delete operation_technique_id_ref_;
  }
  operation_technique_id_ref_ = NULL;
}
inline const ::efdi::UID& OperTechPractice::operation_technique_id_ref() const {
  const ::efdi::UID* p = operation_technique_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.OperTechPractice.operation_technique_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* OperTechPractice::release_operation_technique_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.OperTechPractice.operation_technique_id_ref)
  
  ::efdi::UID* temp = operation_technique_id_ref_;
  operation_technique_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* OperTechPractice::mutable_operation_technique_id_ref() {
  
  if (operation_technique_id_ref_ == NULL) {
    operation_technique_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.OperTechPractice.operation_technique_id_ref)
  return operation_technique_id_ref_;
}
inline void OperTechPractice::set_allocated_operation_technique_id_ref(::efdi::UID* operation_technique_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete operation_technique_id_ref_;
  }
  if (operation_technique_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      operation_technique_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, operation_technique_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  operation_technique_id_ref_ = operation_technique_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.OperTechPractice.operation_technique_id_ref)
}

// repeated .google.protobuf.Any extension = 2048;
inline int OperTechPractice::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& OperTechPractice::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.OperTechPractice.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* OperTechPractice::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.OperTechPractice.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* OperTechPractice::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.OperTechPractice.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
OperTechPractice::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.OperTechPractice.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
OperTechPractice::extension() const {
  // @@protoc_insertion_point(field_list:efdi.OperTechPractice.extension)
  return extension_;
}

// -------------------------------------------------------------------

// Partfield

// .efdi.UID partfield_id = 1;
inline bool Partfield::has_partfield_id() const {
  return this != internal_default_instance() && partfield_id_ != NULL;
}
inline void Partfield::clear_partfield_id() {
  if (GetArenaNoVirtual() == NULL && partfield_id_ != NULL) {
    delete partfield_id_;
  }
  partfield_id_ = NULL;
}
inline const ::efdi::UID& Partfield::partfield_id() const {
  const ::efdi::UID* p = partfield_id_;
  // @@protoc_insertion_point(field_get:efdi.Partfield.partfield_id)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* Partfield::release_partfield_id() {
  // @@protoc_insertion_point(field_release:efdi.Partfield.partfield_id)
  
  ::efdi::UID* temp = partfield_id_;
  partfield_id_ = NULL;
  return temp;
}
inline ::efdi::UID* Partfield::mutable_partfield_id() {
  
  if (partfield_id_ == NULL) {
    partfield_id_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Partfield.partfield_id)
  return partfield_id_;
}
inline void Partfield::set_allocated_partfield_id(::efdi::UID* partfield_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete partfield_id_;
  }
  if (partfield_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      partfield_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, partfield_id, submessage_arena);
    }
    
  } else {
    
  }
  partfield_id_ = partfield_id;
  // @@protoc_insertion_point(field_set_allocated:efdi.Partfield.partfield_id)
}

// string partfield_code = 2;
inline void Partfield::clear_partfield_code() {
  partfield_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Partfield::partfield_code() const {
  // @@protoc_insertion_point(field_get:efdi.Partfield.partfield_code)
  return partfield_code_.GetNoArena();
}
inline void Partfield::set_partfield_code(const ::std::string& value) {
  
  partfield_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Partfield.partfield_code)
}
#if LANG_CXX11
inline void Partfield::set_partfield_code(::std::string&& value) {
  
  partfield_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Partfield.partfield_code)
}
#endif
inline void Partfield::set_partfield_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  partfield_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Partfield.partfield_code)
}
inline void Partfield::set_partfield_code(const char* value, size_t size) {
  
  partfield_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Partfield.partfield_code)
}
inline ::std::string* Partfield::mutable_partfield_code() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Partfield.partfield_code)
  return partfield_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Partfield::release_partfield_code() {
  // @@protoc_insertion_point(field_release:efdi.Partfield.partfield_code)
  
  return partfield_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Partfield::set_allocated_partfield_code(::std::string* partfield_code) {
  if (partfield_code != NULL) {
    
  } else {
    
  }
  partfield_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partfield_code);
  // @@protoc_insertion_point(field_set_allocated:efdi.Partfield.partfield_code)
}

// string partfield_designator = 3;
inline void Partfield::clear_partfield_designator() {
  partfield_designator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Partfield::partfield_designator() const {
  // @@protoc_insertion_point(field_get:efdi.Partfield.partfield_designator)
  return partfield_designator_.GetNoArena();
}
inline void Partfield::set_partfield_designator(const ::std::string& value) {
  
  partfield_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Partfield.partfield_designator)
}
#if LANG_CXX11
inline void Partfield::set_partfield_designator(::std::string&& value) {
  
  partfield_designator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Partfield.partfield_designator)
}
#endif
inline void Partfield::set_partfield_designator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  partfield_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Partfield.partfield_designator)
}
inline void Partfield::set_partfield_designator(const char* value, size_t size) {
  
  partfield_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Partfield.partfield_designator)
}
inline ::std::string* Partfield::mutable_partfield_designator() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Partfield.partfield_designator)
  return partfield_designator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Partfield::release_partfield_designator() {
  // @@protoc_insertion_point(field_release:efdi.Partfield.partfield_designator)
  
  return partfield_designator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Partfield::set_allocated_partfield_designator(::std::string* partfield_designator) {
  if (partfield_designator != NULL) {
    
  } else {
    
  }
  partfield_designator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partfield_designator);
  // @@protoc_insertion_point(field_set_allocated:efdi.Partfield.partfield_designator)
}

// uint64 partfield_area = 4;
inline void Partfield::clear_partfield_area() {
  partfield_area_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Partfield::partfield_area() const {
  // @@protoc_insertion_point(field_get:efdi.Partfield.partfield_area)
  return partfield_area_;
}
inline void Partfield::set_partfield_area(::google::protobuf::uint64 value) {
  
  partfield_area_ = value;
  // @@protoc_insertion_point(field_set:efdi.Partfield.partfield_area)
}

// .efdi.UID customer_id_ref = 5;
inline bool Partfield::has_customer_id_ref() const {
  return this != internal_default_instance() && customer_id_ref_ != NULL;
}
inline void Partfield::clear_customer_id_ref() {
  if (GetArenaNoVirtual() == NULL && customer_id_ref_ != NULL) {
    delete customer_id_ref_;
  }
  customer_id_ref_ = NULL;
}
inline const ::efdi::UID& Partfield::customer_id_ref() const {
  const ::efdi::UID* p = customer_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.Partfield.customer_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* Partfield::release_customer_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.Partfield.customer_id_ref)
  
  ::efdi::UID* temp = customer_id_ref_;
  customer_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* Partfield::mutable_customer_id_ref() {
  
  if (customer_id_ref_ == NULL) {
    customer_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Partfield.customer_id_ref)
  return customer_id_ref_;
}
inline void Partfield::set_allocated_customer_id_ref(::efdi::UID* customer_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete customer_id_ref_;
  }
  if (customer_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      customer_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, customer_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  customer_id_ref_ = customer_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.Partfield.customer_id_ref)
}

// .efdi.UID farm_id_ref = 6;
inline bool Partfield::has_farm_id_ref() const {
  return this != internal_default_instance() && farm_id_ref_ != NULL;
}
inline void Partfield::clear_farm_id_ref() {
  if (GetArenaNoVirtual() == NULL && farm_id_ref_ != NULL) {
    delete farm_id_ref_;
  }
  farm_id_ref_ = NULL;
}
inline const ::efdi::UID& Partfield::farm_id_ref() const {
  const ::efdi::UID* p = farm_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.Partfield.farm_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* Partfield::release_farm_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.Partfield.farm_id_ref)
  
  ::efdi::UID* temp = farm_id_ref_;
  farm_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* Partfield::mutable_farm_id_ref() {
  
  if (farm_id_ref_ == NULL) {
    farm_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Partfield.farm_id_ref)
  return farm_id_ref_;
}
inline void Partfield::set_allocated_farm_id_ref(::efdi::UID* farm_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete farm_id_ref_;
  }
  if (farm_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      farm_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, farm_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  farm_id_ref_ = farm_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.Partfield.farm_id_ref)
}

// .efdi.UID crop_type_id_ref = 7;
inline bool Partfield::has_crop_type_id_ref() const {
  return this != internal_default_instance() && crop_type_id_ref_ != NULL;
}
inline void Partfield::clear_crop_type_id_ref() {
  if (GetArenaNoVirtual() == NULL && crop_type_id_ref_ != NULL) {
    delete crop_type_id_ref_;
  }
  crop_type_id_ref_ = NULL;
}
inline const ::efdi::UID& Partfield::crop_type_id_ref() const {
  const ::efdi::UID* p = crop_type_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.Partfield.crop_type_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* Partfield::release_crop_type_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.Partfield.crop_type_id_ref)
  
  ::efdi::UID* temp = crop_type_id_ref_;
  crop_type_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* Partfield::mutable_crop_type_id_ref() {
  
  if (crop_type_id_ref_ == NULL) {
    crop_type_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Partfield.crop_type_id_ref)
  return crop_type_id_ref_;
}
inline void Partfield::set_allocated_crop_type_id_ref(::efdi::UID* crop_type_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete crop_type_id_ref_;
  }
  if (crop_type_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      crop_type_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, crop_type_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  crop_type_id_ref_ = crop_type_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.Partfield.crop_type_id_ref)
}

// .efdi.UID crop_variety_id_ref = 8;
inline bool Partfield::has_crop_variety_id_ref() const {
  return this != internal_default_instance() && crop_variety_id_ref_ != NULL;
}
inline void Partfield::clear_crop_variety_id_ref() {
  if (GetArenaNoVirtual() == NULL && crop_variety_id_ref_ != NULL) {
    delete crop_variety_id_ref_;
  }
  crop_variety_id_ref_ = NULL;
}
inline const ::efdi::UID& Partfield::crop_variety_id_ref() const {
  const ::efdi::UID* p = crop_variety_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.Partfield.crop_variety_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* Partfield::release_crop_variety_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.Partfield.crop_variety_id_ref)
  
  ::efdi::UID* temp = crop_variety_id_ref_;
  crop_variety_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* Partfield::mutable_crop_variety_id_ref() {
  
  if (crop_variety_id_ref_ == NULL) {
    crop_variety_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Partfield.crop_variety_id_ref)
  return crop_variety_id_ref_;
}
inline void Partfield::set_allocated_crop_variety_id_ref(::efdi::UID* crop_variety_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete crop_variety_id_ref_;
  }
  if (crop_variety_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      crop_variety_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, crop_variety_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  crop_variety_id_ref_ = crop_variety_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.Partfield.crop_variety_id_ref)
}

// .efdi.UID field_id_ref = 9;
inline bool Partfield::has_field_id_ref() const {
  return this != internal_default_instance() && field_id_ref_ != NULL;
}
inline void Partfield::clear_field_id_ref() {
  if (GetArenaNoVirtual() == NULL && field_id_ref_ != NULL) {
    delete field_id_ref_;
  }
  field_id_ref_ = NULL;
}
inline const ::efdi::UID& Partfield::field_id_ref() const {
  const ::efdi::UID* p = field_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.Partfield.field_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* Partfield::release_field_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.Partfield.field_id_ref)
  
  ::efdi::UID* temp = field_id_ref_;
  field_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* Partfield::mutable_field_id_ref() {
  
  if (field_id_ref_ == NULL) {
    field_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Partfield.field_id_ref)
  return field_id_ref_;
}
inline void Partfield::set_allocated_field_id_ref(::efdi::UID* field_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete field_id_ref_;
  }
  if (field_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      field_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, field_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  field_id_ref_ = field_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.Partfield.field_id_ref)
}

// repeated .efdi.Polygon polygon = 10;
inline int Partfield::polygon_size() const {
  return polygon_.size();
}
inline void Partfield::clear_polygon() {
  polygon_.Clear();
}
inline const ::efdi::Polygon& Partfield::polygon(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Partfield.polygon)
  return polygon_.Get(index);
}
inline ::efdi::Polygon* Partfield::mutable_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Partfield.polygon)
  return polygon_.Mutable(index);
}
inline ::efdi::Polygon* Partfield::add_polygon() {
  // @@protoc_insertion_point(field_add:efdi.Partfield.polygon)
  return polygon_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::Polygon >*
Partfield::mutable_polygon() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Partfield.polygon)
  return &polygon_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::Polygon >&
Partfield::polygon() const {
  // @@protoc_insertion_point(field_list:efdi.Partfield.polygon)
  return polygon_;
}

// repeated .efdi.LineString line_string = 11;
inline int Partfield::line_string_size() const {
  return line_string_.size();
}
inline void Partfield::clear_line_string() {
  line_string_.Clear();
}
inline const ::efdi::LineString& Partfield::line_string(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Partfield.line_string)
  return line_string_.Get(index);
}
inline ::efdi::LineString* Partfield::mutable_line_string(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Partfield.line_string)
  return line_string_.Mutable(index);
}
inline ::efdi::LineString* Partfield::add_line_string() {
  // @@protoc_insertion_point(field_add:efdi.Partfield.line_string)
  return line_string_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::LineString >*
Partfield::mutable_line_string() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Partfield.line_string)
  return &line_string_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::LineString >&
Partfield::line_string() const {
  // @@protoc_insertion_point(field_list:efdi.Partfield.line_string)
  return line_string_;
}

// repeated .efdi.Point point = 12;
inline int Partfield::point_size() const {
  return point_.size();
}
inline void Partfield::clear_point() {
  point_.Clear();
}
inline const ::efdi::Point& Partfield::point(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Partfield.point)
  return point_.Get(index);
}
inline ::efdi::Point* Partfield::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Partfield.point)
  return point_.Mutable(index);
}
inline ::efdi::Point* Partfield::add_point() {
  // @@protoc_insertion_point(field_add:efdi.Partfield.point)
  return point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::Point >*
Partfield::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Partfield.point)
  return &point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::Point >&
Partfield::point() const {
  // @@protoc_insertion_point(field_list:efdi.Partfield.point)
  return point_;
}

// repeated .efdi.GuidanceGroup guidance_group = 13;
inline int Partfield::guidance_group_size() const {
  return guidance_group_.size();
}
inline void Partfield::clear_guidance_group() {
  guidance_group_.Clear();
}
inline const ::efdi::GuidanceGroup& Partfield::guidance_group(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Partfield.guidance_group)
  return guidance_group_.Get(index);
}
inline ::efdi::GuidanceGroup* Partfield::mutable_guidance_group(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Partfield.guidance_group)
  return guidance_group_.Mutable(index);
}
inline ::efdi::GuidanceGroup* Partfield::add_guidance_group() {
  // @@protoc_insertion_point(field_add:efdi.Partfield.guidance_group)
  return guidance_group_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::GuidanceGroup >*
Partfield::mutable_guidance_group() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Partfield.guidance_group)
  return &guidance_group_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::GuidanceGroup >&
Partfield::guidance_group() const {
  // @@protoc_insertion_point(field_list:efdi.Partfield.guidance_group)
  return guidance_group_;
}

// repeated .google.protobuf.Any extension = 2048;
inline int Partfield::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& Partfield::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Partfield.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* Partfield::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Partfield.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* Partfield::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.Partfield.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
Partfield::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Partfield.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
Partfield::extension() const {
  // @@protoc_insertion_point(field_list:efdi.Partfield.extension)
  return extension_;
}

// -------------------------------------------------------------------

// Point

// .efdi.Point.PointType point_type = 1;
inline void Point::clear_point_type() {
  point_type_ = 0;
}
inline ::efdi::Point_PointType Point::point_type() const {
  // @@protoc_insertion_point(field_get:efdi.Point.point_type)
  return static_cast< ::efdi::Point_PointType >(point_type_);
}
inline void Point::set_point_type(::efdi::Point_PointType value) {
  
  point_type_ = value;
  // @@protoc_insertion_point(field_set:efdi.Point.point_type)
}

// string point_designator = 2;
inline void Point::clear_point_designator() {
  point_designator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Point::point_designator() const {
  // @@protoc_insertion_point(field_get:efdi.Point.point_designator)
  return point_designator_.GetNoArena();
}
inline void Point::set_point_designator(const ::std::string& value) {
  
  point_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Point.point_designator)
}
#if LANG_CXX11
inline void Point::set_point_designator(::std::string&& value) {
  
  point_designator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Point.point_designator)
}
#endif
inline void Point::set_point_designator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  point_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Point.point_designator)
}
inline void Point::set_point_designator(const char* value, size_t size) {
  
  point_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Point.point_designator)
}
inline ::std::string* Point::mutable_point_designator() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Point.point_designator)
  return point_designator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Point::release_point_designator() {
  // @@protoc_insertion_point(field_release:efdi.Point.point_designator)
  
  return point_designator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Point::set_allocated_point_designator(::std::string* point_designator) {
  if (point_designator != NULL) {
    
  } else {
    
  }
  point_designator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), point_designator);
  // @@protoc_insertion_point(field_set_allocated:efdi.Point.point_designator)
}

// double point_north = 3;
inline void Point::clear_point_north() {
  point_north_ = 0;
}
inline double Point::point_north() const {
  // @@protoc_insertion_point(field_get:efdi.Point.point_north)
  return point_north_;
}
inline void Point::set_point_north(double value) {
  
  point_north_ = value;
  // @@protoc_insertion_point(field_set:efdi.Point.point_north)
}

// double point_east = 4;
inline void Point::clear_point_east() {
  point_east_ = 0;
}
inline double Point::point_east() const {
  // @@protoc_insertion_point(field_get:efdi.Point.point_east)
  return point_east_;
}
inline void Point::set_point_east(double value) {
  
  point_east_ = value;
  // @@protoc_insertion_point(field_set:efdi.Point.point_east)
}

// sint64 point_up = 5;
inline void Point::clear_point_up() {
  point_up_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Point::point_up() const {
  // @@protoc_insertion_point(field_get:efdi.Point.point_up)
  return point_up_;
}
inline void Point::set_point_up(::google::protobuf::int64 value) {
  
  point_up_ = value;
  // @@protoc_insertion_point(field_set:efdi.Point.point_up)
}

// uint32 point_colour = 6;
inline void Point::clear_point_colour() {
  point_colour_ = 0u;
}
inline ::google::protobuf::uint32 Point::point_colour() const {
  // @@protoc_insertion_point(field_get:efdi.Point.point_colour)
  return point_colour_;
}
inline void Point::set_point_colour(::google::protobuf::uint32 value) {
  
  point_colour_ = value;
  // @@protoc_insertion_point(field_set:efdi.Point.point_colour)
}

// .efdi.UID point_id = 7;
inline bool Point::has_point_id() const {
  return this != internal_default_instance() && point_id_ != NULL;
}
inline void Point::clear_point_id() {
  if (GetArenaNoVirtual() == NULL && point_id_ != NULL) {
    delete point_id_;
  }
  point_id_ = NULL;
}
inline const ::efdi::UID& Point::point_id() const {
  const ::efdi::UID* p = point_id_;
  // @@protoc_insertion_point(field_get:efdi.Point.point_id)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* Point::release_point_id() {
  // @@protoc_insertion_point(field_release:efdi.Point.point_id)
  
  ::efdi::UID* temp = point_id_;
  point_id_ = NULL;
  return temp;
}
inline ::efdi::UID* Point::mutable_point_id() {
  
  if (point_id_ == NULL) {
    point_id_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Point.point_id)
  return point_id_;
}
inline void Point::set_allocated_point_id(::efdi::UID* point_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete point_id_;
  }
  if (point_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      point_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, point_id, submessage_arena);
    }
    
  } else {
    
  }
  point_id_ = point_id;
  // @@protoc_insertion_point(field_set_allocated:efdi.Point.point_id)
}

// double point_horizontal_accuracy = 8;
inline void Point::clear_point_horizontal_accuracy() {
  point_horizontal_accuracy_ = 0;
}
inline double Point::point_horizontal_accuracy() const {
  // @@protoc_insertion_point(field_get:efdi.Point.point_horizontal_accuracy)
  return point_horizontal_accuracy_;
}
inline void Point::set_point_horizontal_accuracy(double value) {
  
  point_horizontal_accuracy_ = value;
  // @@protoc_insertion_point(field_set:efdi.Point.point_horizontal_accuracy)
}

// double point_vertical_accuracy = 9;
inline void Point::clear_point_vertical_accuracy() {
  point_vertical_accuracy_ = 0;
}
inline double Point::point_vertical_accuracy() const {
  // @@protoc_insertion_point(field_get:efdi.Point.point_vertical_accuracy)
  return point_vertical_accuracy_;
}
inline void Point::set_point_vertical_accuracy(double value) {
  
  point_vertical_accuracy_ = value;
  // @@protoc_insertion_point(field_set:efdi.Point.point_vertical_accuracy)
}

// string filename = 10;
inline void Point::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Point::filename() const {
  // @@protoc_insertion_point(field_get:efdi.Point.filename)
  return filename_.GetNoArena();
}
inline void Point::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Point.filename)
}
#if LANG_CXX11
inline void Point::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Point.filename)
}
#endif
inline void Point::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Point.filename)
}
inline void Point::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Point.filename)
}
inline ::std::string* Point::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Point.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Point::release_filename() {
  // @@protoc_insertion_point(field_release:efdi.Point.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Point::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:efdi.Point.filename)
}

// uint64 filelength = 11;
inline void Point::clear_filelength() {
  filelength_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Point::filelength() const {
  // @@protoc_insertion_point(field_get:efdi.Point.filelength)
  return filelength_;
}
inline void Point::set_filelength(::google::protobuf::uint64 value) {
  
  filelength_ = value;
  // @@protoc_insertion_point(field_set:efdi.Point.filelength)
}

// repeated .google.protobuf.Any extension = 2048;
inline int Point::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& Point::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Point.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* Point::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Point.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* Point::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.Point.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
Point::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Point.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
Point::extension() const {
  // @@protoc_insertion_point(field_list:efdi.Point.extension)
  return extension_;
}

// -------------------------------------------------------------------

// Polygon

// .efdi.Polygon.PolygonType polygon_type = 1;
inline void Polygon::clear_polygon_type() {
  polygon_type_ = 0;
}
inline ::efdi::Polygon_PolygonType Polygon::polygon_type() const {
  // @@protoc_insertion_point(field_get:efdi.Polygon.polygon_type)
  return static_cast< ::efdi::Polygon_PolygonType >(polygon_type_);
}
inline void Polygon::set_polygon_type(::efdi::Polygon_PolygonType value) {
  
  polygon_type_ = value;
  // @@protoc_insertion_point(field_set:efdi.Polygon.polygon_type)
}

// string polygon_designator = 2;
inline void Polygon::clear_polygon_designator() {
  polygon_designator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Polygon::polygon_designator() const {
  // @@protoc_insertion_point(field_get:efdi.Polygon.polygon_designator)
  return polygon_designator_.GetNoArena();
}
inline void Polygon::set_polygon_designator(const ::std::string& value) {
  
  polygon_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Polygon.polygon_designator)
}
#if LANG_CXX11
inline void Polygon::set_polygon_designator(::std::string&& value) {
  
  polygon_designator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Polygon.polygon_designator)
}
#endif
inline void Polygon::set_polygon_designator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  polygon_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Polygon.polygon_designator)
}
inline void Polygon::set_polygon_designator(const char* value, size_t size) {
  
  polygon_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Polygon.polygon_designator)
}
inline ::std::string* Polygon::mutable_polygon_designator() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Polygon.polygon_designator)
  return polygon_designator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Polygon::release_polygon_designator() {
  // @@protoc_insertion_point(field_release:efdi.Polygon.polygon_designator)
  
  return polygon_designator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Polygon::set_allocated_polygon_designator(::std::string* polygon_designator) {
  if (polygon_designator != NULL) {
    
  } else {
    
  }
  polygon_designator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), polygon_designator);
  // @@protoc_insertion_point(field_set_allocated:efdi.Polygon.polygon_designator)
}

// uint64 polygon_area = 3;
inline void Polygon::clear_polygon_area() {
  polygon_area_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Polygon::polygon_area() const {
  // @@protoc_insertion_point(field_get:efdi.Polygon.polygon_area)
  return polygon_area_;
}
inline void Polygon::set_polygon_area(::google::protobuf::uint64 value) {
  
  polygon_area_ = value;
  // @@protoc_insertion_point(field_set:efdi.Polygon.polygon_area)
}

// uint32 polygon_colour = 4;
inline void Polygon::clear_polygon_colour() {
  polygon_colour_ = 0u;
}
inline ::google::protobuf::uint32 Polygon::polygon_colour() const {
  // @@protoc_insertion_point(field_get:efdi.Polygon.polygon_colour)
  return polygon_colour_;
}
inline void Polygon::set_polygon_colour(::google::protobuf::uint32 value) {
  
  polygon_colour_ = value;
  // @@protoc_insertion_point(field_set:efdi.Polygon.polygon_colour)
}

// .efdi.UID polygon_id = 5;
inline bool Polygon::has_polygon_id() const {
  return this != internal_default_instance() && polygon_id_ != NULL;
}
inline void Polygon::clear_polygon_id() {
  if (GetArenaNoVirtual() == NULL && polygon_id_ != NULL) {
    delete polygon_id_;
  }
  polygon_id_ = NULL;
}
inline const ::efdi::UID& Polygon::polygon_id() const {
  const ::efdi::UID* p = polygon_id_;
  // @@protoc_insertion_point(field_get:efdi.Polygon.polygon_id)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* Polygon::release_polygon_id() {
  // @@protoc_insertion_point(field_release:efdi.Polygon.polygon_id)
  
  ::efdi::UID* temp = polygon_id_;
  polygon_id_ = NULL;
  return temp;
}
inline ::efdi::UID* Polygon::mutable_polygon_id() {
  
  if (polygon_id_ == NULL) {
    polygon_id_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Polygon.polygon_id)
  return polygon_id_;
}
inline void Polygon::set_allocated_polygon_id(::efdi::UID* polygon_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete polygon_id_;
  }
  if (polygon_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      polygon_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, polygon_id, submessage_arena);
    }
    
  } else {
    
  }
  polygon_id_ = polygon_id;
  // @@protoc_insertion_point(field_set_allocated:efdi.Polygon.polygon_id)
}

// repeated .efdi.LineString line_string = 6;
inline int Polygon::line_string_size() const {
  return line_string_.size();
}
inline void Polygon::clear_line_string() {
  line_string_.Clear();
}
inline const ::efdi::LineString& Polygon::line_string(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Polygon.line_string)
  return line_string_.Get(index);
}
inline ::efdi::LineString* Polygon::mutable_line_string(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Polygon.line_string)
  return line_string_.Mutable(index);
}
inline ::efdi::LineString* Polygon::add_line_string() {
  // @@protoc_insertion_point(field_add:efdi.Polygon.line_string)
  return line_string_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::LineString >*
Polygon::mutable_line_string() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Polygon.line_string)
  return &line_string_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::LineString >&
Polygon::line_string() const {
  // @@protoc_insertion_point(field_list:efdi.Polygon.line_string)
  return line_string_;
}

// repeated .google.protobuf.Any extension = 2048;
inline int Polygon::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& Polygon::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Polygon.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* Polygon::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Polygon.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* Polygon::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.Polygon.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
Polygon::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Polygon.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
Polygon::extension() const {
  // @@protoc_insertion_point(field_list:efdi.Polygon.extension)
  return extension_;
}

// -------------------------------------------------------------------

// Position

// double position_north = 1;
inline void Position::clear_position_north() {
  position_north_ = 0;
}
inline double Position::position_north() const {
  // @@protoc_insertion_point(field_get:efdi.Position.position_north)
  return position_north_;
}
inline void Position::set_position_north(double value) {
  
  position_north_ = value;
  // @@protoc_insertion_point(field_set:efdi.Position.position_north)
}

// double position_east = 2;
inline void Position::clear_position_east() {
  position_east_ = 0;
}
inline double Position::position_east() const {
  // @@protoc_insertion_point(field_get:efdi.Position.position_east)
  return position_east_;
}
inline void Position::set_position_east(double value) {
  
  position_east_ = value;
  // @@protoc_insertion_point(field_set:efdi.Position.position_east)
}

// sint64 position_up = 3;
inline void Position::clear_position_up() {
  position_up_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Position::position_up() const {
  // @@protoc_insertion_point(field_get:efdi.Position.position_up)
  return position_up_;
}
inline void Position::set_position_up(::google::protobuf::int64 value) {
  
  position_up_ = value;
  // @@protoc_insertion_point(field_set:efdi.Position.position_up)
}

// .efdi.Position.PositionStatus position_status = 4;
inline void Position::clear_position_status() {
  position_status_ = 0;
}
inline ::efdi::Position_PositionStatus Position::position_status() const {
  // @@protoc_insertion_point(field_get:efdi.Position.position_status)
  return static_cast< ::efdi::Position_PositionStatus >(position_status_);
}
inline void Position::set_position_status(::efdi::Position_PositionStatus value) {
  
  position_status_ = value;
  // @@protoc_insertion_point(field_set:efdi.Position.position_status)
}

// double pdop = 5;
inline void Position::clear_pdop() {
  pdop_ = 0;
}
inline double Position::pdop() const {
  // @@protoc_insertion_point(field_get:efdi.Position.pdop)
  return pdop_;
}
inline void Position::set_pdop(double value) {
  
  pdop_ = value;
  // @@protoc_insertion_point(field_set:efdi.Position.pdop)
}

// double hdop = 6;
inline void Position::clear_hdop() {
  hdop_ = 0;
}
inline double Position::hdop() const {
  // @@protoc_insertion_point(field_get:efdi.Position.hdop)
  return hdop_;
}
inline void Position::set_hdop(double value) {
  
  hdop_ = value;
  // @@protoc_insertion_point(field_set:efdi.Position.hdop)
}

// uint32 number_of_satellites = 7;
inline void Position::clear_number_of_satellites() {
  number_of_satellites_ = 0u;
}
inline ::google::protobuf::uint32 Position::number_of_satellites() const {
  // @@protoc_insertion_point(field_get:efdi.Position.number_of_satellites)
  return number_of_satellites_;
}
inline void Position::set_number_of_satellites(::google::protobuf::uint32 value) {
  
  number_of_satellites_ = value;
  // @@protoc_insertion_point(field_set:efdi.Position.number_of_satellites)
}

// .google.protobuf.Timestamp gps_utc_timestamp = 8;
inline bool Position::has_gps_utc_timestamp() const {
  return this != internal_default_instance() && gps_utc_timestamp_ != NULL;
}
inline const ::google::protobuf::Timestamp& Position::gps_utc_timestamp() const {
  const ::google::protobuf::Timestamp* p = gps_utc_timestamp_;
  // @@protoc_insertion_point(field_get:efdi.Position.gps_utc_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Position::release_gps_utc_timestamp() {
  // @@protoc_insertion_point(field_release:efdi.Position.gps_utc_timestamp)
  
  ::google::protobuf::Timestamp* temp = gps_utc_timestamp_;
  gps_utc_timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Position::mutable_gps_utc_timestamp() {
  
  if (gps_utc_timestamp_ == NULL) {
    gps_utc_timestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Position.gps_utc_timestamp)
  return gps_utc_timestamp_;
}
inline void Position::set_allocated_gps_utc_timestamp(::google::protobuf::Timestamp* gps_utc_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(gps_utc_timestamp_);
  }
  if (gps_utc_timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(gps_utc_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      gps_utc_timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gps_utc_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  gps_utc_timestamp_ = gps_utc_timestamp;
  // @@protoc_insertion_point(field_set_allocated:efdi.Position.gps_utc_timestamp)
}

// repeated .google.protobuf.Any extension = 2048;
inline int Position::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& Position::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Position.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* Position::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Position.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* Position::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.Position.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
Position::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Position.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
Position::extension() const {
  // @@protoc_insertion_point(field_list:efdi.Position.extension)
  return extension_;
}

// -------------------------------------------------------------------

// ProcessDataVariable

// uint32 process_data_ddi = 1;
inline void ProcessDataVariable::clear_process_data_ddi() {
  process_data_ddi_ = 0u;
}
inline ::google::protobuf::uint32 ProcessDataVariable::process_data_ddi() const {
  // @@protoc_insertion_point(field_get:efdi.ProcessDataVariable.process_data_ddi)
  return process_data_ddi_;
}
inline void ProcessDataVariable::set_process_data_ddi(::google::protobuf::uint32 value) {
  
  process_data_ddi_ = value;
  // @@protoc_insertion_point(field_set:efdi.ProcessDataVariable.process_data_ddi)
}

// sint64 process_data_value = 2;
inline void ProcessDataVariable::clear_process_data_value() {
  process_data_value_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ProcessDataVariable::process_data_value() const {
  // @@protoc_insertion_point(field_get:efdi.ProcessDataVariable.process_data_value)
  return process_data_value_;
}
inline void ProcessDataVariable::set_process_data_value(::google::protobuf::int64 value) {
  
  process_data_value_ = value;
  // @@protoc_insertion_point(field_set:efdi.ProcessDataVariable.process_data_value)
}

// .efdi.UID product_id_ref = 3;
inline bool ProcessDataVariable::has_product_id_ref() const {
  return this != internal_default_instance() && product_id_ref_ != NULL;
}
inline void ProcessDataVariable::clear_product_id_ref() {
  if (GetArenaNoVirtual() == NULL && product_id_ref_ != NULL) {
    delete product_id_ref_;
  }
  product_id_ref_ = NULL;
}
inline const ::efdi::UID& ProcessDataVariable::product_id_ref() const {
  const ::efdi::UID* p = product_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.ProcessDataVariable.product_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* ProcessDataVariable::release_product_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.ProcessDataVariable.product_id_ref)
  
  ::efdi::UID* temp = product_id_ref_;
  product_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* ProcessDataVariable::mutable_product_id_ref() {
  
  if (product_id_ref_ == NULL) {
    product_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.ProcessDataVariable.product_id_ref)
  return product_id_ref_;
}
inline void ProcessDataVariable::set_allocated_product_id_ref(::efdi::UID* product_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete product_id_ref_;
  }
  if (product_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      product_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, product_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  product_id_ref_ = product_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.ProcessDataVariable.product_id_ref)
}

// .efdi.UID device_element_id_ref = 4;
inline bool ProcessDataVariable::has_device_element_id_ref() const {
  return this != internal_default_instance() && device_element_id_ref_ != NULL;
}
inline void ProcessDataVariable::clear_device_element_id_ref() {
  if (GetArenaNoVirtual() == NULL && device_element_id_ref_ != NULL) {
    delete device_element_id_ref_;
  }
  device_element_id_ref_ = NULL;
}
inline const ::efdi::UID& ProcessDataVariable::device_element_id_ref() const {
  const ::efdi::UID* p = device_element_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.ProcessDataVariable.device_element_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* ProcessDataVariable::release_device_element_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.ProcessDataVariable.device_element_id_ref)
  
  ::efdi::UID* temp = device_element_id_ref_;
  device_element_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* ProcessDataVariable::mutable_device_element_id_ref() {
  
  if (device_element_id_ref_ == NULL) {
    device_element_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.ProcessDataVariable.device_element_id_ref)
  return device_element_id_ref_;
}
inline void ProcessDataVariable::set_allocated_device_element_id_ref(::efdi::UID* device_element_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete device_element_id_ref_;
  }
  if (device_element_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_element_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_element_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  device_element_id_ref_ = device_element_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.ProcessDataVariable.device_element_id_ref)
}

// .efdi.UID value_presentation_id_ref = 5;
inline bool ProcessDataVariable::has_value_presentation_id_ref() const {
  return this != internal_default_instance() && value_presentation_id_ref_ != NULL;
}
inline void ProcessDataVariable::clear_value_presentation_id_ref() {
  if (GetArenaNoVirtual() == NULL && value_presentation_id_ref_ != NULL) {
    delete value_presentation_id_ref_;
  }
  value_presentation_id_ref_ = NULL;
}
inline const ::efdi::UID& ProcessDataVariable::value_presentation_id_ref() const {
  const ::efdi::UID* p = value_presentation_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.ProcessDataVariable.value_presentation_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* ProcessDataVariable::release_value_presentation_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.ProcessDataVariable.value_presentation_id_ref)
  
  ::efdi::UID* temp = value_presentation_id_ref_;
  value_presentation_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* ProcessDataVariable::mutable_value_presentation_id_ref() {
  
  if (value_presentation_id_ref_ == NULL) {
    value_presentation_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.ProcessDataVariable.value_presentation_id_ref)
  return value_presentation_id_ref_;
}
inline void ProcessDataVariable::set_allocated_value_presentation_id_ref(::efdi::UID* value_presentation_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_presentation_id_ref_;
  }
  if (value_presentation_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_presentation_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_presentation_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  value_presentation_id_ref_ = value_presentation_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.ProcessDataVariable.value_presentation_id_ref)
}

// sint64 actual_cultural_practice_value = 6;
inline void ProcessDataVariable::clear_actual_cultural_practice_value() {
  actual_cultural_practice_value_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ProcessDataVariable::actual_cultural_practice_value() const {
  // @@protoc_insertion_point(field_get:efdi.ProcessDataVariable.actual_cultural_practice_value)
  return actual_cultural_practice_value_;
}
inline void ProcessDataVariable::set_actual_cultural_practice_value(::google::protobuf::int64 value) {
  
  actual_cultural_practice_value_ = value;
  // @@protoc_insertion_point(field_set:efdi.ProcessDataVariable.actual_cultural_practice_value)
}

// sint64 element_type_instance_value = 7;
inline void ProcessDataVariable::clear_element_type_instance_value() {
  element_type_instance_value_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ProcessDataVariable::element_type_instance_value() const {
  // @@protoc_insertion_point(field_get:efdi.ProcessDataVariable.element_type_instance_value)
  return element_type_instance_value_;
}
inline void ProcessDataVariable::set_element_type_instance_value(::google::protobuf::int64 value) {
  
  element_type_instance_value_ = value;
  // @@protoc_insertion_point(field_set:efdi.ProcessDataVariable.element_type_instance_value)
}

// repeated .efdi.ProcessDataVariable process_data_variable = 8;
inline int ProcessDataVariable::process_data_variable_size() const {
  return process_data_variable_.size();
}
inline void ProcessDataVariable::clear_process_data_variable() {
  process_data_variable_.Clear();
}
inline const ::efdi::ProcessDataVariable& ProcessDataVariable::process_data_variable(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ProcessDataVariable.process_data_variable)
  return process_data_variable_.Get(index);
}
inline ::efdi::ProcessDataVariable* ProcessDataVariable::mutable_process_data_variable(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ProcessDataVariable.process_data_variable)
  return process_data_variable_.Mutable(index);
}
inline ::efdi::ProcessDataVariable* ProcessDataVariable::add_process_data_variable() {
  // @@protoc_insertion_point(field_add:efdi.ProcessDataVariable.process_data_variable)
  return process_data_variable_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::ProcessDataVariable >*
ProcessDataVariable::mutable_process_data_variable() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ProcessDataVariable.process_data_variable)
  return &process_data_variable_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::ProcessDataVariable >&
ProcessDataVariable::process_data_variable() const {
  // @@protoc_insertion_point(field_list:efdi.ProcessDataVariable.process_data_variable)
  return process_data_variable_;
}

// repeated .google.protobuf.Any extension = 2048;
inline int ProcessDataVariable::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& ProcessDataVariable::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ProcessDataVariable.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* ProcessDataVariable::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ProcessDataVariable.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* ProcessDataVariable::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.ProcessDataVariable.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
ProcessDataVariable::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ProcessDataVariable.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
ProcessDataVariable::extension() const {
  // @@protoc_insertion_point(field_list:efdi.ProcessDataVariable.extension)
  return extension_;
}

// -------------------------------------------------------------------

// Product

// .efdi.UID product_id = 1;
inline bool Product::has_product_id() const {
  return this != internal_default_instance() && product_id_ != NULL;
}
inline void Product::clear_product_id() {
  if (GetArenaNoVirtual() == NULL && product_id_ != NULL) {
    delete product_id_;
  }
  product_id_ = NULL;
}
inline const ::efdi::UID& Product::product_id() const {
  const ::efdi::UID* p = product_id_;
  // @@protoc_insertion_point(field_get:efdi.Product.product_id)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* Product::release_product_id() {
  // @@protoc_insertion_point(field_release:efdi.Product.product_id)
  
  ::efdi::UID* temp = product_id_;
  product_id_ = NULL;
  return temp;
}
inline ::efdi::UID* Product::mutable_product_id() {
  
  if (product_id_ == NULL) {
    product_id_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Product.product_id)
  return product_id_;
}
inline void Product::set_allocated_product_id(::efdi::UID* product_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete product_id_;
  }
  if (product_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      product_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, product_id, submessage_arena);
    }
    
  } else {
    
  }
  product_id_ = product_id;
  // @@protoc_insertion_point(field_set_allocated:efdi.Product.product_id)
}

// string product_designator = 2;
inline void Product::clear_product_designator() {
  product_designator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Product::product_designator() const {
  // @@protoc_insertion_point(field_get:efdi.Product.product_designator)
  return product_designator_.GetNoArena();
}
inline void Product::set_product_designator(const ::std::string& value) {
  
  product_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Product.product_designator)
}
#if LANG_CXX11
inline void Product::set_product_designator(::std::string&& value) {
  
  product_designator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Product.product_designator)
}
#endif
inline void Product::set_product_designator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Product.product_designator)
}
inline void Product::set_product_designator(const char* value, size_t size) {
  
  product_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Product.product_designator)
}
inline ::std::string* Product::mutable_product_designator() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Product.product_designator)
  return product_designator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Product::release_product_designator() {
  // @@protoc_insertion_point(field_release:efdi.Product.product_designator)
  
  return product_designator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Product::set_allocated_product_designator(::std::string* product_designator) {
  if (product_designator != NULL) {
    
  } else {
    
  }
  product_designator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_designator);
  // @@protoc_insertion_point(field_set_allocated:efdi.Product.product_designator)
}

// .efdi.UID product_group_id_ref = 3;
inline bool Product::has_product_group_id_ref() const {
  return this != internal_default_instance() && product_group_id_ref_ != NULL;
}
inline void Product::clear_product_group_id_ref() {
  if (GetArenaNoVirtual() == NULL && product_group_id_ref_ != NULL) {
    delete product_group_id_ref_;
  }
  product_group_id_ref_ = NULL;
}
inline const ::efdi::UID& Product::product_group_id_ref() const {
  const ::efdi::UID* p = product_group_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.Product.product_group_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* Product::release_product_group_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.Product.product_group_id_ref)
  
  ::efdi::UID* temp = product_group_id_ref_;
  product_group_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* Product::mutable_product_group_id_ref() {
  
  if (product_group_id_ref_ == NULL) {
    product_group_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Product.product_group_id_ref)
  return product_group_id_ref_;
}
inline void Product::set_allocated_product_group_id_ref(::efdi::UID* product_group_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete product_group_id_ref_;
  }
  if (product_group_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      product_group_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, product_group_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  product_group_id_ref_ = product_group_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.Product.product_group_id_ref)
}

// .efdi.UID value_presention_id_ref = 4;
inline bool Product::has_value_presention_id_ref() const {
  return this != internal_default_instance() && value_presention_id_ref_ != NULL;
}
inline void Product::clear_value_presention_id_ref() {
  if (GetArenaNoVirtual() == NULL && value_presention_id_ref_ != NULL) {
    delete value_presention_id_ref_;
  }
  value_presention_id_ref_ = NULL;
}
inline const ::efdi::UID& Product::value_presention_id_ref() const {
  const ::efdi::UID* p = value_presention_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.Product.value_presention_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* Product::release_value_presention_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.Product.value_presention_id_ref)
  
  ::efdi::UID* temp = value_presention_id_ref_;
  value_presention_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* Product::mutable_value_presention_id_ref() {
  
  if (value_presention_id_ref_ == NULL) {
    value_presention_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Product.value_presention_id_ref)
  return value_presention_id_ref_;
}
inline void Product::set_allocated_value_presention_id_ref(::efdi::UID* value_presention_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_presention_id_ref_;
  }
  if (value_presention_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_presention_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_presention_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  value_presention_id_ref_ = value_presention_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.Product.value_presention_id_ref)
}

// uint32 quantity_ddi = 5;
inline void Product::clear_quantity_ddi() {
  quantity_ddi_ = 0u;
}
inline ::google::protobuf::uint32 Product::quantity_ddi() const {
  // @@protoc_insertion_point(field_get:efdi.Product.quantity_ddi)
  return quantity_ddi_;
}
inline void Product::set_quantity_ddi(::google::protobuf::uint32 value) {
  
  quantity_ddi_ = value;
  // @@protoc_insertion_point(field_set:efdi.Product.quantity_ddi)
}

// .efdi.Product.ProductType product_type = 6;
inline void Product::clear_product_type() {
  product_type_ = 0;
}
inline ::efdi::Product_ProductType Product::product_type() const {
  // @@protoc_insertion_point(field_get:efdi.Product.product_type)
  return static_cast< ::efdi::Product_ProductType >(product_type_);
}
inline void Product::set_product_type(::efdi::Product_ProductType value) {
  
  product_type_ = value;
  // @@protoc_insertion_point(field_set:efdi.Product.product_type)
}

// sint64 mixture_recipe_quantity = 7;
inline void Product::clear_mixture_recipe_quantity() {
  mixture_recipe_quantity_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Product::mixture_recipe_quantity() const {
  // @@protoc_insertion_point(field_get:efdi.Product.mixture_recipe_quantity)
  return mixture_recipe_quantity_;
}
inline void Product::set_mixture_recipe_quantity(::google::protobuf::int64 value) {
  
  mixture_recipe_quantity_ = value;
  // @@protoc_insertion_point(field_set:efdi.Product.mixture_recipe_quantity)
}

// sint64 density_mass_per_volume = 8;
inline void Product::clear_density_mass_per_volume() {
  density_mass_per_volume_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Product::density_mass_per_volume() const {
  // @@protoc_insertion_point(field_get:efdi.Product.density_mass_per_volume)
  return density_mass_per_volume_;
}
inline void Product::set_density_mass_per_volume(::google::protobuf::int64 value) {
  
  density_mass_per_volume_ = value;
  // @@protoc_insertion_point(field_set:efdi.Product.density_mass_per_volume)
}

// sint64 density_mass_per_count = 9;
inline void Product::clear_density_mass_per_count() {
  density_mass_per_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Product::density_mass_per_count() const {
  // @@protoc_insertion_point(field_get:efdi.Product.density_mass_per_count)
  return density_mass_per_count_;
}
inline void Product::set_density_mass_per_count(::google::protobuf::int64 value) {
  
  density_mass_per_count_ = value;
  // @@protoc_insertion_point(field_set:efdi.Product.density_mass_per_count)
}

// sint64 density_volume_per_count = 10;
inline void Product::clear_density_volume_per_count() {
  density_volume_per_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Product::density_volume_per_count() const {
  // @@protoc_insertion_point(field_get:efdi.Product.density_volume_per_count)
  return density_volume_per_count_;
}
inline void Product::set_density_volume_per_count(::google::protobuf::int64 value) {
  
  density_volume_per_count_ = value;
  // @@protoc_insertion_point(field_set:efdi.Product.density_volume_per_count)
}

// repeated .efdi.ProductRelation product_relation = 11;
inline int Product::product_relation_size() const {
  return product_relation_.size();
}
inline void Product::clear_product_relation() {
  product_relation_.Clear();
}
inline const ::efdi::ProductRelation& Product::product_relation(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Product.product_relation)
  return product_relation_.Get(index);
}
inline ::efdi::ProductRelation* Product::mutable_product_relation(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Product.product_relation)
  return product_relation_.Mutable(index);
}
inline ::efdi::ProductRelation* Product::add_product_relation() {
  // @@protoc_insertion_point(field_add:efdi.Product.product_relation)
  return product_relation_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::ProductRelation >*
Product::mutable_product_relation() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Product.product_relation)
  return &product_relation_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::ProductRelation >&
Product::product_relation() const {
  // @@protoc_insertion_point(field_list:efdi.Product.product_relation)
  return product_relation_;
}

// repeated .google.protobuf.Any extension = 2048;
inline int Product::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& Product::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Product.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* Product::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Product.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* Product::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.Product.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
Product::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Product.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
Product::extension() const {
  // @@protoc_insertion_point(field_list:efdi.Product.extension)
  return extension_;
}

// -------------------------------------------------------------------

// ProductAllocation

// .efdi.UID product_id_ref = 1;
inline bool ProductAllocation::has_product_id_ref() const {
  return this != internal_default_instance() && product_id_ref_ != NULL;
}
inline void ProductAllocation::clear_product_id_ref() {
  if (GetArenaNoVirtual() == NULL && product_id_ref_ != NULL) {
    delete product_id_ref_;
  }
  product_id_ref_ = NULL;
}
inline const ::efdi::UID& ProductAllocation::product_id_ref() const {
  const ::efdi::UID* p = product_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.ProductAllocation.product_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* ProductAllocation::release_product_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.ProductAllocation.product_id_ref)
  
  ::efdi::UID* temp = product_id_ref_;
  product_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* ProductAllocation::mutable_product_id_ref() {
  
  if (product_id_ref_ == NULL) {
    product_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.ProductAllocation.product_id_ref)
  return product_id_ref_;
}
inline void ProductAllocation::set_allocated_product_id_ref(::efdi::UID* product_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete product_id_ref_;
  }
  if (product_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      product_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, product_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  product_id_ref_ = product_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.ProductAllocation.product_id_ref)
}

// uint32 quantity_ddi = 2;
inline void ProductAllocation::clear_quantity_ddi() {
  quantity_ddi_ = 0u;
}
inline ::google::protobuf::uint32 ProductAllocation::quantity_ddi() const {
  // @@protoc_insertion_point(field_get:efdi.ProductAllocation.quantity_ddi)
  return quantity_ddi_;
}
inline void ProductAllocation::set_quantity_ddi(::google::protobuf::uint32 value) {
  
  quantity_ddi_ = value;
  // @@protoc_insertion_point(field_set:efdi.ProductAllocation.quantity_ddi)
}

// sint64 quantity_value = 3;
inline void ProductAllocation::clear_quantity_value() {
  quantity_value_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ProductAllocation::quantity_value() const {
  // @@protoc_insertion_point(field_get:efdi.ProductAllocation.quantity_value)
  return quantity_value_;
}
inline void ProductAllocation::set_quantity_value(::google::protobuf::int64 value) {
  
  quantity_value_ = value;
  // @@protoc_insertion_point(field_set:efdi.ProductAllocation.quantity_value)
}

// .efdi.ProductAllocation.TransferMode transfer_mode = 4;
inline void ProductAllocation::clear_transfer_mode() {
  transfer_mode_ = 0;
}
inline ::efdi::ProductAllocation_TransferMode ProductAllocation::transfer_mode() const {
  // @@protoc_insertion_point(field_get:efdi.ProductAllocation.transfer_mode)
  return static_cast< ::efdi::ProductAllocation_TransferMode >(transfer_mode_);
}
inline void ProductAllocation::set_transfer_mode(::efdi::ProductAllocation_TransferMode value) {
  
  transfer_mode_ = value;
  // @@protoc_insertion_point(field_set:efdi.ProductAllocation.transfer_mode)
}

// .efdi.UID device_element_id_ref = 5;
inline bool ProductAllocation::has_device_element_id_ref() const {
  return this != internal_default_instance() && device_element_id_ref_ != NULL;
}
inline void ProductAllocation::clear_device_element_id_ref() {
  if (GetArenaNoVirtual() == NULL && device_element_id_ref_ != NULL) {
    delete device_element_id_ref_;
  }
  device_element_id_ref_ = NULL;
}
inline const ::efdi::UID& ProductAllocation::device_element_id_ref() const {
  const ::efdi::UID* p = device_element_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.ProductAllocation.device_element_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* ProductAllocation::release_device_element_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.ProductAllocation.device_element_id_ref)
  
  ::efdi::UID* temp = device_element_id_ref_;
  device_element_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* ProductAllocation::mutable_device_element_id_ref() {
  
  if (device_element_id_ref_ == NULL) {
    device_element_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.ProductAllocation.device_element_id_ref)
  return device_element_id_ref_;
}
inline void ProductAllocation::set_allocated_device_element_id_ref(::efdi::UID* device_element_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete device_element_id_ref_;
  }
  if (device_element_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_element_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_element_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  device_element_id_ref_ = device_element_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.ProductAllocation.device_element_id_ref)
}

// .efdi.UID value_presentation_id_ref = 6;
inline bool ProductAllocation::has_value_presentation_id_ref() const {
  return this != internal_default_instance() && value_presentation_id_ref_ != NULL;
}
inline void ProductAllocation::clear_value_presentation_id_ref() {
  if (GetArenaNoVirtual() == NULL && value_presentation_id_ref_ != NULL) {
    delete value_presentation_id_ref_;
  }
  value_presentation_id_ref_ = NULL;
}
inline const ::efdi::UID& ProductAllocation::value_presentation_id_ref() const {
  const ::efdi::UID* p = value_presentation_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.ProductAllocation.value_presentation_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* ProductAllocation::release_value_presentation_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.ProductAllocation.value_presentation_id_ref)
  
  ::efdi::UID* temp = value_presentation_id_ref_;
  value_presentation_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* ProductAllocation::mutable_value_presentation_id_ref() {
  
  if (value_presentation_id_ref_ == NULL) {
    value_presentation_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.ProductAllocation.value_presentation_id_ref)
  return value_presentation_id_ref_;
}
inline void ProductAllocation::set_allocated_value_presentation_id_ref(::efdi::UID* value_presentation_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_presentation_id_ref_;
  }
  if (value_presentation_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_presentation_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_presentation_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  value_presentation_id_ref_ = value_presentation_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.ProductAllocation.value_presentation_id_ref)
}

// .efdi.UID product_sub_type_id_ref = 7;
inline bool ProductAllocation::has_product_sub_type_id_ref() const {
  return this != internal_default_instance() && product_sub_type_id_ref_ != NULL;
}
inline void ProductAllocation::clear_product_sub_type_id_ref() {
  if (GetArenaNoVirtual() == NULL && product_sub_type_id_ref_ != NULL) {
    delete product_sub_type_id_ref_;
  }
  product_sub_type_id_ref_ = NULL;
}
inline const ::efdi::UID& ProductAllocation::product_sub_type_id_ref() const {
  const ::efdi::UID* p = product_sub_type_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.ProductAllocation.product_sub_type_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* ProductAllocation::release_product_sub_type_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.ProductAllocation.product_sub_type_id_ref)
  
  ::efdi::UID* temp = product_sub_type_id_ref_;
  product_sub_type_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* ProductAllocation::mutable_product_sub_type_id_ref() {
  
  if (product_sub_type_id_ref_ == NULL) {
    product_sub_type_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.ProductAllocation.product_sub_type_id_ref)
  return product_sub_type_id_ref_;
}
inline void ProductAllocation::set_allocated_product_sub_type_id_ref(::efdi::UID* product_sub_type_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete product_sub_type_id_ref_;
  }
  if (product_sub_type_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      product_sub_type_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, product_sub_type_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  product_sub_type_id_ref_ = product_sub_type_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.ProductAllocation.product_sub_type_id_ref)
}

// .efdi.AllocationStamp allocation_stamp = 8;
inline bool ProductAllocation::has_allocation_stamp() const {
  return this != internal_default_instance() && allocation_stamp_ != NULL;
}
inline void ProductAllocation::clear_allocation_stamp() {
  if (GetArenaNoVirtual() == NULL && allocation_stamp_ != NULL) {
    delete allocation_stamp_;
  }
  allocation_stamp_ = NULL;
}
inline const ::efdi::AllocationStamp& ProductAllocation::allocation_stamp() const {
  const ::efdi::AllocationStamp* p = allocation_stamp_;
  // @@protoc_insertion_point(field_get:efdi.ProductAllocation.allocation_stamp)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::AllocationStamp*>(
      &::efdi::_AllocationStamp_default_instance_);
}
inline ::efdi::AllocationStamp* ProductAllocation::release_allocation_stamp() {
  // @@protoc_insertion_point(field_release:efdi.ProductAllocation.allocation_stamp)
  
  ::efdi::AllocationStamp* temp = allocation_stamp_;
  allocation_stamp_ = NULL;
  return temp;
}
inline ::efdi::AllocationStamp* ProductAllocation::mutable_allocation_stamp() {
  
  if (allocation_stamp_ == NULL) {
    allocation_stamp_ = new ::efdi::AllocationStamp;
  }
  // @@protoc_insertion_point(field_mutable:efdi.ProductAllocation.allocation_stamp)
  return allocation_stamp_;
}
inline void ProductAllocation::set_allocated_allocation_stamp(::efdi::AllocationStamp* allocation_stamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete allocation_stamp_;
  }
  if (allocation_stamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      allocation_stamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, allocation_stamp, submessage_arena);
    }
    
  } else {
    
  }
  allocation_stamp_ = allocation_stamp;
  // @@protoc_insertion_point(field_set_allocated:efdi.ProductAllocation.allocation_stamp)
}

// repeated .google.protobuf.Any extension = 2048;
inline int ProductAllocation::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& ProductAllocation::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ProductAllocation.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* ProductAllocation::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ProductAllocation.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* ProductAllocation::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.ProductAllocation.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
ProductAllocation::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ProductAllocation.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
ProductAllocation::extension() const {
  // @@protoc_insertion_point(field_list:efdi.ProductAllocation.extension)
  return extension_;
}

// -------------------------------------------------------------------

// ProductGroup

// .efdi.UID product_group_id = 1;
inline bool ProductGroup::has_product_group_id() const {
  return this != internal_default_instance() && product_group_id_ != NULL;
}
inline void ProductGroup::clear_product_group_id() {
  if (GetArenaNoVirtual() == NULL && product_group_id_ != NULL) {
    delete product_group_id_;
  }
  product_group_id_ = NULL;
}
inline const ::efdi::UID& ProductGroup::product_group_id() const {
  const ::efdi::UID* p = product_group_id_;
  // @@protoc_insertion_point(field_get:efdi.ProductGroup.product_group_id)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* ProductGroup::release_product_group_id() {
  // @@protoc_insertion_point(field_release:efdi.ProductGroup.product_group_id)
  
  ::efdi::UID* temp = product_group_id_;
  product_group_id_ = NULL;
  return temp;
}
inline ::efdi::UID* ProductGroup::mutable_product_group_id() {
  
  if (product_group_id_ == NULL) {
    product_group_id_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.ProductGroup.product_group_id)
  return product_group_id_;
}
inline void ProductGroup::set_allocated_product_group_id(::efdi::UID* product_group_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete product_group_id_;
  }
  if (product_group_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      product_group_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, product_group_id, submessage_arena);
    }
    
  } else {
    
  }
  product_group_id_ = product_group_id;
  // @@protoc_insertion_point(field_set_allocated:efdi.ProductGroup.product_group_id)
}

// string product_group_designator = 2;
inline void ProductGroup::clear_product_group_designator() {
  product_group_designator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductGroup::product_group_designator() const {
  // @@protoc_insertion_point(field_get:efdi.ProductGroup.product_group_designator)
  return product_group_designator_.GetNoArena();
}
inline void ProductGroup::set_product_group_designator(const ::std::string& value) {
  
  product_group_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.ProductGroup.product_group_designator)
}
#if LANG_CXX11
inline void ProductGroup::set_product_group_designator(::std::string&& value) {
  
  product_group_designator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.ProductGroup.product_group_designator)
}
#endif
inline void ProductGroup::set_product_group_designator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_group_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.ProductGroup.product_group_designator)
}
inline void ProductGroup::set_product_group_designator(const char* value, size_t size) {
  
  product_group_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.ProductGroup.product_group_designator)
}
inline ::std::string* ProductGroup::mutable_product_group_designator() {
  
  // @@protoc_insertion_point(field_mutable:efdi.ProductGroup.product_group_designator)
  return product_group_designator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductGroup::release_product_group_designator() {
  // @@protoc_insertion_point(field_release:efdi.ProductGroup.product_group_designator)
  
  return product_group_designator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductGroup::set_allocated_product_group_designator(::std::string* product_group_designator) {
  if (product_group_designator != NULL) {
    
  } else {
    
  }
  product_group_designator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_group_designator);
  // @@protoc_insertion_point(field_set_allocated:efdi.ProductGroup.product_group_designator)
}

// .efdi.ProductGroup.ProductGroupType product_group_type = 3;
inline void ProductGroup::clear_product_group_type() {
  product_group_type_ = 0;
}
inline ::efdi::ProductGroup_ProductGroupType ProductGroup::product_group_type() const {
  // @@protoc_insertion_point(field_get:efdi.ProductGroup.product_group_type)
  return static_cast< ::efdi::ProductGroup_ProductGroupType >(product_group_type_);
}
inline void ProductGroup::set_product_group_type(::efdi::ProductGroup_ProductGroupType value) {
  
  product_group_type_ = value;
  // @@protoc_insertion_point(field_set:efdi.ProductGroup.product_group_type)
}

// repeated .google.protobuf.Any extension = 2048;
inline int ProductGroup::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& ProductGroup::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ProductGroup.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* ProductGroup::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ProductGroup.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* ProductGroup::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.ProductGroup.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
ProductGroup::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ProductGroup.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
ProductGroup::extension() const {
  // @@protoc_insertion_point(field_list:efdi.ProductGroup.extension)
  return extension_;
}

// -------------------------------------------------------------------

// ProductRelation

// .efdi.UID product_id_ref = 1;
inline bool ProductRelation::has_product_id_ref() const {
  return this != internal_default_instance() && product_id_ref_ != NULL;
}
inline void ProductRelation::clear_product_id_ref() {
  if (GetArenaNoVirtual() == NULL && product_id_ref_ != NULL) {
    delete product_id_ref_;
  }
  product_id_ref_ = NULL;
}
inline const ::efdi::UID& ProductRelation::product_id_ref() const {
  const ::efdi::UID* p = product_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.ProductRelation.product_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* ProductRelation::release_product_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.ProductRelation.product_id_ref)
  
  ::efdi::UID* temp = product_id_ref_;
  product_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* ProductRelation::mutable_product_id_ref() {
  
  if (product_id_ref_ == NULL) {
    product_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.ProductRelation.product_id_ref)
  return product_id_ref_;
}
inline void ProductRelation::set_allocated_product_id_ref(::efdi::UID* product_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete product_id_ref_;
  }
  if (product_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      product_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, product_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  product_id_ref_ = product_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.ProductRelation.product_id_ref)
}

// sint64 quantity_value = 2;
inline void ProductRelation::clear_quantity_value() {
  quantity_value_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ProductRelation::quantity_value() const {
  // @@protoc_insertion_point(field_get:efdi.ProductRelation.quantity_value)
  return quantity_value_;
}
inline void ProductRelation::set_quantity_value(::google::protobuf::int64 value) {
  
  quantity_value_ = value;
  // @@protoc_insertion_point(field_set:efdi.ProductRelation.quantity_value)
}

// repeated .google.protobuf.Any extension = 2048;
inline int ProductRelation::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& ProductRelation::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ProductRelation.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* ProductRelation::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ProductRelation.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* ProductRelation::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.ProductRelation.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
ProductRelation::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ProductRelation.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
ProductRelation::extension() const {
  // @@protoc_insertion_point(field_list:efdi.ProductRelation.extension)
  return extension_;
}

// -------------------------------------------------------------------

// Task

// .efdi.UID task_id = 1;
inline bool Task::has_task_id() const {
  return this != internal_default_instance() && task_id_ != NULL;
}
inline void Task::clear_task_id() {
  if (GetArenaNoVirtual() == NULL && task_id_ != NULL) {
    delete task_id_;
  }
  task_id_ = NULL;
}
inline const ::efdi::UID& Task::task_id() const {
  const ::efdi::UID* p = task_id_;
  // @@protoc_insertion_point(field_get:efdi.Task.task_id)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* Task::release_task_id() {
  // @@protoc_insertion_point(field_release:efdi.Task.task_id)
  
  ::efdi::UID* temp = task_id_;
  task_id_ = NULL;
  return temp;
}
inline ::efdi::UID* Task::mutable_task_id() {
  
  if (task_id_ == NULL) {
    task_id_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Task.task_id)
  return task_id_;
}
inline void Task::set_allocated_task_id(::efdi::UID* task_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete task_id_;
  }
  if (task_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      task_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task_id, submessage_arena);
    }
    
  } else {
    
  }
  task_id_ = task_id;
  // @@protoc_insertion_point(field_set_allocated:efdi.Task.task_id)
}

// string task_designator = 2;
inline void Task::clear_task_designator() {
  task_designator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Task::task_designator() const {
  // @@protoc_insertion_point(field_get:efdi.Task.task_designator)
  return task_designator_.GetNoArena();
}
inline void Task::set_task_designator(const ::std::string& value) {
  
  task_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Task.task_designator)
}
#if LANG_CXX11
inline void Task::set_task_designator(::std::string&& value) {
  
  task_designator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Task.task_designator)
}
#endif
inline void Task::set_task_designator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  task_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Task.task_designator)
}
inline void Task::set_task_designator(const char* value, size_t size) {
  
  task_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Task.task_designator)
}
inline ::std::string* Task::mutable_task_designator() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Task.task_designator)
  return task_designator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_task_designator() {
  // @@protoc_insertion_point(field_release:efdi.Task.task_designator)
  
  return task_designator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_task_designator(::std::string* task_designator) {
  if (task_designator != NULL) {
    
  } else {
    
  }
  task_designator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_designator);
  // @@protoc_insertion_point(field_set_allocated:efdi.Task.task_designator)
}

// .efdi.UID customer_id_ref = 3;
inline bool Task::has_customer_id_ref() const {
  return this != internal_default_instance() && customer_id_ref_ != NULL;
}
inline void Task::clear_customer_id_ref() {
  if (GetArenaNoVirtual() == NULL && customer_id_ref_ != NULL) {
    delete customer_id_ref_;
  }
  customer_id_ref_ = NULL;
}
inline const ::efdi::UID& Task::customer_id_ref() const {
  const ::efdi::UID* p = customer_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.Task.customer_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* Task::release_customer_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.Task.customer_id_ref)
  
  ::efdi::UID* temp = customer_id_ref_;
  customer_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* Task::mutable_customer_id_ref() {
  
  if (customer_id_ref_ == NULL) {
    customer_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Task.customer_id_ref)
  return customer_id_ref_;
}
inline void Task::set_allocated_customer_id_ref(::efdi::UID* customer_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete customer_id_ref_;
  }
  if (customer_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      customer_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, customer_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  customer_id_ref_ = customer_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.Task.customer_id_ref)
}

// .efdi.UID farm_id_ref = 4;
inline bool Task::has_farm_id_ref() const {
  return this != internal_default_instance() && farm_id_ref_ != NULL;
}
inline void Task::clear_farm_id_ref() {
  if (GetArenaNoVirtual() == NULL && farm_id_ref_ != NULL) {
    delete farm_id_ref_;
  }
  farm_id_ref_ = NULL;
}
inline const ::efdi::UID& Task::farm_id_ref() const {
  const ::efdi::UID* p = farm_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.Task.farm_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* Task::release_farm_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.Task.farm_id_ref)
  
  ::efdi::UID* temp = farm_id_ref_;
  farm_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* Task::mutable_farm_id_ref() {
  
  if (farm_id_ref_ == NULL) {
    farm_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Task.farm_id_ref)
  return farm_id_ref_;
}
inline void Task::set_allocated_farm_id_ref(::efdi::UID* farm_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete farm_id_ref_;
  }
  if (farm_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      farm_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, farm_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  farm_id_ref_ = farm_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.Task.farm_id_ref)
}

// .efdi.UID partfield_id_ref = 5;
inline bool Task::has_partfield_id_ref() const {
  return this != internal_default_instance() && partfield_id_ref_ != NULL;
}
inline void Task::clear_partfield_id_ref() {
  if (GetArenaNoVirtual() == NULL && partfield_id_ref_ != NULL) {
    delete partfield_id_ref_;
  }
  partfield_id_ref_ = NULL;
}
inline const ::efdi::UID& Task::partfield_id_ref() const {
  const ::efdi::UID* p = partfield_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.Task.partfield_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* Task::release_partfield_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.Task.partfield_id_ref)
  
  ::efdi::UID* temp = partfield_id_ref_;
  partfield_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* Task::mutable_partfield_id_ref() {
  
  if (partfield_id_ref_ == NULL) {
    partfield_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Task.partfield_id_ref)
  return partfield_id_ref_;
}
inline void Task::set_allocated_partfield_id_ref(::efdi::UID* partfield_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete partfield_id_ref_;
  }
  if (partfield_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      partfield_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, partfield_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  partfield_id_ref_ = partfield_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.Task.partfield_id_ref)
}

// .efdi.UID responsible_worker_id_ref = 6;
inline bool Task::has_responsible_worker_id_ref() const {
  return this != internal_default_instance() && responsible_worker_id_ref_ != NULL;
}
inline void Task::clear_responsible_worker_id_ref() {
  if (GetArenaNoVirtual() == NULL && responsible_worker_id_ref_ != NULL) {
    delete responsible_worker_id_ref_;
  }
  responsible_worker_id_ref_ = NULL;
}
inline const ::efdi::UID& Task::responsible_worker_id_ref() const {
  const ::efdi::UID* p = responsible_worker_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.Task.responsible_worker_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* Task::release_responsible_worker_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.Task.responsible_worker_id_ref)
  
  ::efdi::UID* temp = responsible_worker_id_ref_;
  responsible_worker_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* Task::mutable_responsible_worker_id_ref() {
  
  if (responsible_worker_id_ref_ == NULL) {
    responsible_worker_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Task.responsible_worker_id_ref)
  return responsible_worker_id_ref_;
}
inline void Task::set_allocated_responsible_worker_id_ref(::efdi::UID* responsible_worker_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete responsible_worker_id_ref_;
  }
  if (responsible_worker_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      responsible_worker_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, responsible_worker_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  responsible_worker_id_ref_ = responsible_worker_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.Task.responsible_worker_id_ref)
}

// .efdi.Task.TaskStatus task_status = 7;
inline void Task::clear_task_status() {
  task_status_ = 0;
}
inline ::efdi::Task_TaskStatus Task::task_status() const {
  // @@protoc_insertion_point(field_get:efdi.Task.task_status)
  return static_cast< ::efdi::Task_TaskStatus >(task_status_);
}
inline void Task::set_task_status(::efdi::Task_TaskStatus value) {
  
  task_status_ = value;
  // @@protoc_insertion_point(field_set:efdi.Task.task_status)
}

// uint32 default_treatment_zone_code = 8;
inline void Task::clear_default_treatment_zone_code() {
  default_treatment_zone_code_ = 0u;
}
inline ::google::protobuf::uint32 Task::default_treatment_zone_code() const {
  // @@protoc_insertion_point(field_get:efdi.Task.default_treatment_zone_code)
  return default_treatment_zone_code_;
}
inline void Task::set_default_treatment_zone_code(::google::protobuf::uint32 value) {
  
  default_treatment_zone_code_ = value;
  // @@protoc_insertion_point(field_set:efdi.Task.default_treatment_zone_code)
}

// uint32 position_lost_treatment_zone_code = 9;
inline void Task::clear_position_lost_treatment_zone_code() {
  position_lost_treatment_zone_code_ = 0u;
}
inline ::google::protobuf::uint32 Task::position_lost_treatment_zone_code() const {
  // @@protoc_insertion_point(field_get:efdi.Task.position_lost_treatment_zone_code)
  return position_lost_treatment_zone_code_;
}
inline void Task::set_position_lost_treatment_zone_code(::google::protobuf::uint32 value) {
  
  position_lost_treatment_zone_code_ = value;
  // @@protoc_insertion_point(field_set:efdi.Task.position_lost_treatment_zone_code)
}

// uint32 out_of_field_treatment_zone_code = 10;
inline void Task::clear_out_of_field_treatment_zone_code() {
  out_of_field_treatment_zone_code_ = 0u;
}
inline ::google::protobuf::uint32 Task::out_of_field_treatment_zone_code() const {
  // @@protoc_insertion_point(field_get:efdi.Task.out_of_field_treatment_zone_code)
  return out_of_field_treatment_zone_code_;
}
inline void Task::set_out_of_field_treatment_zone_code(::google::protobuf::uint32 value) {
  
  out_of_field_treatment_zone_code_ = value;
  // @@protoc_insertion_point(field_set:efdi.Task.out_of_field_treatment_zone_code)
}

// repeated .efdi.TreatmentZone treatment_zone = 11;
inline int Task::treatment_zone_size() const {
  return treatment_zone_.size();
}
inline void Task::clear_treatment_zone() {
  treatment_zone_.Clear();
}
inline const ::efdi::TreatmentZone& Task::treatment_zone(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Task.treatment_zone)
  return treatment_zone_.Get(index);
}
inline ::efdi::TreatmentZone* Task::mutable_treatment_zone(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Task.treatment_zone)
  return treatment_zone_.Mutable(index);
}
inline ::efdi::TreatmentZone* Task::add_treatment_zone() {
  // @@protoc_insertion_point(field_add:efdi.Task.treatment_zone)
  return treatment_zone_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::TreatmentZone >*
Task::mutable_treatment_zone() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Task.treatment_zone)
  return &treatment_zone_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::TreatmentZone >&
Task::treatment_zone() const {
  // @@protoc_insertion_point(field_list:efdi.Task.treatment_zone)
  return treatment_zone_;
}

// repeated .efdi.Time time = 12;
inline int Task::time_size() const {
  return time_.size();
}
inline void Task::clear_time() {
  time_.Clear();
}
inline const ::efdi::Time& Task::time(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Task.time)
  return time_.Get(index);
}
inline ::efdi::Time* Task::mutable_time(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Task.time)
  return time_.Mutable(index);
}
inline ::efdi::Time* Task::add_time() {
  // @@protoc_insertion_point(field_add:efdi.Task.time)
  return time_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::Time >*
Task::mutable_time() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Task.time)
  return &time_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::Time >&
Task::time() const {
  // @@protoc_insertion_point(field_list:efdi.Task.time)
  return time_;
}

// .efdi.OperTechPractice oper_tech_practice = 13;
inline bool Task::has_oper_tech_practice() const {
  return this != internal_default_instance() && oper_tech_practice_ != NULL;
}
inline void Task::clear_oper_tech_practice() {
  if (GetArenaNoVirtual() == NULL && oper_tech_practice_ != NULL) {
    delete oper_tech_practice_;
  }
  oper_tech_practice_ = NULL;
}
inline const ::efdi::OperTechPractice& Task::oper_tech_practice() const {
  const ::efdi::OperTechPractice* p = oper_tech_practice_;
  // @@protoc_insertion_point(field_get:efdi.Task.oper_tech_practice)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::OperTechPractice*>(
      &::efdi::_OperTechPractice_default_instance_);
}
inline ::efdi::OperTechPractice* Task::release_oper_tech_practice() {
  // @@protoc_insertion_point(field_release:efdi.Task.oper_tech_practice)
  
  ::efdi::OperTechPractice* temp = oper_tech_practice_;
  oper_tech_practice_ = NULL;
  return temp;
}
inline ::efdi::OperTechPractice* Task::mutable_oper_tech_practice() {
  
  if (oper_tech_practice_ == NULL) {
    oper_tech_practice_ = new ::efdi::OperTechPractice;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Task.oper_tech_practice)
  return oper_tech_practice_;
}
inline void Task::set_allocated_oper_tech_practice(::efdi::OperTechPractice* oper_tech_practice) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete oper_tech_practice_;
  }
  if (oper_tech_practice) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      oper_tech_practice = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oper_tech_practice, submessage_arena);
    }
    
  } else {
    
  }
  oper_tech_practice_ = oper_tech_practice;
  // @@protoc_insertion_point(field_set_allocated:efdi.Task.oper_tech_practice)
}

// repeated .efdi.WorkerAllocation worker_allocation = 14;
inline int Task::worker_allocation_size() const {
  return worker_allocation_.size();
}
inline void Task::clear_worker_allocation() {
  worker_allocation_.Clear();
}
inline const ::efdi::WorkerAllocation& Task::worker_allocation(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Task.worker_allocation)
  return worker_allocation_.Get(index);
}
inline ::efdi::WorkerAllocation* Task::mutable_worker_allocation(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Task.worker_allocation)
  return worker_allocation_.Mutable(index);
}
inline ::efdi::WorkerAllocation* Task::add_worker_allocation() {
  // @@protoc_insertion_point(field_add:efdi.Task.worker_allocation)
  return worker_allocation_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::WorkerAllocation >*
Task::mutable_worker_allocation() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Task.worker_allocation)
  return &worker_allocation_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::WorkerAllocation >&
Task::worker_allocation() const {
  // @@protoc_insertion_point(field_list:efdi.Task.worker_allocation)
  return worker_allocation_;
}

// repeated .efdi.DeviceAllocation device_allocation = 15;
inline int Task::device_allocation_size() const {
  return device_allocation_.size();
}
inline void Task::clear_device_allocation() {
  device_allocation_.Clear();
}
inline const ::efdi::DeviceAllocation& Task::device_allocation(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Task.device_allocation)
  return device_allocation_.Get(index);
}
inline ::efdi::DeviceAllocation* Task::mutable_device_allocation(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Task.device_allocation)
  return device_allocation_.Mutable(index);
}
inline ::efdi::DeviceAllocation* Task::add_device_allocation() {
  // @@protoc_insertion_point(field_add:efdi.Task.device_allocation)
  return device_allocation_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::DeviceAllocation >*
Task::mutable_device_allocation() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Task.device_allocation)
  return &device_allocation_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::DeviceAllocation >&
Task::device_allocation() const {
  // @@protoc_insertion_point(field_list:efdi.Task.device_allocation)
  return device_allocation_;
}

// repeated .efdi.Connection connection = 16;
inline int Task::connection_size() const {
  return connection_.size();
}
inline void Task::clear_connection() {
  connection_.Clear();
}
inline const ::efdi::Connection& Task::connection(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Task.connection)
  return connection_.Get(index);
}
inline ::efdi::Connection* Task::mutable_connection(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Task.connection)
  return connection_.Mutable(index);
}
inline ::efdi::Connection* Task::add_connection() {
  // @@protoc_insertion_point(field_add:efdi.Task.connection)
  return connection_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::Connection >*
Task::mutable_connection() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Task.connection)
  return &connection_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::Connection >&
Task::connection() const {
  // @@protoc_insertion_point(field_list:efdi.Task.connection)
  return connection_;
}

// repeated .efdi.ProductAllocation product_allocation = 17;
inline int Task::product_allocation_size() const {
  return product_allocation_.size();
}
inline void Task::clear_product_allocation() {
  product_allocation_.Clear();
}
inline const ::efdi::ProductAllocation& Task::product_allocation(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Task.product_allocation)
  return product_allocation_.Get(index);
}
inline ::efdi::ProductAllocation* Task::mutable_product_allocation(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Task.product_allocation)
  return product_allocation_.Mutable(index);
}
inline ::efdi::ProductAllocation* Task::add_product_allocation() {
  // @@protoc_insertion_point(field_add:efdi.Task.product_allocation)
  return product_allocation_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::ProductAllocation >*
Task::mutable_product_allocation() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Task.product_allocation)
  return &product_allocation_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::ProductAllocation >&
Task::product_allocation() const {
  // @@protoc_insertion_point(field_list:efdi.Task.product_allocation)
  return product_allocation_;
}

// repeated .efdi.DataLogTrigger data_log_trigger = 18;
inline int Task::data_log_trigger_size() const {
  return data_log_trigger_.size();
}
inline void Task::clear_data_log_trigger() {
  data_log_trigger_.Clear();
}
inline const ::efdi::DataLogTrigger& Task::data_log_trigger(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Task.data_log_trigger)
  return data_log_trigger_.Get(index);
}
inline ::efdi::DataLogTrigger* Task::mutable_data_log_trigger(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Task.data_log_trigger)
  return data_log_trigger_.Mutable(index);
}
inline ::efdi::DataLogTrigger* Task::add_data_log_trigger() {
  // @@protoc_insertion_point(field_add:efdi.Task.data_log_trigger)
  return data_log_trigger_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::DataLogTrigger >*
Task::mutable_data_log_trigger() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Task.data_log_trigger)
  return &data_log_trigger_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::DataLogTrigger >&
Task::data_log_trigger() const {
  // @@protoc_insertion_point(field_list:efdi.Task.data_log_trigger)
  return data_log_trigger_;
}

// repeated .efdi.CommentAllocation comment_allocation = 19;
inline int Task::comment_allocation_size() const {
  return comment_allocation_.size();
}
inline void Task::clear_comment_allocation() {
  comment_allocation_.Clear();
}
inline const ::efdi::CommentAllocation& Task::comment_allocation(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Task.comment_allocation)
  return comment_allocation_.Get(index);
}
inline ::efdi::CommentAllocation* Task::mutable_comment_allocation(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Task.comment_allocation)
  return comment_allocation_.Mutable(index);
}
inline ::efdi::CommentAllocation* Task::add_comment_allocation() {
  // @@protoc_insertion_point(field_add:efdi.Task.comment_allocation)
  return comment_allocation_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::CommentAllocation >*
Task::mutable_comment_allocation() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Task.comment_allocation)
  return &comment_allocation_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::CommentAllocation >&
Task::comment_allocation() const {
  // @@protoc_insertion_point(field_list:efdi.Task.comment_allocation)
  return comment_allocation_;
}

// repeated .efdi.TimeLog time_log = 20;
inline int Task::time_log_size() const {
  return time_log_.size();
}
inline void Task::clear_time_log() {
  time_log_.Clear();
}
inline const ::efdi::TimeLog& Task::time_log(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Task.time_log)
  return time_log_.Get(index);
}
inline ::efdi::TimeLog* Task::mutable_time_log(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Task.time_log)
  return time_log_.Mutable(index);
}
inline ::efdi::TimeLog* Task::add_time_log() {
  // @@protoc_insertion_point(field_add:efdi.Task.time_log)
  return time_log_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::TimeLog >*
Task::mutable_time_log() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Task.time_log)
  return &time_log_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::TimeLog >&
Task::time_log() const {
  // @@protoc_insertion_point(field_list:efdi.Task.time_log)
  return time_log_;
}

// .efdi.Grid grid = 21;
inline bool Task::has_grid() const {
  return this != internal_default_instance() && grid_ != NULL;
}
inline void Task::clear_grid() {
  if (GetArenaNoVirtual() == NULL && grid_ != NULL) {
    delete grid_;
  }
  grid_ = NULL;
}
inline const ::efdi::Grid& Task::grid() const {
  const ::efdi::Grid* p = grid_;
  // @@protoc_insertion_point(field_get:efdi.Task.grid)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::Grid*>(
      &::efdi::_Grid_default_instance_);
}
inline ::efdi::Grid* Task::release_grid() {
  // @@protoc_insertion_point(field_release:efdi.Task.grid)
  
  ::efdi::Grid* temp = grid_;
  grid_ = NULL;
  return temp;
}
inline ::efdi::Grid* Task::mutable_grid() {
  
  if (grid_ == NULL) {
    grid_ = new ::efdi::Grid;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Task.grid)
  return grid_;
}
inline void Task::set_allocated_grid(::efdi::Grid* grid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete grid_;
  }
  if (grid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      grid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, grid, submessage_arena);
    }
    
  } else {
    
  }
  grid_ = grid;
  // @@protoc_insertion_point(field_set_allocated:efdi.Task.grid)
}

// repeated .efdi.ControlAssignment control_assignment = 22;
inline int Task::control_assignment_size() const {
  return control_assignment_.size();
}
inline void Task::clear_control_assignment() {
  control_assignment_.Clear();
}
inline const ::efdi::ControlAssignment& Task::control_assignment(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Task.control_assignment)
  return control_assignment_.Get(index);
}
inline ::efdi::ControlAssignment* Task::mutable_control_assignment(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Task.control_assignment)
  return control_assignment_.Mutable(index);
}
inline ::efdi::ControlAssignment* Task::add_control_assignment() {
  // @@protoc_insertion_point(field_add:efdi.Task.control_assignment)
  return control_assignment_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::ControlAssignment >*
Task::mutable_control_assignment() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Task.control_assignment)
  return &control_assignment_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::ControlAssignment >&
Task::control_assignment() const {
  // @@protoc_insertion_point(field_list:efdi.Task.control_assignment)
  return control_assignment_;
}

// repeated .efdi.GuidanceAllocation guidance_allocation = 23;
inline int Task::guidance_allocation_size() const {
  return guidance_allocation_.size();
}
inline void Task::clear_guidance_allocation() {
  guidance_allocation_.Clear();
}
inline const ::efdi::GuidanceAllocation& Task::guidance_allocation(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Task.guidance_allocation)
  return guidance_allocation_.Get(index);
}
inline ::efdi::GuidanceAllocation* Task::mutable_guidance_allocation(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Task.guidance_allocation)
  return guidance_allocation_.Mutable(index);
}
inline ::efdi::GuidanceAllocation* Task::add_guidance_allocation() {
  // @@protoc_insertion_point(field_add:efdi.Task.guidance_allocation)
  return guidance_allocation_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::GuidanceAllocation >*
Task::mutable_guidance_allocation() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Task.guidance_allocation)
  return &guidance_allocation_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::GuidanceAllocation >&
Task::guidance_allocation() const {
  // @@protoc_insertion_point(field_list:efdi.Task.guidance_allocation)
  return guidance_allocation_;
}

// repeated .google.protobuf.Any extension = 2048;
inline int Task::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& Task::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Task.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* Task::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Task.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* Task::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.Task.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
Task::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Task.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
Task::extension() const {
  // @@protoc_insertion_point(field_list:efdi.Task.extension)
  return extension_;
}

// -------------------------------------------------------------------

// TaskControllerCapabilities

// bytes task_controller_control_function_name = 1;
inline void TaskControllerCapabilities::clear_task_controller_control_function_name() {
  task_controller_control_function_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskControllerCapabilities::task_controller_control_function_name() const {
  // @@protoc_insertion_point(field_get:efdi.TaskControllerCapabilities.task_controller_control_function_name)
  return task_controller_control_function_name_.GetNoArena();
}
inline void TaskControllerCapabilities::set_task_controller_control_function_name(const ::std::string& value) {
  
  task_controller_control_function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.TaskControllerCapabilities.task_controller_control_function_name)
}
#if LANG_CXX11
inline void TaskControllerCapabilities::set_task_controller_control_function_name(::std::string&& value) {
  
  task_controller_control_function_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.TaskControllerCapabilities.task_controller_control_function_name)
}
#endif
inline void TaskControllerCapabilities::set_task_controller_control_function_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  task_controller_control_function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.TaskControllerCapabilities.task_controller_control_function_name)
}
inline void TaskControllerCapabilities::set_task_controller_control_function_name(const void* value, size_t size) {
  
  task_controller_control_function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.TaskControllerCapabilities.task_controller_control_function_name)
}
inline ::std::string* TaskControllerCapabilities::mutable_task_controller_control_function_name() {
  
  // @@protoc_insertion_point(field_mutable:efdi.TaskControllerCapabilities.task_controller_control_function_name)
  return task_controller_control_function_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskControllerCapabilities::release_task_controller_control_function_name() {
  // @@protoc_insertion_point(field_release:efdi.TaskControllerCapabilities.task_controller_control_function_name)
  
  return task_controller_control_function_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskControllerCapabilities::set_allocated_task_controller_control_function_name(::std::string* task_controller_control_function_name) {
  if (task_controller_control_function_name != NULL) {
    
  } else {
    
  }
  task_controller_control_function_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_controller_control_function_name);
  // @@protoc_insertion_point(field_set_allocated:efdi.TaskControllerCapabilities.task_controller_control_function_name)
}

// string task_controller_designator = 2;
inline void TaskControllerCapabilities::clear_task_controller_designator() {
  task_controller_designator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskControllerCapabilities::task_controller_designator() const {
  // @@protoc_insertion_point(field_get:efdi.TaskControllerCapabilities.task_controller_designator)
  return task_controller_designator_.GetNoArena();
}
inline void TaskControllerCapabilities::set_task_controller_designator(const ::std::string& value) {
  
  task_controller_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.TaskControllerCapabilities.task_controller_designator)
}
#if LANG_CXX11
inline void TaskControllerCapabilities::set_task_controller_designator(::std::string&& value) {
  
  task_controller_designator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.TaskControllerCapabilities.task_controller_designator)
}
#endif
inline void TaskControllerCapabilities::set_task_controller_designator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  task_controller_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.TaskControllerCapabilities.task_controller_designator)
}
inline void TaskControllerCapabilities::set_task_controller_designator(const char* value, size_t size) {
  
  task_controller_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.TaskControllerCapabilities.task_controller_designator)
}
inline ::std::string* TaskControllerCapabilities::mutable_task_controller_designator() {
  
  // @@protoc_insertion_point(field_mutable:efdi.TaskControllerCapabilities.task_controller_designator)
  return task_controller_designator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskControllerCapabilities::release_task_controller_designator() {
  // @@protoc_insertion_point(field_release:efdi.TaskControllerCapabilities.task_controller_designator)
  
  return task_controller_designator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskControllerCapabilities::set_allocated_task_controller_designator(::std::string* task_controller_designator) {
  if (task_controller_designator != NULL) {
    
  } else {
    
  }
  task_controller_designator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_controller_designator);
  // @@protoc_insertion_point(field_set_allocated:efdi.TaskControllerCapabilities.task_controller_designator)
}

// .efdi.TaskControllerCapabilities.VersionNumber version_number = 3;
inline void TaskControllerCapabilities::clear_version_number() {
  version_number_ = 0;
}
inline ::efdi::TaskControllerCapabilities_VersionNumber TaskControllerCapabilities::version_number() const {
  // @@protoc_insertion_point(field_get:efdi.TaskControllerCapabilities.version_number)
  return static_cast< ::efdi::TaskControllerCapabilities_VersionNumber >(version_number_);
}
inline void TaskControllerCapabilities::set_version_number(::efdi::TaskControllerCapabilities_VersionNumber value) {
  
  version_number_ = value;
  // @@protoc_insertion_point(field_set:efdi.TaskControllerCapabilities.version_number)
}

// uint32 provided_capabilities = 4;
inline void TaskControllerCapabilities::clear_provided_capabilities() {
  provided_capabilities_ = 0u;
}
inline ::google::protobuf::uint32 TaskControllerCapabilities::provided_capabilities() const {
  // @@protoc_insertion_point(field_get:efdi.TaskControllerCapabilities.provided_capabilities)
  return provided_capabilities_;
}
inline void TaskControllerCapabilities::set_provided_capabilities(::google::protobuf::uint32 value) {
  
  provided_capabilities_ = value;
  // @@protoc_insertion_point(field_set:efdi.TaskControllerCapabilities.provided_capabilities)
}

// uint32 number_of_booms_section_control = 5;
inline void TaskControllerCapabilities::clear_number_of_booms_section_control() {
  number_of_booms_section_control_ = 0u;
}
inline ::google::protobuf::uint32 TaskControllerCapabilities::number_of_booms_section_control() const {
  // @@protoc_insertion_point(field_get:efdi.TaskControllerCapabilities.number_of_booms_section_control)
  return number_of_booms_section_control_;
}
inline void TaskControllerCapabilities::set_number_of_booms_section_control(::google::protobuf::uint32 value) {
  
  number_of_booms_section_control_ = value;
  // @@protoc_insertion_point(field_set:efdi.TaskControllerCapabilities.number_of_booms_section_control)
}

// uint32 number_of_sections_section_control = 6;
inline void TaskControllerCapabilities::clear_number_of_sections_section_control() {
  number_of_sections_section_control_ = 0u;
}
inline ::google::protobuf::uint32 TaskControllerCapabilities::number_of_sections_section_control() const {
  // @@protoc_insertion_point(field_get:efdi.TaskControllerCapabilities.number_of_sections_section_control)
  return number_of_sections_section_control_;
}
inline void TaskControllerCapabilities::set_number_of_sections_section_control(::google::protobuf::uint32 value) {
  
  number_of_sections_section_control_ = value;
  // @@protoc_insertion_point(field_set:efdi.TaskControllerCapabilities.number_of_sections_section_control)
}

// uint32 number_of_control_channels = 7;
inline void TaskControllerCapabilities::clear_number_of_control_channels() {
  number_of_control_channels_ = 0u;
}
inline ::google::protobuf::uint32 TaskControllerCapabilities::number_of_control_channels() const {
  // @@protoc_insertion_point(field_get:efdi.TaskControllerCapabilities.number_of_control_channels)
  return number_of_control_channels_;
}
inline void TaskControllerCapabilities::set_number_of_control_channels(::google::protobuf::uint32 value) {
  
  number_of_control_channels_ = value;
  // @@protoc_insertion_point(field_set:efdi.TaskControllerCapabilities.number_of_control_channels)
}

// repeated .google.protobuf.Any extension = 2048;
inline int TaskControllerCapabilities::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& TaskControllerCapabilities::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.TaskControllerCapabilities.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* TaskControllerCapabilities::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.TaskControllerCapabilities.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* TaskControllerCapabilities::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.TaskControllerCapabilities.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
TaskControllerCapabilities::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.TaskControllerCapabilities.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
TaskControllerCapabilities::extension() const {
  // @@protoc_insertion_point(field_list:efdi.TaskControllerCapabilities.extension)
  return extension_;
}

// -------------------------------------------------------------------

// Time

// .google.protobuf.Timestamp start = 1;
inline bool Time::has_start() const {
  return this != internal_default_instance() && start_ != NULL;
}
inline const ::google::protobuf::Timestamp& Time::start() const {
  const ::google::protobuf::Timestamp* p = start_;
  // @@protoc_insertion_point(field_get:efdi.Time.start)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Time::release_start() {
  // @@protoc_insertion_point(field_release:efdi.Time.start)
  
  ::google::protobuf::Timestamp* temp = start_;
  start_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Time::mutable_start() {
  
  if (start_ == NULL) {
    start_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Time.start)
  return start_;
}
inline void Time::set_allocated_start(::google::protobuf::Timestamp* start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_);
  }
  if (start) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(start)->GetArena();
    if (message_arena != submessage_arena) {
      start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:efdi.Time.start)
}

// .google.protobuf.Timestamp stop = 2;
inline bool Time::has_stop() const {
  return this != internal_default_instance() && stop_ != NULL;
}
inline const ::google::protobuf::Timestamp& Time::stop() const {
  const ::google::protobuf::Timestamp* p = stop_;
  // @@protoc_insertion_point(field_get:efdi.Time.stop)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Time::release_stop() {
  // @@protoc_insertion_point(field_release:efdi.Time.stop)
  
  ::google::protobuf::Timestamp* temp = stop_;
  stop_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Time::mutable_stop() {
  
  if (stop_ == NULL) {
    stop_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Time.stop)
  return stop_;
}
inline void Time::set_allocated_stop(::google::protobuf::Timestamp* stop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(stop_);
  }
  if (stop) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(stop)->GetArena();
    if (message_arena != submessage_arena) {
      stop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stop, submessage_arena);
    }
    
  } else {
    
  }
  stop_ = stop;
  // @@protoc_insertion_point(field_set_allocated:efdi.Time.stop)
}

// uint64 duration = 3;
inline void Time::clear_duration() {
  duration_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Time::duration() const {
  // @@protoc_insertion_point(field_get:efdi.Time.duration)
  return duration_;
}
inline void Time::set_duration(::google::protobuf::uint64 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:efdi.Time.duration)
}

// .efdi.Time.TimeType type = 4;
inline void Time::clear_type() {
  type_ = 0;
}
inline ::efdi::Time_TimeType Time::type() const {
  // @@protoc_insertion_point(field_get:efdi.Time.type)
  return static_cast< ::efdi::Time_TimeType >(type_);
}
inline void Time::set_type(::efdi::Time_TimeType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:efdi.Time.type)
}

// .efdi.Position position_start = 5;
inline bool Time::has_position_start() const {
  return this != internal_default_instance() && position_start_ != NULL;
}
inline void Time::clear_position_start() {
  if (GetArenaNoVirtual() == NULL && position_start_ != NULL) {
    delete position_start_;
  }
  position_start_ = NULL;
}
inline const ::efdi::Position& Time::position_start() const {
  const ::efdi::Position* p = position_start_;
  // @@protoc_insertion_point(field_get:efdi.Time.position_start)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::Position*>(
      &::efdi::_Position_default_instance_);
}
inline ::efdi::Position* Time::release_position_start() {
  // @@protoc_insertion_point(field_release:efdi.Time.position_start)
  
  ::efdi::Position* temp = position_start_;
  position_start_ = NULL;
  return temp;
}
inline ::efdi::Position* Time::mutable_position_start() {
  
  if (position_start_ == NULL) {
    position_start_ = new ::efdi::Position;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Time.position_start)
  return position_start_;
}
inline void Time::set_allocated_position_start(::efdi::Position* position_start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_start_;
  }
  if (position_start) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position_start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position_start, submessage_arena);
    }
    
  } else {
    
  }
  position_start_ = position_start;
  // @@protoc_insertion_point(field_set_allocated:efdi.Time.position_start)
}

// .efdi.Position position_stop = 6;
inline bool Time::has_position_stop() const {
  return this != internal_default_instance() && position_stop_ != NULL;
}
inline void Time::clear_position_stop() {
  if (GetArenaNoVirtual() == NULL && position_stop_ != NULL) {
    delete position_stop_;
  }
  position_stop_ = NULL;
}
inline const ::efdi::Position& Time::position_stop() const {
  const ::efdi::Position* p = position_stop_;
  // @@protoc_insertion_point(field_get:efdi.Time.position_stop)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::Position*>(
      &::efdi::_Position_default_instance_);
}
inline ::efdi::Position* Time::release_position_stop() {
  // @@protoc_insertion_point(field_release:efdi.Time.position_stop)
  
  ::efdi::Position* temp = position_stop_;
  position_stop_ = NULL;
  return temp;
}
inline ::efdi::Position* Time::mutable_position_stop() {
  
  if (position_stop_ == NULL) {
    position_stop_ = new ::efdi::Position;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Time.position_stop)
  return position_stop_;
}
inline void Time::set_allocated_position_stop(::efdi::Position* position_stop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_stop_;
  }
  if (position_stop) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position_stop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position_stop, submessage_arena);
    }
    
  } else {
    
  }
  position_stop_ = position_stop;
  // @@protoc_insertion_point(field_set_allocated:efdi.Time.position_stop)
}

// repeated .efdi.DataLogValue data_log_value = 7;
inline int Time::data_log_value_size() const {
  return data_log_value_.size();
}
inline void Time::clear_data_log_value() {
  data_log_value_.Clear();
}
inline const ::efdi::DataLogValue& Time::data_log_value(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Time.data_log_value)
  return data_log_value_.Get(index);
}
inline ::efdi::DataLogValue* Time::mutable_data_log_value(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Time.data_log_value)
  return data_log_value_.Mutable(index);
}
inline ::efdi::DataLogValue* Time::add_data_log_value() {
  // @@protoc_insertion_point(field_add:efdi.Time.data_log_value)
  return data_log_value_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::DataLogValue >*
Time::mutable_data_log_value() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Time.data_log_value)
  return &data_log_value_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::DataLogValue >&
Time::data_log_value() const {
  // @@protoc_insertion_point(field_list:efdi.Time.data_log_value)
  return data_log_value_;
}

// repeated .google.protobuf.Any extension = 2048;
inline int Time::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& Time::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Time.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* Time::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Time.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* Time::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.Time.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
Time::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Time.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
Time::extension() const {
  // @@protoc_insertion_point(field_list:efdi.Time.extension)
  return extension_;
}

// -------------------------------------------------------------------

// TimeIntOnly

// .google.protobuf.Timestamp start = 1;
inline bool TimeIntOnly::has_start() const {
  return this != internal_default_instance() && start_ != NULL;
}
inline const ::google::protobuf::Timestamp& TimeIntOnly::start() const {
  const ::google::protobuf::Timestamp* p = start_;
  // @@protoc_insertion_point(field_get:efdi.TimeIntOnly.start)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TimeIntOnly::release_start() {
  // @@protoc_insertion_point(field_release:efdi.TimeIntOnly.start)
  
  ::google::protobuf::Timestamp* temp = start_;
  start_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TimeIntOnly::mutable_start() {
  
  if (start_ == NULL) {
    start_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:efdi.TimeIntOnly.start)
  return start_;
}
inline void TimeIntOnly::set_allocated_start(::google::protobuf::Timestamp* start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_);
  }
  if (start) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(start)->GetArena();
    if (message_arena != submessage_arena) {
      start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:efdi.TimeIntOnly.start)
}

// .google.protobuf.Timestamp stop = 2;
inline bool TimeIntOnly::has_stop() const {
  return this != internal_default_instance() && stop_ != NULL;
}
inline const ::google::protobuf::Timestamp& TimeIntOnly::stop() const {
  const ::google::protobuf::Timestamp* p = stop_;
  // @@protoc_insertion_point(field_get:efdi.TimeIntOnly.stop)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TimeIntOnly::release_stop() {
  // @@protoc_insertion_point(field_release:efdi.TimeIntOnly.stop)
  
  ::google::protobuf::Timestamp* temp = stop_;
  stop_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TimeIntOnly::mutable_stop() {
  
  if (stop_ == NULL) {
    stop_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:efdi.TimeIntOnly.stop)
  return stop_;
}
inline void TimeIntOnly::set_allocated_stop(::google::protobuf::Timestamp* stop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(stop_);
  }
  if (stop) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(stop)->GetArena();
    if (message_arena != submessage_arena) {
      stop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stop, submessage_arena);
    }
    
  } else {
    
  }
  stop_ = stop;
  // @@protoc_insertion_point(field_set_allocated:efdi.TimeIntOnly.stop)
}

// uint64 duration = 3;
inline void TimeIntOnly::clear_duration() {
  duration_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimeIntOnly::duration() const {
  // @@protoc_insertion_point(field_get:efdi.TimeIntOnly.duration)
  return duration_;
}
inline void TimeIntOnly::set_duration(::google::protobuf::uint64 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:efdi.TimeIntOnly.duration)
}

// .efdi.TimeIntOnly.TimeType type = 4;
inline void TimeIntOnly::clear_type() {
  type_ = 0;
}
inline ::efdi::TimeIntOnly_TimeType TimeIntOnly::type() const {
  // @@protoc_insertion_point(field_get:efdi.TimeIntOnly.type)
  return static_cast< ::efdi::TimeIntOnly_TimeType >(type_);
}
inline void TimeIntOnly::set_type(::efdi::TimeIntOnly_TimeType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:efdi.TimeIntOnly.type)
}

// .efdi.Position position_start = 5;
inline bool TimeIntOnly::has_position_start() const {
  return this != internal_default_instance() && position_start_ != NULL;
}
inline void TimeIntOnly::clear_position_start() {
  if (GetArenaNoVirtual() == NULL && position_start_ != NULL) {
    delete position_start_;
  }
  position_start_ = NULL;
}
inline const ::efdi::Position& TimeIntOnly::position_start() const {
  const ::efdi::Position* p = position_start_;
  // @@protoc_insertion_point(field_get:efdi.TimeIntOnly.position_start)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::Position*>(
      &::efdi::_Position_default_instance_);
}
inline ::efdi::Position* TimeIntOnly::release_position_start() {
  // @@protoc_insertion_point(field_release:efdi.TimeIntOnly.position_start)
  
  ::efdi::Position* temp = position_start_;
  position_start_ = NULL;
  return temp;
}
inline ::efdi::Position* TimeIntOnly::mutable_position_start() {
  
  if (position_start_ == NULL) {
    position_start_ = new ::efdi::Position;
  }
  // @@protoc_insertion_point(field_mutable:efdi.TimeIntOnly.position_start)
  return position_start_;
}
inline void TimeIntOnly::set_allocated_position_start(::efdi::Position* position_start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_start_;
  }
  if (position_start) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position_start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position_start, submessage_arena);
    }
    
  } else {
    
  }
  position_start_ = position_start;
  // @@protoc_insertion_point(field_set_allocated:efdi.TimeIntOnly.position_start)
}

// .efdi.Position position_stop = 6;
inline bool TimeIntOnly::has_position_stop() const {
  return this != internal_default_instance() && position_stop_ != NULL;
}
inline void TimeIntOnly::clear_position_stop() {
  if (GetArenaNoVirtual() == NULL && position_stop_ != NULL) {
    delete position_stop_;
  }
  position_stop_ = NULL;
}
inline const ::efdi::Position& TimeIntOnly::position_stop() const {
  const ::efdi::Position* p = position_stop_;
  // @@protoc_insertion_point(field_get:efdi.TimeIntOnly.position_stop)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::Position*>(
      &::efdi::_Position_default_instance_);
}
inline ::efdi::Position* TimeIntOnly::release_position_stop() {
  // @@protoc_insertion_point(field_release:efdi.TimeIntOnly.position_stop)
  
  ::efdi::Position* temp = position_stop_;
  position_stop_ = NULL;
  return temp;
}
inline ::efdi::Position* TimeIntOnly::mutable_position_stop() {
  
  if (position_stop_ == NULL) {
    position_stop_ = new ::efdi::Position;
  }
  // @@protoc_insertion_point(field_mutable:efdi.TimeIntOnly.position_stop)
  return position_stop_;
}
inline void TimeIntOnly::set_allocated_position_stop(::efdi::Position* position_stop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_stop_;
  }
  if (position_stop) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position_stop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position_stop, submessage_arena);
    }
    
  } else {
    
  }
  position_stop_ = position_stop;
  // @@protoc_insertion_point(field_set_allocated:efdi.TimeIntOnly.position_stop)
}

// repeated .efdi.DataLogValueIntOnly data_log_value = 7;
inline int TimeIntOnly::data_log_value_size() const {
  return data_log_value_.size();
}
inline void TimeIntOnly::clear_data_log_value() {
  data_log_value_.Clear();
}
inline const ::efdi::DataLogValueIntOnly& TimeIntOnly::data_log_value(int index) const {
  // @@protoc_insertion_point(field_get:efdi.TimeIntOnly.data_log_value)
  return data_log_value_.Get(index);
}
inline ::efdi::DataLogValueIntOnly* TimeIntOnly::mutable_data_log_value(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.TimeIntOnly.data_log_value)
  return data_log_value_.Mutable(index);
}
inline ::efdi::DataLogValueIntOnly* TimeIntOnly::add_data_log_value() {
  // @@protoc_insertion_point(field_add:efdi.TimeIntOnly.data_log_value)
  return data_log_value_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::DataLogValueIntOnly >*
TimeIntOnly::mutable_data_log_value() {
  // @@protoc_insertion_point(field_mutable_list:efdi.TimeIntOnly.data_log_value)
  return &data_log_value_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::DataLogValueIntOnly >&
TimeIntOnly::data_log_value() const {
  // @@protoc_insertion_point(field_list:efdi.TimeIntOnly.data_log_value)
  return data_log_value_;
}

// .google.protobuf.Any extension = 2048;
inline bool TimeIntOnly::has_extension() const {
  return this != internal_default_instance() && extension_ != NULL;
}
inline const ::google::protobuf::Any& TimeIntOnly::extension() const {
  const ::google::protobuf::Any* p = extension_;
  // @@protoc_insertion_point(field_get:efdi.TimeIntOnly.extension)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* TimeIntOnly::release_extension() {
  // @@protoc_insertion_point(field_release:efdi.TimeIntOnly.extension)
  
  ::google::protobuf::Any* temp = extension_;
  extension_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* TimeIntOnly::mutable_extension() {
  
  if (extension_ == NULL) {
    extension_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:efdi.TimeIntOnly.extension)
  return extension_;
}
inline void TimeIntOnly::set_allocated_extension(::google::protobuf::Any* extension) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(extension_);
  }
  if (extension) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      extension = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, extension, submessage_arena);
    }
    
  } else {
    
  }
  extension_ = extension;
  // @@protoc_insertion_point(field_set_allocated:efdi.TimeIntOnly.extension)
}

// -------------------------------------------------------------------

// TimeDetHier

// .google.protobuf.Timestamp start = 1;
inline bool TimeDetHier::has_start() const {
  return this != internal_default_instance() && start_ != NULL;
}
inline const ::google::protobuf::Timestamp& TimeDetHier::start() const {
  const ::google::protobuf::Timestamp* p = start_;
  // @@protoc_insertion_point(field_get:efdi.TimeDetHier.start)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TimeDetHier::release_start() {
  // @@protoc_insertion_point(field_release:efdi.TimeDetHier.start)
  
  ::google::protobuf::Timestamp* temp = start_;
  start_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TimeDetHier::mutable_start() {
  
  if (start_ == NULL) {
    start_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:efdi.TimeDetHier.start)
  return start_;
}
inline void TimeDetHier::set_allocated_start(::google::protobuf::Timestamp* start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_);
  }
  if (start) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(start)->GetArena();
    if (message_arena != submessage_arena) {
      start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:efdi.TimeDetHier.start)
}

// .google.protobuf.Timestamp stop = 2;
inline bool TimeDetHier::has_stop() const {
  return this != internal_default_instance() && stop_ != NULL;
}
inline const ::google::protobuf::Timestamp& TimeDetHier::stop() const {
  const ::google::protobuf::Timestamp* p = stop_;
  // @@protoc_insertion_point(field_get:efdi.TimeDetHier.stop)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TimeDetHier::release_stop() {
  // @@protoc_insertion_point(field_release:efdi.TimeDetHier.stop)
  
  ::google::protobuf::Timestamp* temp = stop_;
  stop_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TimeDetHier::mutable_stop() {
  
  if (stop_ == NULL) {
    stop_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:efdi.TimeDetHier.stop)
  return stop_;
}
inline void TimeDetHier::set_allocated_stop(::google::protobuf::Timestamp* stop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(stop_);
  }
  if (stop) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(stop)->GetArena();
    if (message_arena != submessage_arena) {
      stop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stop, submessage_arena);
    }
    
  } else {
    
  }
  stop_ = stop;
  // @@protoc_insertion_point(field_set_allocated:efdi.TimeDetHier.stop)
}

// uint64 duration = 3;
inline void TimeDetHier::clear_duration() {
  duration_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimeDetHier::duration() const {
  // @@protoc_insertion_point(field_get:efdi.TimeDetHier.duration)
  return duration_;
}
inline void TimeDetHier::set_duration(::google::protobuf::uint64 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:efdi.TimeDetHier.duration)
}

// .efdi.TimeDetHier.TimeType type = 4;
inline void TimeDetHier::clear_type() {
  type_ = 0;
}
inline ::efdi::TimeDetHier_TimeType TimeDetHier::type() const {
  // @@protoc_insertion_point(field_get:efdi.TimeDetHier.type)
  return static_cast< ::efdi::TimeDetHier_TimeType >(type_);
}
inline void TimeDetHier::set_type(::efdi::TimeDetHier_TimeType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:efdi.TimeDetHier.type)
}

// .efdi.Position position_start = 5;
inline bool TimeDetHier::has_position_start() const {
  return this != internal_default_instance() && position_start_ != NULL;
}
inline void TimeDetHier::clear_position_start() {
  if (GetArenaNoVirtual() == NULL && position_start_ != NULL) {
    delete position_start_;
  }
  position_start_ = NULL;
}
inline const ::efdi::Position& TimeDetHier::position_start() const {
  const ::efdi::Position* p = position_start_;
  // @@protoc_insertion_point(field_get:efdi.TimeDetHier.position_start)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::Position*>(
      &::efdi::_Position_default_instance_);
}
inline ::efdi::Position* TimeDetHier::release_position_start() {
  // @@protoc_insertion_point(field_release:efdi.TimeDetHier.position_start)
  
  ::efdi::Position* temp = position_start_;
  position_start_ = NULL;
  return temp;
}
inline ::efdi::Position* TimeDetHier::mutable_position_start() {
  
  if (position_start_ == NULL) {
    position_start_ = new ::efdi::Position;
  }
  // @@protoc_insertion_point(field_mutable:efdi.TimeDetHier.position_start)
  return position_start_;
}
inline void TimeDetHier::set_allocated_position_start(::efdi::Position* position_start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_start_;
  }
  if (position_start) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position_start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position_start, submessage_arena);
    }
    
  } else {
    
  }
  position_start_ = position_start;
  // @@protoc_insertion_point(field_set_allocated:efdi.TimeDetHier.position_start)
}

// .efdi.Position position_stop = 6;
inline bool TimeDetHier::has_position_stop() const {
  return this != internal_default_instance() && position_stop_ != NULL;
}
inline void TimeDetHier::clear_position_stop() {
  if (GetArenaNoVirtual() == NULL && position_stop_ != NULL) {
    delete position_stop_;
  }
  position_stop_ = NULL;
}
inline const ::efdi::Position& TimeDetHier::position_stop() const {
  const ::efdi::Position* p = position_stop_;
  // @@protoc_insertion_point(field_get:efdi.TimeDetHier.position_stop)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::Position*>(
      &::efdi::_Position_default_instance_);
}
inline ::efdi::Position* TimeDetHier::release_position_stop() {
  // @@protoc_insertion_point(field_release:efdi.TimeDetHier.position_stop)
  
  ::efdi::Position* temp = position_stop_;
  position_stop_ = NULL;
  return temp;
}
inline ::efdi::Position* TimeDetHier::mutable_position_stop() {
  
  if (position_stop_ == NULL) {
    position_stop_ = new ::efdi::Position;
  }
  // @@protoc_insertion_point(field_mutable:efdi.TimeDetHier.position_stop)
  return position_stop_;
}
inline void TimeDetHier::set_allocated_position_stop(::efdi::Position* position_stop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_stop_;
  }
  if (position_stop) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position_stop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position_stop, submessage_arena);
    }
    
  } else {
    
  }
  position_stop_ = position_stop;
  // @@protoc_insertion_point(field_set_allocated:efdi.TimeDetHier.position_stop)
}

// repeated .efdi.DeviceElementData device_element_data = 7;
inline int TimeDetHier::device_element_data_size() const {
  return device_element_data_.size();
}
inline void TimeDetHier::clear_device_element_data() {
  device_element_data_.Clear();
}
inline const ::efdi::DeviceElementData& TimeDetHier::device_element_data(int index) const {
  // @@protoc_insertion_point(field_get:efdi.TimeDetHier.device_element_data)
  return device_element_data_.Get(index);
}
inline ::efdi::DeviceElementData* TimeDetHier::mutable_device_element_data(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.TimeDetHier.device_element_data)
  return device_element_data_.Mutable(index);
}
inline ::efdi::DeviceElementData* TimeDetHier::add_device_element_data() {
  // @@protoc_insertion_point(field_add:efdi.TimeDetHier.device_element_data)
  return device_element_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::DeviceElementData >*
TimeDetHier::mutable_device_element_data() {
  // @@protoc_insertion_point(field_mutable_list:efdi.TimeDetHier.device_element_data)
  return &device_element_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::DeviceElementData >&
TimeDetHier::device_element_data() const {
  // @@protoc_insertion_point(field_list:efdi.TimeDetHier.device_element_data)
  return device_element_data_;
}

// .google.protobuf.Any extension = 2048;
inline bool TimeDetHier::has_extension() const {
  return this != internal_default_instance() && extension_ != NULL;
}
inline const ::google::protobuf::Any& TimeDetHier::extension() const {
  const ::google::protobuf::Any* p = extension_;
  // @@protoc_insertion_point(field_get:efdi.TimeDetHier.extension)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* TimeDetHier::release_extension() {
  // @@protoc_insertion_point(field_release:efdi.TimeDetHier.extension)
  
  ::google::protobuf::Any* temp = extension_;
  extension_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* TimeDetHier::mutable_extension() {
  
  if (extension_ == NULL) {
    extension_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:efdi.TimeDetHier.extension)
  return extension_;
}
inline void TimeDetHier::set_allocated_extension(::google::protobuf::Any* extension) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(extension_);
  }
  if (extension) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      extension = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, extension, submessage_arena);
    }
    
  } else {
    
  }
  extension_ = extension;
  // @@protoc_insertion_point(field_set_allocated:efdi.TimeDetHier.extension)
}

// -------------------------------------------------------------------

// DeviceElementData

// sint64 device_element_id_ref = 1;
inline void DeviceElementData::clear_device_element_id_ref() {
  device_element_id_ref_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DeviceElementData::device_element_id_ref() const {
  // @@protoc_insertion_point(field_get:efdi.DeviceElementData.device_element_id_ref)
  return device_element_id_ref_;
}
inline void DeviceElementData::set_device_element_id_ref(::google::protobuf::int64 value) {
  
  device_element_id_ref_ = value;
  // @@protoc_insertion_point(field_set:efdi.DeviceElementData.device_element_id_ref)
}

// repeated .efdi.DataLogValueIntOnly data_log_value = 2;
inline int DeviceElementData::data_log_value_size() const {
  return data_log_value_.size();
}
inline void DeviceElementData::clear_data_log_value() {
  data_log_value_.Clear();
}
inline const ::efdi::DataLogValueIntOnly& DeviceElementData::data_log_value(int index) const {
  // @@protoc_insertion_point(field_get:efdi.DeviceElementData.data_log_value)
  return data_log_value_.Get(index);
}
inline ::efdi::DataLogValueIntOnly* DeviceElementData::mutable_data_log_value(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.DeviceElementData.data_log_value)
  return data_log_value_.Mutable(index);
}
inline ::efdi::DataLogValueIntOnly* DeviceElementData::add_data_log_value() {
  // @@protoc_insertion_point(field_add:efdi.DeviceElementData.data_log_value)
  return data_log_value_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::DataLogValueIntOnly >*
DeviceElementData::mutable_data_log_value() {
  // @@protoc_insertion_point(field_mutable_list:efdi.DeviceElementData.data_log_value)
  return &data_log_value_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::DataLogValueIntOnly >&
DeviceElementData::data_log_value() const {
  // @@protoc_insertion_point(field_list:efdi.DeviceElementData.data_log_value)
  return data_log_value_;
}

// -------------------------------------------------------------------

// TimeLog

// string filename = 2;
inline void TimeLog::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TimeLog::filename() const {
  // @@protoc_insertion_point(field_get:efdi.TimeLog.filename)
  return filename_.GetNoArena();
}
inline void TimeLog::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.TimeLog.filename)
}
#if LANG_CXX11
inline void TimeLog::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.TimeLog.filename)
}
#endif
inline void TimeLog::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.TimeLog.filename)
}
inline void TimeLog::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.TimeLog.filename)
}
inline ::std::string* TimeLog::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:efdi.TimeLog.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TimeLog::release_filename() {
  // @@protoc_insertion_point(field_release:efdi.TimeLog.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TimeLog::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:efdi.TimeLog.filename)
}

// uint64 filelength = 3;
inline void TimeLog::clear_filelength() {
  filelength_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimeLog::filelength() const {
  // @@protoc_insertion_point(field_get:efdi.TimeLog.filelength)
  return filelength_;
}
inline void TimeLog::set_filelength(::google::protobuf::uint64 value) {
  
  filelength_ = value;
  // @@protoc_insertion_point(field_set:efdi.TimeLog.filelength)
}

// .efdi.TimeLog.TimeLogType time_log_type = 1;
inline void TimeLog::clear_time_log_type() {
  time_log_type_ = 0;
}
inline ::efdi::TimeLog_TimeLogType TimeLog::time_log_type() const {
  // @@protoc_insertion_point(field_get:efdi.TimeLog.time_log_type)
  return static_cast< ::efdi::TimeLog_TimeLogType >(time_log_type_);
}
inline void TimeLog::set_time_log_type(::efdi::TimeLog_TimeLogType value) {
  
  time_log_type_ = value;
  // @@protoc_insertion_point(field_set:efdi.TimeLog.time_log_type)
}

// repeated .efdi.Time time = 4;
inline int TimeLog::time_size() const {
  return time_.size();
}
inline void TimeLog::clear_time() {
  time_.Clear();
}
inline const ::efdi::Time& TimeLog::time(int index) const {
  // @@protoc_insertion_point(field_get:efdi.TimeLog.time)
  return time_.Get(index);
}
inline ::efdi::Time* TimeLog::mutable_time(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.TimeLog.time)
  return time_.Mutable(index);
}
inline ::efdi::Time* TimeLog::add_time() {
  // @@protoc_insertion_point(field_add:efdi.TimeLog.time)
  return time_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::Time >*
TimeLog::mutable_time() {
  // @@protoc_insertion_point(field_mutable_list:efdi.TimeLog.time)
  return &time_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::Time >&
TimeLog::time() const {
  // @@protoc_insertion_point(field_list:efdi.TimeLog.time)
  return time_;
}

// repeated .google.protobuf.Any extension = 2048;
inline int TimeLog::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& TimeLog::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.TimeLog.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* TimeLog::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.TimeLog.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* TimeLog::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.TimeLog.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
TimeLog::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.TimeLog.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
TimeLog::extension() const {
  // @@protoc_insertion_point(field_list:efdi.TimeLog.extension)
  return extension_;
}

// -------------------------------------------------------------------

// TreatmentZone

// uint32 treatment_zone_code = 1;
inline void TreatmentZone::clear_treatment_zone_code() {
  treatment_zone_code_ = 0u;
}
inline ::google::protobuf::uint32 TreatmentZone::treatment_zone_code() const {
  // @@protoc_insertion_point(field_get:efdi.TreatmentZone.treatment_zone_code)
  return treatment_zone_code_;
}
inline void TreatmentZone::set_treatment_zone_code(::google::protobuf::uint32 value) {
  
  treatment_zone_code_ = value;
  // @@protoc_insertion_point(field_set:efdi.TreatmentZone.treatment_zone_code)
}

// string treatment_zone_designator = 2;
inline void TreatmentZone::clear_treatment_zone_designator() {
  treatment_zone_designator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TreatmentZone::treatment_zone_designator() const {
  // @@protoc_insertion_point(field_get:efdi.TreatmentZone.treatment_zone_designator)
  return treatment_zone_designator_.GetNoArena();
}
inline void TreatmentZone::set_treatment_zone_designator(const ::std::string& value) {
  
  treatment_zone_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.TreatmentZone.treatment_zone_designator)
}
#if LANG_CXX11
inline void TreatmentZone::set_treatment_zone_designator(::std::string&& value) {
  
  treatment_zone_designator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.TreatmentZone.treatment_zone_designator)
}
#endif
inline void TreatmentZone::set_treatment_zone_designator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  treatment_zone_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.TreatmentZone.treatment_zone_designator)
}
inline void TreatmentZone::set_treatment_zone_designator(const char* value, size_t size) {
  
  treatment_zone_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.TreatmentZone.treatment_zone_designator)
}
inline ::std::string* TreatmentZone::mutable_treatment_zone_designator() {
  
  // @@protoc_insertion_point(field_mutable:efdi.TreatmentZone.treatment_zone_designator)
  return treatment_zone_designator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TreatmentZone::release_treatment_zone_designator() {
  // @@protoc_insertion_point(field_release:efdi.TreatmentZone.treatment_zone_designator)
  
  return treatment_zone_designator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TreatmentZone::set_allocated_treatment_zone_designator(::std::string* treatment_zone_designator) {
  if (treatment_zone_designator != NULL) {
    
  } else {
    
  }
  treatment_zone_designator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), treatment_zone_designator);
  // @@protoc_insertion_point(field_set_allocated:efdi.TreatmentZone.treatment_zone_designator)
}

// uint32 treatment_zone_colour = 3;
inline void TreatmentZone::clear_treatment_zone_colour() {
  treatment_zone_colour_ = 0u;
}
inline ::google::protobuf::uint32 TreatmentZone::treatment_zone_colour() const {
  // @@protoc_insertion_point(field_get:efdi.TreatmentZone.treatment_zone_colour)
  return treatment_zone_colour_;
}
inline void TreatmentZone::set_treatment_zone_colour(::google::protobuf::uint32 value) {
  
  treatment_zone_colour_ = value;
  // @@protoc_insertion_point(field_set:efdi.TreatmentZone.treatment_zone_colour)
}

// repeated .efdi.Polygon polygon = 4;
inline int TreatmentZone::polygon_size() const {
  return polygon_.size();
}
inline void TreatmentZone::clear_polygon() {
  polygon_.Clear();
}
inline const ::efdi::Polygon& TreatmentZone::polygon(int index) const {
  // @@protoc_insertion_point(field_get:efdi.TreatmentZone.polygon)
  return polygon_.Get(index);
}
inline ::efdi::Polygon* TreatmentZone::mutable_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.TreatmentZone.polygon)
  return polygon_.Mutable(index);
}
inline ::efdi::Polygon* TreatmentZone::add_polygon() {
  // @@protoc_insertion_point(field_add:efdi.TreatmentZone.polygon)
  return polygon_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::Polygon >*
TreatmentZone::mutable_polygon() {
  // @@protoc_insertion_point(field_mutable_list:efdi.TreatmentZone.polygon)
  return &polygon_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::Polygon >&
TreatmentZone::polygon() const {
  // @@protoc_insertion_point(field_list:efdi.TreatmentZone.polygon)
  return polygon_;
}

// repeated .efdi.ProcessDataVariable process_data_variable = 5;
inline int TreatmentZone::process_data_variable_size() const {
  return process_data_variable_.size();
}
inline void TreatmentZone::clear_process_data_variable() {
  process_data_variable_.Clear();
}
inline const ::efdi::ProcessDataVariable& TreatmentZone::process_data_variable(int index) const {
  // @@protoc_insertion_point(field_get:efdi.TreatmentZone.process_data_variable)
  return process_data_variable_.Get(index);
}
inline ::efdi::ProcessDataVariable* TreatmentZone::mutable_process_data_variable(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.TreatmentZone.process_data_variable)
  return process_data_variable_.Mutable(index);
}
inline ::efdi::ProcessDataVariable* TreatmentZone::add_process_data_variable() {
  // @@protoc_insertion_point(field_add:efdi.TreatmentZone.process_data_variable)
  return process_data_variable_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::efdi::ProcessDataVariable >*
TreatmentZone::mutable_process_data_variable() {
  // @@protoc_insertion_point(field_mutable_list:efdi.TreatmentZone.process_data_variable)
  return &process_data_variable_;
}
inline const ::google::protobuf::RepeatedPtrField< ::efdi::ProcessDataVariable >&
TreatmentZone::process_data_variable() const {
  // @@protoc_insertion_point(field_list:efdi.TreatmentZone.process_data_variable)
  return process_data_variable_;
}

// repeated .google.protobuf.Any extension = 2048;
inline int TreatmentZone::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& TreatmentZone::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.TreatmentZone.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* TreatmentZone::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.TreatmentZone.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* TreatmentZone::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.TreatmentZone.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
TreatmentZone::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.TreatmentZone.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
TreatmentZone::extension() const {
  // @@protoc_insertion_point(field_list:efdi.TreatmentZone.extension)
  return extension_;
}

// -------------------------------------------------------------------

// ValuePresentation

// .efdi.UID value_presentation_id = 1;
inline bool ValuePresentation::has_value_presentation_id() const {
  return this != internal_default_instance() && value_presentation_id_ != NULL;
}
inline void ValuePresentation::clear_value_presentation_id() {
  if (GetArenaNoVirtual() == NULL && value_presentation_id_ != NULL) {
    delete value_presentation_id_;
  }
  value_presentation_id_ = NULL;
}
inline const ::efdi::UID& ValuePresentation::value_presentation_id() const {
  const ::efdi::UID* p = value_presentation_id_;
  // @@protoc_insertion_point(field_get:efdi.ValuePresentation.value_presentation_id)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* ValuePresentation::release_value_presentation_id() {
  // @@protoc_insertion_point(field_release:efdi.ValuePresentation.value_presentation_id)
  
  ::efdi::UID* temp = value_presentation_id_;
  value_presentation_id_ = NULL;
  return temp;
}
inline ::efdi::UID* ValuePresentation::mutable_value_presentation_id() {
  
  if (value_presentation_id_ == NULL) {
    value_presentation_id_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.ValuePresentation.value_presentation_id)
  return value_presentation_id_;
}
inline void ValuePresentation::set_allocated_value_presentation_id(::efdi::UID* value_presentation_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_presentation_id_;
  }
  if (value_presentation_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_presentation_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_presentation_id, submessage_arena);
    }
    
  } else {
    
  }
  value_presentation_id_ = value_presentation_id;
  // @@protoc_insertion_point(field_set_allocated:efdi.ValuePresentation.value_presentation_id)
}

// sint64 offset = 2;
inline void ValuePresentation::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ValuePresentation::offset() const {
  // @@protoc_insertion_point(field_get:efdi.ValuePresentation.offset)
  return offset_;
}
inline void ValuePresentation::set_offset(::google::protobuf::int64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:efdi.ValuePresentation.offset)
}

// double scale = 3;
inline void ValuePresentation::clear_scale() {
  scale_ = 0;
}
inline double ValuePresentation::scale() const {
  // @@protoc_insertion_point(field_get:efdi.ValuePresentation.scale)
  return scale_;
}
inline void ValuePresentation::set_scale(double value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:efdi.ValuePresentation.scale)
}

// uint32 number_of_decimals = 4;
inline void ValuePresentation::clear_number_of_decimals() {
  number_of_decimals_ = 0u;
}
inline ::google::protobuf::uint32 ValuePresentation::number_of_decimals() const {
  // @@protoc_insertion_point(field_get:efdi.ValuePresentation.number_of_decimals)
  return number_of_decimals_;
}
inline void ValuePresentation::set_number_of_decimals(::google::protobuf::uint32 value) {
  
  number_of_decimals_ = value;
  // @@protoc_insertion_point(field_set:efdi.ValuePresentation.number_of_decimals)
}

// string unit_designator = 5;
inline void ValuePresentation::clear_unit_designator() {
  unit_designator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ValuePresentation::unit_designator() const {
  // @@protoc_insertion_point(field_get:efdi.ValuePresentation.unit_designator)
  return unit_designator_.GetNoArena();
}
inline void ValuePresentation::set_unit_designator(const ::std::string& value) {
  
  unit_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.ValuePresentation.unit_designator)
}
#if LANG_CXX11
inline void ValuePresentation::set_unit_designator(::std::string&& value) {
  
  unit_designator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.ValuePresentation.unit_designator)
}
#endif
inline void ValuePresentation::set_unit_designator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  unit_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.ValuePresentation.unit_designator)
}
inline void ValuePresentation::set_unit_designator(const char* value, size_t size) {
  
  unit_designator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.ValuePresentation.unit_designator)
}
inline ::std::string* ValuePresentation::mutable_unit_designator() {
  
  // @@protoc_insertion_point(field_mutable:efdi.ValuePresentation.unit_designator)
  return unit_designator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ValuePresentation::release_unit_designator() {
  // @@protoc_insertion_point(field_release:efdi.ValuePresentation.unit_designator)
  
  return unit_designator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ValuePresentation::set_allocated_unit_designator(::std::string* unit_designator) {
  if (unit_designator != NULL) {
    
  } else {
    
  }
  unit_designator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit_designator);
  // @@protoc_insertion_point(field_set_allocated:efdi.ValuePresentation.unit_designator)
}

// .efdi.UID colour_legend_id_ref = 6;
inline bool ValuePresentation::has_colour_legend_id_ref() const {
  return this != internal_default_instance() && colour_legend_id_ref_ != NULL;
}
inline void ValuePresentation::clear_colour_legend_id_ref() {
  if (GetArenaNoVirtual() == NULL && colour_legend_id_ref_ != NULL) {
    delete colour_legend_id_ref_;
  }
  colour_legend_id_ref_ = NULL;
}
inline const ::efdi::UID& ValuePresentation::colour_legend_id_ref() const {
  const ::efdi::UID* p = colour_legend_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.ValuePresentation.colour_legend_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* ValuePresentation::release_colour_legend_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.ValuePresentation.colour_legend_id_ref)
  
  ::efdi::UID* temp = colour_legend_id_ref_;
  colour_legend_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* ValuePresentation::mutable_colour_legend_id_ref() {
  
  if (colour_legend_id_ref_ == NULL) {
    colour_legend_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.ValuePresentation.colour_legend_id_ref)
  return colour_legend_id_ref_;
}
inline void ValuePresentation::set_allocated_colour_legend_id_ref(::efdi::UID* colour_legend_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete colour_legend_id_ref_;
  }
  if (colour_legend_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      colour_legend_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, colour_legend_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  colour_legend_id_ref_ = colour_legend_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.ValuePresentation.colour_legend_id_ref)
}

// repeated .google.protobuf.Any extension = 2048;
inline int ValuePresentation::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& ValuePresentation::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ValuePresentation.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* ValuePresentation::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ValuePresentation.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* ValuePresentation::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.ValuePresentation.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
ValuePresentation::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ValuePresentation.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
ValuePresentation::extension() const {
  // @@protoc_insertion_point(field_list:efdi.ValuePresentation.extension)
  return extension_;
}

// -------------------------------------------------------------------

// Worker

// .efdi.UID worker_id = 1;
inline bool Worker::has_worker_id() const {
  return this != internal_default_instance() && worker_id_ != NULL;
}
inline void Worker::clear_worker_id() {
  if (GetArenaNoVirtual() == NULL && worker_id_ != NULL) {
    delete worker_id_;
  }
  worker_id_ = NULL;
}
inline const ::efdi::UID& Worker::worker_id() const {
  const ::efdi::UID* p = worker_id_;
  // @@protoc_insertion_point(field_get:efdi.Worker.worker_id)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* Worker::release_worker_id() {
  // @@protoc_insertion_point(field_release:efdi.Worker.worker_id)
  
  ::efdi::UID* temp = worker_id_;
  worker_id_ = NULL;
  return temp;
}
inline ::efdi::UID* Worker::mutable_worker_id() {
  
  if (worker_id_ == NULL) {
    worker_id_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.Worker.worker_id)
  return worker_id_;
}
inline void Worker::set_allocated_worker_id(::efdi::UID* worker_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete worker_id_;
  }
  if (worker_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      worker_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, worker_id, submessage_arena);
    }
    
  } else {
    
  }
  worker_id_ = worker_id;
  // @@protoc_insertion_point(field_set_allocated:efdi.Worker.worker_id)
}

// string worker_last_name = 2;
inline void Worker::clear_worker_last_name() {
  worker_last_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Worker::worker_last_name() const {
  // @@protoc_insertion_point(field_get:efdi.Worker.worker_last_name)
  return worker_last_name_.GetNoArena();
}
inline void Worker::set_worker_last_name(const ::std::string& value) {
  
  worker_last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Worker.worker_last_name)
}
#if LANG_CXX11
inline void Worker::set_worker_last_name(::std::string&& value) {
  
  worker_last_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Worker.worker_last_name)
}
#endif
inline void Worker::set_worker_last_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  worker_last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Worker.worker_last_name)
}
inline void Worker::set_worker_last_name(const char* value, size_t size) {
  
  worker_last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Worker.worker_last_name)
}
inline ::std::string* Worker::mutable_worker_last_name() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Worker.worker_last_name)
  return worker_last_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Worker::release_worker_last_name() {
  // @@protoc_insertion_point(field_release:efdi.Worker.worker_last_name)
  
  return worker_last_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Worker::set_allocated_worker_last_name(::std::string* worker_last_name) {
  if (worker_last_name != NULL) {
    
  } else {
    
  }
  worker_last_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), worker_last_name);
  // @@protoc_insertion_point(field_set_allocated:efdi.Worker.worker_last_name)
}

// string worker_first_name = 3;
inline void Worker::clear_worker_first_name() {
  worker_first_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Worker::worker_first_name() const {
  // @@protoc_insertion_point(field_get:efdi.Worker.worker_first_name)
  return worker_first_name_.GetNoArena();
}
inline void Worker::set_worker_first_name(const ::std::string& value) {
  
  worker_first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Worker.worker_first_name)
}
#if LANG_CXX11
inline void Worker::set_worker_first_name(::std::string&& value) {
  
  worker_first_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Worker.worker_first_name)
}
#endif
inline void Worker::set_worker_first_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  worker_first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Worker.worker_first_name)
}
inline void Worker::set_worker_first_name(const char* value, size_t size) {
  
  worker_first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Worker.worker_first_name)
}
inline ::std::string* Worker::mutable_worker_first_name() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Worker.worker_first_name)
  return worker_first_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Worker::release_worker_first_name() {
  // @@protoc_insertion_point(field_release:efdi.Worker.worker_first_name)
  
  return worker_first_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Worker::set_allocated_worker_first_name(::std::string* worker_first_name) {
  if (worker_first_name != NULL) {
    
  } else {
    
  }
  worker_first_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), worker_first_name);
  // @@protoc_insertion_point(field_set_allocated:efdi.Worker.worker_first_name)
}

// string worker_street = 4;
inline void Worker::clear_worker_street() {
  worker_street_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Worker::worker_street() const {
  // @@protoc_insertion_point(field_get:efdi.Worker.worker_street)
  return worker_street_.GetNoArena();
}
inline void Worker::set_worker_street(const ::std::string& value) {
  
  worker_street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Worker.worker_street)
}
#if LANG_CXX11
inline void Worker::set_worker_street(::std::string&& value) {
  
  worker_street_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Worker.worker_street)
}
#endif
inline void Worker::set_worker_street(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  worker_street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Worker.worker_street)
}
inline void Worker::set_worker_street(const char* value, size_t size) {
  
  worker_street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Worker.worker_street)
}
inline ::std::string* Worker::mutable_worker_street() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Worker.worker_street)
  return worker_street_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Worker::release_worker_street() {
  // @@protoc_insertion_point(field_release:efdi.Worker.worker_street)
  
  return worker_street_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Worker::set_allocated_worker_street(::std::string* worker_street) {
  if (worker_street != NULL) {
    
  } else {
    
  }
  worker_street_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), worker_street);
  // @@protoc_insertion_point(field_set_allocated:efdi.Worker.worker_street)
}

// string worker_po_box = 5;
inline void Worker::clear_worker_po_box() {
  worker_po_box_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Worker::worker_po_box() const {
  // @@protoc_insertion_point(field_get:efdi.Worker.worker_po_box)
  return worker_po_box_.GetNoArena();
}
inline void Worker::set_worker_po_box(const ::std::string& value) {
  
  worker_po_box_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Worker.worker_po_box)
}
#if LANG_CXX11
inline void Worker::set_worker_po_box(::std::string&& value) {
  
  worker_po_box_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Worker.worker_po_box)
}
#endif
inline void Worker::set_worker_po_box(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  worker_po_box_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Worker.worker_po_box)
}
inline void Worker::set_worker_po_box(const char* value, size_t size) {
  
  worker_po_box_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Worker.worker_po_box)
}
inline ::std::string* Worker::mutable_worker_po_box() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Worker.worker_po_box)
  return worker_po_box_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Worker::release_worker_po_box() {
  // @@protoc_insertion_point(field_release:efdi.Worker.worker_po_box)
  
  return worker_po_box_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Worker::set_allocated_worker_po_box(::std::string* worker_po_box) {
  if (worker_po_box != NULL) {
    
  } else {
    
  }
  worker_po_box_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), worker_po_box);
  // @@protoc_insertion_point(field_set_allocated:efdi.Worker.worker_po_box)
}

// string worker_postal_code = 6;
inline void Worker::clear_worker_postal_code() {
  worker_postal_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Worker::worker_postal_code() const {
  // @@protoc_insertion_point(field_get:efdi.Worker.worker_postal_code)
  return worker_postal_code_.GetNoArena();
}
inline void Worker::set_worker_postal_code(const ::std::string& value) {
  
  worker_postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Worker.worker_postal_code)
}
#if LANG_CXX11
inline void Worker::set_worker_postal_code(::std::string&& value) {
  
  worker_postal_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Worker.worker_postal_code)
}
#endif
inline void Worker::set_worker_postal_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  worker_postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Worker.worker_postal_code)
}
inline void Worker::set_worker_postal_code(const char* value, size_t size) {
  
  worker_postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Worker.worker_postal_code)
}
inline ::std::string* Worker::mutable_worker_postal_code() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Worker.worker_postal_code)
  return worker_postal_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Worker::release_worker_postal_code() {
  // @@protoc_insertion_point(field_release:efdi.Worker.worker_postal_code)
  
  return worker_postal_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Worker::set_allocated_worker_postal_code(::std::string* worker_postal_code) {
  if (worker_postal_code != NULL) {
    
  } else {
    
  }
  worker_postal_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), worker_postal_code);
  // @@protoc_insertion_point(field_set_allocated:efdi.Worker.worker_postal_code)
}

// string worker_city = 7;
inline void Worker::clear_worker_city() {
  worker_city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Worker::worker_city() const {
  // @@protoc_insertion_point(field_get:efdi.Worker.worker_city)
  return worker_city_.GetNoArena();
}
inline void Worker::set_worker_city(const ::std::string& value) {
  
  worker_city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Worker.worker_city)
}
#if LANG_CXX11
inline void Worker::set_worker_city(::std::string&& value) {
  
  worker_city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Worker.worker_city)
}
#endif
inline void Worker::set_worker_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  worker_city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Worker.worker_city)
}
inline void Worker::set_worker_city(const char* value, size_t size) {
  
  worker_city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Worker.worker_city)
}
inline ::std::string* Worker::mutable_worker_city() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Worker.worker_city)
  return worker_city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Worker::release_worker_city() {
  // @@protoc_insertion_point(field_release:efdi.Worker.worker_city)
  
  return worker_city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Worker::set_allocated_worker_city(::std::string* worker_city) {
  if (worker_city != NULL) {
    
  } else {
    
  }
  worker_city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), worker_city);
  // @@protoc_insertion_point(field_set_allocated:efdi.Worker.worker_city)
}

// string worker_state = 8;
inline void Worker::clear_worker_state() {
  worker_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Worker::worker_state() const {
  // @@protoc_insertion_point(field_get:efdi.Worker.worker_state)
  return worker_state_.GetNoArena();
}
inline void Worker::set_worker_state(const ::std::string& value) {
  
  worker_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Worker.worker_state)
}
#if LANG_CXX11
inline void Worker::set_worker_state(::std::string&& value) {
  
  worker_state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Worker.worker_state)
}
#endif
inline void Worker::set_worker_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  worker_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Worker.worker_state)
}
inline void Worker::set_worker_state(const char* value, size_t size) {
  
  worker_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Worker.worker_state)
}
inline ::std::string* Worker::mutable_worker_state() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Worker.worker_state)
  return worker_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Worker::release_worker_state() {
  // @@protoc_insertion_point(field_release:efdi.Worker.worker_state)
  
  return worker_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Worker::set_allocated_worker_state(::std::string* worker_state) {
  if (worker_state != NULL) {
    
  } else {
    
  }
  worker_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), worker_state);
  // @@protoc_insertion_point(field_set_allocated:efdi.Worker.worker_state)
}

// string worker_country = 9;
inline void Worker::clear_worker_country() {
  worker_country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Worker::worker_country() const {
  // @@protoc_insertion_point(field_get:efdi.Worker.worker_country)
  return worker_country_.GetNoArena();
}
inline void Worker::set_worker_country(const ::std::string& value) {
  
  worker_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Worker.worker_country)
}
#if LANG_CXX11
inline void Worker::set_worker_country(::std::string&& value) {
  
  worker_country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Worker.worker_country)
}
#endif
inline void Worker::set_worker_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  worker_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Worker.worker_country)
}
inline void Worker::set_worker_country(const char* value, size_t size) {
  
  worker_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Worker.worker_country)
}
inline ::std::string* Worker::mutable_worker_country() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Worker.worker_country)
  return worker_country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Worker::release_worker_country() {
  // @@protoc_insertion_point(field_release:efdi.Worker.worker_country)
  
  return worker_country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Worker::set_allocated_worker_country(::std::string* worker_country) {
  if (worker_country != NULL) {
    
  } else {
    
  }
  worker_country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), worker_country);
  // @@protoc_insertion_point(field_set_allocated:efdi.Worker.worker_country)
}

// string worker_phone = 10;
inline void Worker::clear_worker_phone() {
  worker_phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Worker::worker_phone() const {
  // @@protoc_insertion_point(field_get:efdi.Worker.worker_phone)
  return worker_phone_.GetNoArena();
}
inline void Worker::set_worker_phone(const ::std::string& value) {
  
  worker_phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Worker.worker_phone)
}
#if LANG_CXX11
inline void Worker::set_worker_phone(::std::string&& value) {
  
  worker_phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Worker.worker_phone)
}
#endif
inline void Worker::set_worker_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  worker_phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Worker.worker_phone)
}
inline void Worker::set_worker_phone(const char* value, size_t size) {
  
  worker_phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Worker.worker_phone)
}
inline ::std::string* Worker::mutable_worker_phone() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Worker.worker_phone)
  return worker_phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Worker::release_worker_phone() {
  // @@protoc_insertion_point(field_release:efdi.Worker.worker_phone)
  
  return worker_phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Worker::set_allocated_worker_phone(::std::string* worker_phone) {
  if (worker_phone != NULL) {
    
  } else {
    
  }
  worker_phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), worker_phone);
  // @@protoc_insertion_point(field_set_allocated:efdi.Worker.worker_phone)
}

// string worker_mobile = 11;
inline void Worker::clear_worker_mobile() {
  worker_mobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Worker::worker_mobile() const {
  // @@protoc_insertion_point(field_get:efdi.Worker.worker_mobile)
  return worker_mobile_.GetNoArena();
}
inline void Worker::set_worker_mobile(const ::std::string& value) {
  
  worker_mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Worker.worker_mobile)
}
#if LANG_CXX11
inline void Worker::set_worker_mobile(::std::string&& value) {
  
  worker_mobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Worker.worker_mobile)
}
#endif
inline void Worker::set_worker_mobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  worker_mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Worker.worker_mobile)
}
inline void Worker::set_worker_mobile(const char* value, size_t size) {
  
  worker_mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Worker.worker_mobile)
}
inline ::std::string* Worker::mutable_worker_mobile() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Worker.worker_mobile)
  return worker_mobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Worker::release_worker_mobile() {
  // @@protoc_insertion_point(field_release:efdi.Worker.worker_mobile)
  
  return worker_mobile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Worker::set_allocated_worker_mobile(::std::string* worker_mobile) {
  if (worker_mobile != NULL) {
    
  } else {
    
  }
  worker_mobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), worker_mobile);
  // @@protoc_insertion_point(field_set_allocated:efdi.Worker.worker_mobile)
}

// string worker_license_number = 12;
inline void Worker::clear_worker_license_number() {
  worker_license_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Worker::worker_license_number() const {
  // @@protoc_insertion_point(field_get:efdi.Worker.worker_license_number)
  return worker_license_number_.GetNoArena();
}
inline void Worker::set_worker_license_number(const ::std::string& value) {
  
  worker_license_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Worker.worker_license_number)
}
#if LANG_CXX11
inline void Worker::set_worker_license_number(::std::string&& value) {
  
  worker_license_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Worker.worker_license_number)
}
#endif
inline void Worker::set_worker_license_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  worker_license_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Worker.worker_license_number)
}
inline void Worker::set_worker_license_number(const char* value, size_t size) {
  
  worker_license_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Worker.worker_license_number)
}
inline ::std::string* Worker::mutable_worker_license_number() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Worker.worker_license_number)
  return worker_license_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Worker::release_worker_license_number() {
  // @@protoc_insertion_point(field_release:efdi.Worker.worker_license_number)
  
  return worker_license_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Worker::set_allocated_worker_license_number(::std::string* worker_license_number) {
  if (worker_license_number != NULL) {
    
  } else {
    
  }
  worker_license_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), worker_license_number);
  // @@protoc_insertion_point(field_set_allocated:efdi.Worker.worker_license_number)
}

// string worker_email = 13;
inline void Worker::clear_worker_email() {
  worker_email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Worker::worker_email() const {
  // @@protoc_insertion_point(field_get:efdi.Worker.worker_email)
  return worker_email_.GetNoArena();
}
inline void Worker::set_worker_email(const ::std::string& value) {
  
  worker_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:efdi.Worker.worker_email)
}
#if LANG_CXX11
inline void Worker::set_worker_email(::std::string&& value) {
  
  worker_email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:efdi.Worker.worker_email)
}
#endif
inline void Worker::set_worker_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  worker_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:efdi.Worker.worker_email)
}
inline void Worker::set_worker_email(const char* value, size_t size) {
  
  worker_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:efdi.Worker.worker_email)
}
inline ::std::string* Worker::mutable_worker_email() {
  
  // @@protoc_insertion_point(field_mutable:efdi.Worker.worker_email)
  return worker_email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Worker::release_worker_email() {
  // @@protoc_insertion_point(field_release:efdi.Worker.worker_email)
  
  return worker_email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Worker::set_allocated_worker_email(::std::string* worker_email) {
  if (worker_email != NULL) {
    
  } else {
    
  }
  worker_email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), worker_email);
  // @@protoc_insertion_point(field_set_allocated:efdi.Worker.worker_email)
}

// repeated .google.protobuf.Any extension = 2048;
inline int Worker::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& Worker::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.Worker.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* Worker::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.Worker.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* Worker::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.Worker.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
Worker::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.Worker.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
Worker::extension() const {
  // @@protoc_insertion_point(field_list:efdi.Worker.extension)
  return extension_;
}

// -------------------------------------------------------------------

// WorkerAllocation

// .efdi.UID worker_id_ref = 1;
inline bool WorkerAllocation::has_worker_id_ref() const {
  return this != internal_default_instance() && worker_id_ref_ != NULL;
}
inline void WorkerAllocation::clear_worker_id_ref() {
  if (GetArenaNoVirtual() == NULL && worker_id_ref_ != NULL) {
    delete worker_id_ref_;
  }
  worker_id_ref_ = NULL;
}
inline const ::efdi::UID& WorkerAllocation::worker_id_ref() const {
  const ::efdi::UID* p = worker_id_ref_;
  // @@protoc_insertion_point(field_get:efdi.WorkerAllocation.worker_id_ref)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* WorkerAllocation::release_worker_id_ref() {
  // @@protoc_insertion_point(field_release:efdi.WorkerAllocation.worker_id_ref)
  
  ::efdi::UID* temp = worker_id_ref_;
  worker_id_ref_ = NULL;
  return temp;
}
inline ::efdi::UID* WorkerAllocation::mutable_worker_id_ref() {
  
  if (worker_id_ref_ == NULL) {
    worker_id_ref_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.WorkerAllocation.worker_id_ref)
  return worker_id_ref_;
}
inline void WorkerAllocation::set_allocated_worker_id_ref(::efdi::UID* worker_id_ref) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete worker_id_ref_;
  }
  if (worker_id_ref) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      worker_id_ref = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, worker_id_ref, submessage_arena);
    }
    
  } else {
    
  }
  worker_id_ref_ = worker_id_ref;
  // @@protoc_insertion_point(field_set_allocated:efdi.WorkerAllocation.worker_id_ref)
}

// .efdi.AllocationStamp allocation_stamp = 2;
inline bool WorkerAllocation::has_allocation_stamp() const {
  return this != internal_default_instance() && allocation_stamp_ != NULL;
}
inline void WorkerAllocation::clear_allocation_stamp() {
  if (GetArenaNoVirtual() == NULL && allocation_stamp_ != NULL) {
    delete allocation_stamp_;
  }
  allocation_stamp_ = NULL;
}
inline const ::efdi::AllocationStamp& WorkerAllocation::allocation_stamp() const {
  const ::efdi::AllocationStamp* p = allocation_stamp_;
  // @@protoc_insertion_point(field_get:efdi.WorkerAllocation.allocation_stamp)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::AllocationStamp*>(
      &::efdi::_AllocationStamp_default_instance_);
}
inline ::efdi::AllocationStamp* WorkerAllocation::release_allocation_stamp() {
  // @@protoc_insertion_point(field_release:efdi.WorkerAllocation.allocation_stamp)
  
  ::efdi::AllocationStamp* temp = allocation_stamp_;
  allocation_stamp_ = NULL;
  return temp;
}
inline ::efdi::AllocationStamp* WorkerAllocation::mutable_allocation_stamp() {
  
  if (allocation_stamp_ == NULL) {
    allocation_stamp_ = new ::efdi::AllocationStamp;
  }
  // @@protoc_insertion_point(field_mutable:efdi.WorkerAllocation.allocation_stamp)
  return allocation_stamp_;
}
inline void WorkerAllocation::set_allocated_allocation_stamp(::efdi::AllocationStamp* allocation_stamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete allocation_stamp_;
  }
  if (allocation_stamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      allocation_stamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, allocation_stamp, submessage_arena);
    }
    
  } else {
    
  }
  allocation_stamp_ = allocation_stamp;
  // @@protoc_insertion_point(field_set_allocated:efdi.WorkerAllocation.allocation_stamp)
}

// repeated .google.protobuf.Any extension = 2048;
inline int WorkerAllocation::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& WorkerAllocation::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.WorkerAllocation.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* WorkerAllocation::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.WorkerAllocation.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* WorkerAllocation::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.WorkerAllocation.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
WorkerAllocation::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.WorkerAllocation.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
WorkerAllocation::extension() const {
  // @@protoc_insertion_point(field_list:efdi.WorkerAllocation.extension)
  return extension_;
}

// -------------------------------------------------------------------

// ExternalFileReference

// .efdi.UID filename = 1;
inline bool ExternalFileReference::has_filename() const {
  return this != internal_default_instance() && filename_ != NULL;
}
inline void ExternalFileReference::clear_filename() {
  if (GetArenaNoVirtual() == NULL && filename_ != NULL) {
    delete filename_;
  }
  filename_ = NULL;
}
inline const ::efdi::UID& ExternalFileReference::filename() const {
  const ::efdi::UID* p = filename_;
  // @@protoc_insertion_point(field_get:efdi.ExternalFileReference.filename)
  return p != NULL ? *p : *reinterpret_cast<const ::efdi::UID*>(
      &::efdi::_UID_default_instance_);
}
inline ::efdi::UID* ExternalFileReference::release_filename() {
  // @@protoc_insertion_point(field_release:efdi.ExternalFileReference.filename)
  
  ::efdi::UID* temp = filename_;
  filename_ = NULL;
  return temp;
}
inline ::efdi::UID* ExternalFileReference::mutable_filename() {
  
  if (filename_ == NULL) {
    filename_ = new ::efdi::UID;
  }
  // @@protoc_insertion_point(field_mutable:efdi.ExternalFileReference.filename)
  return filename_;
}
inline void ExternalFileReference::set_allocated_filename(::efdi::UID* filename) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete filename_;
  }
  if (filename) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      filename = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, filename, submessage_arena);
    }
    
  } else {
    
  }
  filename_ = filename;
  // @@protoc_insertion_point(field_set_allocated:efdi.ExternalFileReference.filename)
}

// .efdi.ExternalFileReference.FileType file_type = 2;
inline void ExternalFileReference::clear_file_type() {
  file_type_ = 0;
}
inline ::efdi::ExternalFileReference_FileType ExternalFileReference::file_type() const {
  // @@protoc_insertion_point(field_get:efdi.ExternalFileReference.file_type)
  return static_cast< ::efdi::ExternalFileReference_FileType >(file_type_);
}
inline void ExternalFileReference::set_file_type(::efdi::ExternalFileReference_FileType value) {
  
  file_type_ = value;
  // @@protoc_insertion_point(field_set:efdi.ExternalFileReference.file_type)
}

// repeated .google.protobuf.Any extension = 2048;
inline int ExternalFileReference::extension_size() const {
  return extension_.size();
}
inline const ::google::protobuf::Any& ExternalFileReference::extension(int index) const {
  // @@protoc_insertion_point(field_get:efdi.ExternalFileReference.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* ExternalFileReference::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:efdi.ExternalFileReference.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::Any* ExternalFileReference::add_extension() {
  // @@protoc_insertion_point(field_add:efdi.ExternalFileReference.extension)
  return extension_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
ExternalFileReference::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:efdi.ExternalFileReference.extension)
  return &extension_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
ExternalFileReference::extension() const {
  // @@protoc_insertion_point(field_list:efdi.ExternalFileReference.extension)
  return extension_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace efdi

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::efdi::AllocationStamp_AllocationStampType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::efdi::AllocationStamp_AllocationStampType>() {
  return ::efdi::AllocationStamp_AllocationStampType_descriptor();
}
template <> struct is_proto_enum< ::efdi::AttachedFile_Preserve> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::efdi::AttachedFile_Preserve>() {
  return ::efdi::AttachedFile_Preserve_descriptor();
}
template <> struct is_proto_enum< ::efdi::CodedComment_CodedCommentScope> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::efdi::CodedComment_CodedCommentScope>() {
  return ::efdi::CodedComment_CodedCommentScope_descriptor();
}
template <> struct is_proto_enum< ::efdi::DeviceElement_DeviceElementType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::efdi::DeviceElement_DeviceElementType>() {
  return ::efdi::DeviceElement_DeviceElementType_descriptor();
}
template <> struct is_proto_enum< ::efdi::Grid_GridType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::efdi::Grid_GridType>() {
  return ::efdi::Grid_GridType_descriptor();
}
template <> struct is_proto_enum< ::efdi::GuidancePattern_GuidancePatternType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::efdi::GuidancePattern_GuidancePatternType>() {
  return ::efdi::GuidancePattern_GuidancePatternType_descriptor();
}
template <> struct is_proto_enum< ::efdi::GuidancePattern_GuidancePatternOptions> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::efdi::GuidancePattern_GuidancePatternOptions>() {
  return ::efdi::GuidancePattern_GuidancePatternOptions_descriptor();
}
template <> struct is_proto_enum< ::efdi::GuidancePattern_GuidancePatternPropagationDirection> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::efdi::GuidancePattern_GuidancePatternPropagationDirection>() {
  return ::efdi::GuidancePattern_GuidancePatternPropagationDirection_descriptor();
}
template <> struct is_proto_enum< ::efdi::GuidancePattern_GuidancePatternExtension> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::efdi::GuidancePattern_GuidancePatternExtension>() {
  return ::efdi::GuidancePattern_GuidancePatternExtension_descriptor();
}
template <> struct is_proto_enum< ::efdi::GuidancePattern_GuidancePatternGNSSMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::efdi::GuidancePattern_GuidancePatternGNSSMethod>() {
  return ::efdi::GuidancePattern_GuidancePatternGNSSMethod_descriptor();
}
template <> struct is_proto_enum< ::efdi::ISO11783_TaskData_VersionMajor> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::efdi::ISO11783_TaskData_VersionMajor>() {
  return ::efdi::ISO11783_TaskData_VersionMajor_descriptor();
}
template <> struct is_proto_enum< ::efdi::ISO11783_TaskData_DataTransferOrigin> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::efdi::ISO11783_TaskData_DataTransferOrigin>() {
  return ::efdi::ISO11783_TaskData_DataTransferOrigin_descriptor();
}
template <> struct is_proto_enum< ::efdi::LineString_LinestringType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::efdi::LineString_LinestringType>() {
  return ::efdi::LineString_LinestringType_descriptor();
}
template <> struct is_proto_enum< ::efdi::Point_PointType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::efdi::Point_PointType>() {
  return ::efdi::Point_PointType_descriptor();
}
template <> struct is_proto_enum< ::efdi::Polygon_PolygonType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::efdi::Polygon_PolygonType>() {
  return ::efdi::Polygon_PolygonType_descriptor();
}
template <> struct is_proto_enum< ::efdi::Position_PositionStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::efdi::Position_PositionStatus>() {
  return ::efdi::Position_PositionStatus_descriptor();
}
template <> struct is_proto_enum< ::efdi::Product_ProductType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::efdi::Product_ProductType>() {
  return ::efdi::Product_ProductType_descriptor();
}
template <> struct is_proto_enum< ::efdi::ProductAllocation_TransferMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::efdi::ProductAllocation_TransferMode>() {
  return ::efdi::ProductAllocation_TransferMode_descriptor();
}
template <> struct is_proto_enum< ::efdi::ProductGroup_ProductGroupType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::efdi::ProductGroup_ProductGroupType>() {
  return ::efdi::ProductGroup_ProductGroupType_descriptor();
}
template <> struct is_proto_enum< ::efdi::Task_TaskStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::efdi::Task_TaskStatus>() {
  return ::efdi::Task_TaskStatus_descriptor();
}
template <> struct is_proto_enum< ::efdi::TaskControllerCapabilities_VersionNumber> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::efdi::TaskControllerCapabilities_VersionNumber>() {
  return ::efdi::TaskControllerCapabilities_VersionNumber_descriptor();
}
template <> struct is_proto_enum< ::efdi::Time_TimeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::efdi::Time_TimeType>() {
  return ::efdi::Time_TimeType_descriptor();
}
template <> struct is_proto_enum< ::efdi::TimeIntOnly_TimeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::efdi::TimeIntOnly_TimeType>() {
  return ::efdi::TimeIntOnly_TimeType_descriptor();
}
template <> struct is_proto_enum< ::efdi::TimeDetHier_TimeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::efdi::TimeDetHier_TimeType>() {
  return ::efdi::TimeDetHier_TimeType_descriptor();
}
template <> struct is_proto_enum< ::efdi::TimeLog_TimeLogType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::efdi::TimeLog_TimeLogType>() {
  return ::efdi::TimeLog_TimeLogType_descriptor();
}
template <> struct is_proto_enum< ::efdi::ExternalFileReference_FileType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::efdi::ExternalFileReference_FileType>() {
  return ::efdi::ExternalFileReference_FileType_descriptor();
}
template <> struct is_proto_enum< ::efdi::UIDHead> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::efdi::UIDHead>() {
  return ::efdi::UIDHead_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messaging_2frequest_2fpayload_2fefdi_2fgrpc_2defdi_2eproto__INCLUDED
