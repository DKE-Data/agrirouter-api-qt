// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commons/chunk.proto

#ifndef PROTOBUF_commons_2fchunk_2eproto__INCLUDED
#define PROTOBUF_commons_2fchunk_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_commons_2fchunk_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsChunkComponentImpl();
void InitDefaultsChunkComponent();
inline void InitDefaults() {
  InitDefaultsChunkComponent();
}
}  // namespace protobuf_commons_2fchunk_2eproto
namespace agrirouter {
namespace commons {
class ChunkComponent;
class ChunkComponentDefaultTypeInternal;
extern ChunkComponentDefaultTypeInternal _ChunkComponent_default_instance_;
}  // namespace commons
}  // namespace agrirouter
namespace agrirouter {
namespace commons {

// ===================================================================

class ChunkComponent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:agrirouter.commons.ChunkComponent) */ {
 public:
  ChunkComponent();
  virtual ~ChunkComponent();

  ChunkComponent(const ChunkComponent& from);

  inline ChunkComponent& operator=(const ChunkComponent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChunkComponent(ChunkComponent&& from) noexcept
    : ChunkComponent() {
    *this = ::std::move(from);
  }

  inline ChunkComponent& operator=(ChunkComponent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChunkComponent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChunkComponent* internal_default_instance() {
    return reinterpret_cast<const ChunkComponent*>(
               &_ChunkComponent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ChunkComponent* other);
  friend void swap(ChunkComponent& a, ChunkComponent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChunkComponent* New() const PROTOBUF_FINAL { return New(NULL); }

  ChunkComponent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChunkComponent& from);
  void MergeFrom(const ChunkComponent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChunkComponent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string context_id = 1;
  void clear_context_id();
  static const int kContextIdFieldNumber = 1;
  const ::std::string& context_id() const;
  void set_context_id(const ::std::string& value);
  #if LANG_CXX11
  void set_context_id(::std::string&& value);
  #endif
  void set_context_id(const char* value);
  void set_context_id(const char* value, size_t size);
  ::std::string* mutable_context_id();
  ::std::string* release_context_id();
  void set_allocated_context_id(::std::string* context_id);

  // int64 current = 2;
  void clear_current();
  static const int kCurrentFieldNumber = 2;
  ::google::protobuf::int64 current() const;
  void set_current(::google::protobuf::int64 value);

  // int64 total = 3;
  void clear_total();
  static const int kTotalFieldNumber = 3;
  ::google::protobuf::int64 total() const;
  void set_total(::google::protobuf::int64 value);

  // int64 total_size = 4;
  void clear_total_size();
  static const int kTotalSizeFieldNumber = 4;
  ::google::protobuf::int64 total_size() const;
  void set_total_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:agrirouter.commons.ChunkComponent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr context_id_;
  ::google::protobuf::int64 current_;
  ::google::protobuf::int64 total_;
  ::google::protobuf::int64 total_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_commons_2fchunk_2eproto::TableStruct;
  friend void ::protobuf_commons_2fchunk_2eproto::InitDefaultsChunkComponentImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChunkComponent

// string context_id = 1;
inline void ChunkComponent::clear_context_id() {
  context_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChunkComponent::context_id() const {
  // @@protoc_insertion_point(field_get:agrirouter.commons.ChunkComponent.context_id)
  return context_id_.GetNoArena();
}
inline void ChunkComponent::set_context_id(const ::std::string& value) {
  
  context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agrirouter.commons.ChunkComponent.context_id)
}
#if LANG_CXX11
inline void ChunkComponent::set_context_id(::std::string&& value) {
  
  context_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:agrirouter.commons.ChunkComponent.context_id)
}
#endif
inline void ChunkComponent::set_context_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agrirouter.commons.ChunkComponent.context_id)
}
inline void ChunkComponent::set_context_id(const char* value, size_t size) {
  
  context_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agrirouter.commons.ChunkComponent.context_id)
}
inline ::std::string* ChunkComponent::mutable_context_id() {
  
  // @@protoc_insertion_point(field_mutable:agrirouter.commons.ChunkComponent.context_id)
  return context_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChunkComponent::release_context_id() {
  // @@protoc_insertion_point(field_release:agrirouter.commons.ChunkComponent.context_id)
  
  return context_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChunkComponent::set_allocated_context_id(::std::string* context_id) {
  if (context_id != NULL) {
    
  } else {
    
  }
  context_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context_id);
  // @@protoc_insertion_point(field_set_allocated:agrirouter.commons.ChunkComponent.context_id)
}

// int64 current = 2;
inline void ChunkComponent::clear_current() {
  current_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ChunkComponent::current() const {
  // @@protoc_insertion_point(field_get:agrirouter.commons.ChunkComponent.current)
  return current_;
}
inline void ChunkComponent::set_current(::google::protobuf::int64 value) {
  
  current_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.commons.ChunkComponent.current)
}

// int64 total = 3;
inline void ChunkComponent::clear_total() {
  total_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ChunkComponent::total() const {
  // @@protoc_insertion_point(field_get:agrirouter.commons.ChunkComponent.total)
  return total_;
}
inline void ChunkComponent::set_total(::google::protobuf::int64 value) {
  
  total_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.commons.ChunkComponent.total)
}

// int64 total_size = 4;
inline void ChunkComponent::clear_total_size() {
  total_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ChunkComponent::total_size() const {
  // @@protoc_insertion_point(field_get:agrirouter.commons.ChunkComponent.total_size)
  return total_size_;
}
inline void ChunkComponent::set_total_size(::google::protobuf::int64 value) {
  
  total_size_ = value;
  // @@protoc_insertion_point(field_set:agrirouter.commons.ChunkComponent.total_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace commons
}  // namespace agrirouter

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_commons_2fchunk_2eproto__INCLUDED
